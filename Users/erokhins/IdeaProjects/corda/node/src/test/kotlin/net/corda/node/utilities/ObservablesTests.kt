'DatabaseTransactionManager' @ [19:55] ==> public companion object defined in net.corda.node.utilities.DatabaseTransactionManager[FakeCallableDescriptorForObject]

'currentOrNull' @ [19:82] ==> public final fun currentOrNull(): DatabaseTransaction? defined in net.corda.node.utilities.DatabaseTransactionManager.Companion[DeserializedSimpleFunctionDescriptor]

'mutableListOf' @ [21:22] ==> @SinceKotlin @InlineOnly public inline fun <T> mutableListOf(): MutableList<Closeable> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Closeable

'configureDatabase' @ [24:24] ==> public fun configureDatabase(dataSourceProperties: Properties, databaseProperties: Properties?, createSchemaService: () -> SchemaService = ..., createIdentityService: () -> IdentityService): CordaPersistence defined in net.corda.node.utilities[DeserializedSimpleFunctionDescriptor]

'makeTestDataSourceProperties' @ [24:42] ==> public fun makeTestDataSourceProperties(nodeName: String = ...): Properties defined in net.corda.testing.node[DeserializedSimpleFunctionDescriptor]

'makeTestDatabaseProperties' @ [24:74] ==> public fun makeTestDatabaseProperties(key: String? = ..., value: String? = ...): Properties defined in net.corda.testing.node[DeserializedSimpleFunctionDescriptor]

'toBeClosed' @ [25:9] ==> public final val toBeClosed: MutableList<Closeable> defined in net.corda.node.utilities.ObservablesTests[PropertyDescriptorImpl]

'database' @ [25:23] ==> val database: CordaPersistence defined in net.corda.node.utilities.ObservablesTests.createDatabase[LocalVariableDescriptor]

'database' @ [26:16] ==> val database: CordaPersistence defined in net.corda.node.utilities.ObservablesTests.createDatabase[LocalVariableDescriptor]

'After' @ [29:5] ==> public constructor After() defined in org.junit.After[JavaClassConstructorDescriptor]

'toBeClosed' @ [31:9] ==> public final val toBeClosed: MutableList<Closeable> defined in net.corda.node.utilities.ObservablesTests[PropertyDescriptorImpl]

'forEach' @ [31:20] ==> @HidesMembers public inline fun <T> Iterable<Closeable>.forEach(action: (Closeable) -> Unit): Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Closeable

'it' @ [31:30] ==> value-parameter it: Closeable defined in net.corda.node.utilities.ObservablesTests.after.<anonymous>[ValueParameterDescriptorImpl]

'close' @ [31:33] ==> public abstract fun close(): Unit defined in java.io.Closeable[JavaMethodDescriptor]

'toBeClosed' @ [32:9] ==> public final val toBeClosed: MutableList<Closeable> defined in net.corda.node.utilities.ObservablesTests[PropertyDescriptorImpl]

'clear' @ [32:20] ==> public abstract fun clear(): Unit defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor]

'Test' @ [35:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'createDatabase' @ [37:24] ==> public final fun createDatabase(): CordaPersistence defined in net.corda.node.utilities.ObservablesTests[SimpleFunctionDescriptorImpl]

'create' @ [39:37] ==> public open fun <T : (Any..Any?)> create(): (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in rx.subjects.PublishSubject[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Int

'source' @ [40:43] ==> val source: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed`[LocalVariableDescriptor]

'create' @ [42:41] ==> public open fun <V : (Any..Any?)> create(): (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]
Inferred types:
    <V : (Any..Any?)> -> Pair<Int, Boolean>

'create' @ [43:42] ==> public open fun <V : (Any..Any?)> create(): (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]
Inferred types:
    <V : (Any..Any?)> -> Pair<Int, Boolean>

'observable' @ [45:9] ==> val observable: Observable<Int> defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed`[LocalVariableDescriptor]

'first' @ [45:20] ==> public final fun first(): (Observable<(Int..Int?)>..Observable<(Int..Int?)>?) defined in rx.Observable[JavaMethodDescriptor]

'subscribe' @ [45:28] ==> public final fun subscribe(p0: (((Int..Int?)) -> Unit..(((Int..Int?)) -> Unit)?)): (Subscription..Subscription?) defined in rx.Observable[MyFunctionDescriptor]

'firstEvent' @ [45:40] ==> val firstEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed`[LocalVariableDescriptor]

'set' @ [45:51] ==> @CanIgnoreReturnValue public open fun set(@Nullable p0: Pair<Int, Boolean>?): Boolean defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'it' @ [45:55] ==> value-parameter it: (Int..Int?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed`.<anonymous>[ValueParameterDescriptorImpl]

'isInDatabaseTransaction' @ [45:61] ==> private final fun isInDatabaseTransaction(): Boolean defined in net.corda.node.utilities.ObservablesTests[SimpleFunctionDescriptorImpl]

'observable' @ [46:9] ==> val observable: Observable<Int> defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed`[LocalVariableDescriptor]

'skip' @ [46:20] ==> public final fun skip(p0: Int): (Observable<(Int..Int?)>..Observable<(Int..Int?)>?) defined in rx.Observable[JavaMethodDescriptor]

'first' @ [46:28] ==> public final fun first(): (Observable<(Int..Int?)>..Observable<(Int..Int?)>?) defined in rx.Observable[JavaMethodDescriptor]

'subscribe' @ [46:36] ==> public final fun subscribe(p0: (((Int..Int?)) -> Unit..(((Int..Int?)) -> Unit)?)): (Subscription..Subscription?) defined in rx.Observable[MyFunctionDescriptor]

'secondEvent' @ [46:48] ==> val secondEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed`[LocalVariableDescriptor]

'set' @ [46:60] ==> @CanIgnoreReturnValue public open fun set(@Nullable p0: Pair<Int, Boolean>?): Boolean defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'it' @ [46:64] ==> value-parameter it: (Int..Int?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed`.<anonymous>[ValueParameterDescriptorImpl]

'isInDatabaseTransaction' @ [46:70] ==> private final fun isInDatabaseTransaction(): Boolean defined in net.corda.node.utilities.ObservablesTests[SimpleFunctionDescriptorImpl]

'database' @ [48:9] ==> val database: CordaPersistence defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed`[LocalVariableDescriptor]

'transaction' @ [48:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?)>): AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>?)>?)>?)>

'source' @ [49:34] ==> val source: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed`[LocalVariableDescriptor]

'bufferUntilDatabaseCommit' @ [49:41] ==> public fun <T : Any> Observer<(Int..Int?)>.bufferUntilDatabaseCommit(): Observer<(Int..Int?)> defined in net.corda.node.utilities[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T : Any> -> (kotlin.Int..kotlin.Int?)

'assertThat' @ [50:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)): (AbstractObjectAssert<*, (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<*, (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> PublishSubject<(kotlin.Int..kotlin.Int?)>

'source' @ [50:24] ==> val source: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed`[LocalVariableDescriptor]

'isNotEqualTo' @ [50:32] ==> public open fun isNotEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'delayedSubject' @ [50:45] ==> val delayedSubject: Observer<(Int..Int?)> defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed`.<anonymous>[LocalVariableDescriptor]

'delayedSubject' @ [51:13] ==> val delayedSubject: Observer<(Int..Int?)> defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed`.<anonymous>[LocalVariableDescriptor]

'onNext' @ [51:28] ==> public abstract fun onNext(p0: (Int..Int?)): Unit defined in rx.Observer[JavaMethodDescriptor]

'source' @ [52:13] ==> val source: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed`[LocalVariableDescriptor]

'onNext' @ [52:20] ==> public open fun onNext(p0: (Int..Int?)): Unit defined in rx.subjects.PublishSubject[JavaMethodDescriptor]

'assertThat' @ [53:13] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'firstEvent' @ [53:24] ==> val firstEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed`[LocalVariableDescriptor]

'isDone' @ [53:35] ==> public final val <V : (Any..Any?)> SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>.isDone: Boolean[MyPropertyDescriptor]
Inferred types:
    <V : (Any..Any?)> -> (kotlin.Pair<kotlin.Int, kotlin.Boolean>..kotlin.Pair<kotlin.Int, kotlin.Boolean>?)

'isTrue' @ [53:43] ==> public open fun isTrue(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [54:13] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'secondEvent' @ [54:24] ==> val secondEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed`[LocalVariableDescriptor]

'isDone' @ [54:36] ==> public final val <V : (Any..Any?)> SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>.isDone: Boolean[MyPropertyDescriptor]
Inferred types:
    <V : (Any..Any?)> -> (kotlin.Pair<kotlin.Int, kotlin.Boolean>..kotlin.Pair<kotlin.Int, kotlin.Boolean>?)

'isFalse' @ [54:44] ==> public open fun isFalse(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [56:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'secondEvent' @ [56:20] ==> val secondEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed`[LocalVariableDescriptor]

'isDone' @ [56:32] ==> public final val <V : (Any..Any?)> SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>.isDone: Boolean[MyPropertyDescriptor]
Inferred types:
    <V : (Any..Any?)> -> (kotlin.Pair<kotlin.Int, kotlin.Boolean>..kotlin.Pair<kotlin.Int, kotlin.Boolean>?)

'isTrue' @ [56:40] ==> public open fun isTrue(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [58:9] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Pair<Int, Boolean>..Pair<Int, Boolean>?)): (AbstractObjectAssert<*, (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<*, (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Pair<Int, Boolean>

'firstEvent' @ [58:20] ==> val firstEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed`[LocalVariableDescriptor]

'get' @ [58:31] ==> @CanIgnoreReturnValue public final fun get(): (Pair<Int, Boolean>..Pair<Int, Boolean>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'isEqualTo' @ [58:38] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'to' @ [58:48] ==> public infix fun <A, B> Int.to(that: Boolean): Pair<Int, Boolean> defined in kotlin[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> Int
    <B> -> Boolean

'assertThat' @ [59:9] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Pair<Int, Boolean>..Pair<Int, Boolean>?)): (AbstractObjectAssert<*, (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<*, (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Pair<Int, Boolean>

'secondEvent' @ [59:20] ==> val secondEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed`[LocalVariableDescriptor]

'get' @ [59:32] ==> @CanIgnoreReturnValue public final fun get(): (Pair<Int, Boolean>..Pair<Int, Boolean>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'isEqualTo' @ [59:39] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'to' @ [59:49] ==> public infix fun <A, B> Int.to(that: Boolean): Pair<Int, Boolean> defined in kotlin[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> Int
    <B> -> Boolean

'Test' @ [62:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'createDatabase' @ [64:24] ==> public final fun createDatabase(): CordaPersistence defined in net.corda.node.utilities.ObservablesTests[SimpleFunctionDescriptorImpl]

'create' @ [66:37] ==> public open fun <T : (Any..Any?)> create(): (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in rx.subjects.PublishSubject[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Int

'source' @ [67:43] ==> val source: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`[LocalVariableDescriptor]

'create' @ [69:41] ==> public open fun <V : (Any..Any?)> create(): (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]
Inferred types:
    <V : (Any..Any?)> -> Pair<Int, Boolean>

'create' @ [70:42] ==> public open fun <V : (Any..Any?)> create(): (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]
Inferred types:
    <V : (Any..Any?)> -> Pair<Int, Boolean>

'observable' @ [72:9] ==> val observable: Observable<Int> defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`[LocalVariableDescriptor]

'first' @ [72:20] ==> public final fun first(): (Observable<(Int..Int?)>..Observable<(Int..Int?)>?) defined in rx.Observable[JavaMethodDescriptor]

'subscribe' @ [72:28] ==> public final fun subscribe(p0: (((Int..Int?)) -> Unit..(((Int..Int?)) -> Unit)?)): (Subscription..Subscription?) defined in rx.Observable[MyFunctionDescriptor]

'firstEvent' @ [72:40] ==> val firstEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`[LocalVariableDescriptor]

'set' @ [72:51] ==> @CanIgnoreReturnValue public open fun set(@Nullable p0: Pair<Int, Boolean>?): Boolean defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'it' @ [72:55] ==> value-parameter it: (Int..Int?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`.<anonymous>[ValueParameterDescriptorImpl]

'isInDatabaseTransaction' @ [72:61] ==> private final fun isInDatabaseTransaction(): Boolean defined in net.corda.node.utilities.ObservablesTests[SimpleFunctionDescriptorImpl]

'observable' @ [73:9] ==> val observable: Observable<Int> defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`[LocalVariableDescriptor]

'skip' @ [73:20] ==> public final fun skip(p0: Int): (Observable<(Int..Int?)>..Observable<(Int..Int?)>?) defined in rx.Observable[JavaMethodDescriptor]

'first' @ [73:28] ==> public final fun first(): (Observable<(Int..Int?)>..Observable<(Int..Int?)>?) defined in rx.Observable[JavaMethodDescriptor]

'subscribe' @ [73:36] ==> public final fun subscribe(p0: (((Int..Int?)) -> Unit..(((Int..Int?)) -> Unit)?)): (Subscription..Subscription?) defined in rx.Observable[MyFunctionDescriptor]

'secondEvent' @ [73:48] ==> val secondEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`[LocalVariableDescriptor]

'set' @ [73:60] ==> @CanIgnoreReturnValue public open fun set(@Nullable p0: Pair<Int, Boolean>?): Boolean defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'it' @ [73:64] ==> value-parameter it: (Int..Int?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`.<anonymous>[ValueParameterDescriptorImpl]

'isInDatabaseTransaction' @ [73:70] ==> private final fun isInDatabaseTransaction(): Boolean defined in net.corda.node.utilities.ObservablesTests[SimpleFunctionDescriptorImpl]

'database' @ [75:9] ==> val database: CordaPersistence defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`[LocalVariableDescriptor]

'transaction' @ [75:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?)>): AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>?)>?)>?)>

'source' @ [76:34] ==> val source: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`[LocalVariableDescriptor]

'bufferUntilDatabaseCommit' @ [76:41] ==> public fun <T : Any> Observer<(Int..Int?)>.bufferUntilDatabaseCommit(): Observer<(Int..Int?)> defined in net.corda.node.utilities[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T : Any> -> (kotlin.Int..kotlin.Int?)

'assertThat' @ [77:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)): (AbstractObjectAssert<*, (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<*, (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> PublishSubject<(kotlin.Int..kotlin.Int?)>

'source' @ [77:24] ==> val source: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`[LocalVariableDescriptor]

'isNotEqualTo' @ [77:32] ==> public open fun isNotEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'delayedSubject' @ [77:45] ==> val delayedSubject: Observer<(Int..Int?)> defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`.<anonymous>[LocalVariableDescriptor]

'delayedSubject' @ [78:13] ==> val delayedSubject: Observer<(Int..Int?)> defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`.<anonymous>[LocalVariableDescriptor]

'onNext' @ [78:28] ==> public abstract fun onNext(p0: (Int..Int?)): Unit defined in rx.Observer[JavaMethodDescriptor]

'assertThat' @ [79:13] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'firstEvent' @ [79:24] ==> val firstEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`[LocalVariableDescriptor]

'isDone' @ [79:35] ==> public final val <V : (Any..Any?)> SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>.isDone: Boolean[MyPropertyDescriptor]
Inferred types:
    <V : (Any..Any?)> -> (kotlin.Pair<kotlin.Int, kotlin.Boolean>..kotlin.Pair<kotlin.Int, kotlin.Boolean>?)

'isFalse' @ [79:43] ==> public open fun isFalse(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [80:13] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'secondEvent' @ [80:24] ==> val secondEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`[LocalVariableDescriptor]

'isDone' @ [80:36] ==> public final val <V : (Any..Any?)> SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>.isDone: Boolean[MyPropertyDescriptor]
Inferred types:
    <V : (Any..Any?)> -> (kotlin.Pair<kotlin.Int, kotlin.Boolean>..kotlin.Pair<kotlin.Int, kotlin.Boolean>?)

'isFalse' @ [80:44] ==> public open fun isFalse(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [82:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'firstEvent' @ [82:20] ==> val firstEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`[LocalVariableDescriptor]

'isDone' @ [82:31] ==> public final val <V : (Any..Any?)> SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>.isDone: Boolean[MyPropertyDescriptor]
Inferred types:
    <V : (Any..Any?)> -> (kotlin.Pair<kotlin.Int, kotlin.Boolean>..kotlin.Pair<kotlin.Int, kotlin.Boolean>?)

'isTrue' @ [82:39] ==> public open fun isTrue(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [83:9] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Pair<Int, Boolean>..Pair<Int, Boolean>?)): (AbstractObjectAssert<*, (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<*, (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Pair<Int, Boolean>

'firstEvent' @ [83:20] ==> val firstEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`[LocalVariableDescriptor]

'get' @ [83:31] ==> @CanIgnoreReturnValue public final fun get(): (Pair<Int, Boolean>..Pair<Int, Boolean>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'isEqualTo' @ [83:38] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'to' @ [83:48] ==> public infix fun <A, B> Int.to(that: Boolean): Pair<Int, Boolean> defined in kotlin[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> Int
    <B> -> Boolean

'assertThat' @ [84:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'secondEvent' @ [84:20] ==> val secondEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`[LocalVariableDescriptor]

'isDone' @ [84:32] ==> public final val <V : (Any..Any?)> SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>.isDone: Boolean[MyPropertyDescriptor]
Inferred types:
    <V : (Any..Any?)> -> (kotlin.Pair<kotlin.Int, kotlin.Boolean>..kotlin.Pair<kotlin.Int, kotlin.Boolean>?)

'isFalse' @ [84:40] ==> public open fun isFalse(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'database' @ [86:9] ==> val database: CordaPersistence defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`[LocalVariableDescriptor]

'transaction' @ [86:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?)>): AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>?)>?)>?)>

'source' @ [87:34] ==> val source: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`[LocalVariableDescriptor]

'bufferUntilDatabaseCommit' @ [87:41] ==> public fun <T : Any> Observer<(Int..Int?)>.bufferUntilDatabaseCommit(): Observer<(Int..Int?)> defined in net.corda.node.utilities[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T : Any> -> (kotlin.Int..kotlin.Int?)

'assertThat' @ [88:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)): (AbstractObjectAssert<*, (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<*, (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> PublishSubject<(kotlin.Int..kotlin.Int?)>

'source' @ [88:24] ==> val source: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`[LocalVariableDescriptor]

'isNotEqualTo' @ [88:32] ==> public open fun isNotEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'delayedSubject' @ [88:45] ==> val delayedSubject: Observer<(Int..Int?)> defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`.<anonymous>[LocalVariableDescriptor]

'delayedSubject' @ [89:13] ==> val delayedSubject: Observer<(Int..Int?)> defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`.<anonymous>[LocalVariableDescriptor]

'onNext' @ [89:28] ==> public abstract fun onNext(p0: (Int..Int?)): Unit defined in rx.Observer[JavaMethodDescriptor]

'assertThat' @ [90:13] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'secondEvent' @ [90:24] ==> val secondEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`[LocalVariableDescriptor]

'isDone' @ [90:36] ==> public final val <V : (Any..Any?)> SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>.isDone: Boolean[MyPropertyDescriptor]
Inferred types:
    <V : (Any..Any?)> -> (kotlin.Pair<kotlin.Int, kotlin.Boolean>..kotlin.Pair<kotlin.Int, kotlin.Boolean>?)

'isFalse' @ [90:44] ==> public open fun isFalse(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [92:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'secondEvent' @ [92:20] ==> val secondEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`[LocalVariableDescriptor]

'isDone' @ [92:32] ==> public final val <V : (Any..Any?)> SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>.isDone: Boolean[MyPropertyDescriptor]
Inferred types:
    <V : (Any..Any?)> -> (kotlin.Pair<kotlin.Int, kotlin.Boolean>..kotlin.Pair<kotlin.Int, kotlin.Boolean>?)

'isTrue' @ [92:40] ==> public open fun isTrue(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [93:9] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Pair<Int, Boolean>..Pair<Int, Boolean>?)): (AbstractObjectAssert<*, (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<*, (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Pair<Int, Boolean>

'secondEvent' @ [93:20] ==> val secondEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`bufferUntilDatabaseCommit delays until transaction closed repeatable`[LocalVariableDescriptor]

'get' @ [93:32] ==> @CanIgnoreReturnValue public final fun get(): (Pair<Int, Boolean>..Pair<Int, Boolean>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'isEqualTo' @ [93:39] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'to' @ [93:49] ==> public infix fun <A, B> Int.to(that: Boolean): Pair<Int, Boolean> defined in kotlin[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> Int
    <B> -> Boolean

'Test' @ [96:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'create' @ [99:38] ==> public open fun <T : (Any..Any?)> create(): (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in rx.subjects.PublishSubject[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Int

'create' @ [100:38] ==> public open fun <T : (Any..Any?)> create(): (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in rx.subjects.PublishSubject[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Int

'create' @ [101:38] ==> public open fun <T : (Any..Any?)> create(): (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in rx.subjects.PublishSubject[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Int

'create' @ [103:37] ==> public open fun <V : (Any..Any?)> create(): (SettableFuture<(Int..Int?)>..SettableFuture<(Int..Int?)>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]
Inferred types:
    <V : (Any..Any?)> -> Int

'create' @ [104:37] ==> public open fun <V : (Any..Any?)> create(): (SettableFuture<(Int..Int?)>..SettableFuture<(Int..Int?)>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]
Inferred types:
    <V : (Any..Any?)> -> Int

'create' @ [105:37] ==> public open fun <V : (Any..Any?)> create(): (SettableFuture<(Int..Int?)>..SettableFuture<(Int..Int?)>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]
Inferred types:
    <V : (Any..Any?)> -> Int

'source1' @ [107:9] ==> val source1: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`tee correctly copies observations to multiple observers`[LocalVariableDescriptor]

'subscribe' @ [107:17] ==> public final fun subscribe(p0: (((Int..Int?)) -> Unit..(((Int..Int?)) -> Unit)?)): (Subscription..Subscription?) defined in rx.subjects.PublishSubject[MyFunctionDescriptor]

'event1' @ [107:29] ==> val event1: (SettableFuture<(Int..Int?)>..SettableFuture<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`tee correctly copies observations to multiple observers`[LocalVariableDescriptor]

'set' @ [107:36] ==> @CanIgnoreReturnValue public open fun set(@Nullable p0: Int?): Boolean defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'it' @ [107:40] ==> value-parameter it: (Int..Int?) defined in net.corda.node.utilities.ObservablesTests.`tee correctly copies observations to multiple observers`.<anonymous>[ValueParameterDescriptorImpl]

'source2' @ [108:9] ==> val source2: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`tee correctly copies observations to multiple observers`[LocalVariableDescriptor]

'subscribe' @ [108:17] ==> public final fun subscribe(p0: (((Int..Int?)) -> Unit..(((Int..Int?)) -> Unit)?)): (Subscription..Subscription?) defined in rx.subjects.PublishSubject[MyFunctionDescriptor]

'event2' @ [108:29] ==> val event2: (SettableFuture<(Int..Int?)>..SettableFuture<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`tee correctly copies observations to multiple observers`[LocalVariableDescriptor]

'set' @ [108:36] ==> @CanIgnoreReturnValue public open fun set(@Nullable p0: Int?): Boolean defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'it' @ [108:40] ==> value-parameter it: (Int..Int?) defined in net.corda.node.utilities.ObservablesTests.`tee correctly copies observations to multiple observers`.<anonymous>[ValueParameterDescriptorImpl]

'source3' @ [109:9] ==> val source3: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`tee correctly copies observations to multiple observers`[LocalVariableDescriptor]

'subscribe' @ [109:17] ==> public final fun subscribe(p0: (((Int..Int?)) -> Unit..(((Int..Int?)) -> Unit)?)): (Subscription..Subscription?) defined in rx.subjects.PublishSubject[MyFunctionDescriptor]

'event3' @ [109:29] ==> val event3: (SettableFuture<(Int..Int?)>..SettableFuture<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`tee correctly copies observations to multiple observers`[LocalVariableDescriptor]

'set' @ [109:36] ==> @CanIgnoreReturnValue public open fun set(@Nullable p0: Int?): Boolean defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'it' @ [109:40] ==> value-parameter it: (Int..Int?) defined in net.corda.node.utilities.ObservablesTests.`tee correctly copies observations to multiple observers`.<anonymous>[ValueParameterDescriptorImpl]

'source1' @ [111:19] ==> val source1: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`tee correctly copies observations to multiple observers`[LocalVariableDescriptor]

'tee' @ [111:27] ==> public fun <T> Observer<(Int..Int?)>.tee(vararg teeTo: Observer<(Int..Int?)>): Observer<(Int..Int?)> defined in net.corda.core.internal[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (kotlin.Int..kotlin.Int?)

'source2' @ [111:31] ==> val source2: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`tee correctly copies observations to multiple observers`[LocalVariableDescriptor]

'source3' @ [111:40] ==> val source3: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`tee correctly copies observations to multiple observers`[LocalVariableDescriptor]

'tee' @ [112:9] ==> val tee: Observer<(Int..Int?)> defined in net.corda.node.utilities.ObservablesTests.`tee correctly copies observations to multiple observers`[LocalVariableDescriptor]

'onNext' @ [112:13] ==> public abstract fun onNext(p0: (Int..Int?)): Unit defined in rx.Observer[JavaMethodDescriptor]

'assertThat' @ [114:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'event1' @ [114:20] ==> val event1: (SettableFuture<(Int..Int?)>..SettableFuture<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`tee correctly copies observations to multiple observers`[LocalVariableDescriptor]

'isDone' @ [114:27] ==> public final val <V : (Any..Any?)> SettableFuture<(Int..Int?)>.isDone: Boolean[MyPropertyDescriptor]
Inferred types:
    <V : (Any..Any?)> -> (kotlin.Int..kotlin.Int?)

'isTrue' @ [114:35] ==> public open fun isTrue(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [115:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'event2' @ [115:20] ==> val event2: (SettableFuture<(Int..Int?)>..SettableFuture<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`tee correctly copies observations to multiple observers`[LocalVariableDescriptor]

'isDone' @ [115:27] ==> public final val <V : (Any..Any?)> SettableFuture<(Int..Int?)>.isDone: Boolean[MyPropertyDescriptor]
Inferred types:
    <V : (Any..Any?)> -> (kotlin.Int..kotlin.Int?)

'isTrue' @ [115:35] ==> public open fun isTrue(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [116:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'event3' @ [116:20] ==> val event3: (SettableFuture<(Int..Int?)>..SettableFuture<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`tee correctly copies observations to multiple observers`[LocalVariableDescriptor]

'isDone' @ [116:27] ==> public final val <V : (Any..Any?)> SettableFuture<(Int..Int?)>.isDone: Boolean[MyPropertyDescriptor]
Inferred types:
    <V : (Any..Any?)> -> (kotlin.Int..kotlin.Int?)

'isTrue' @ [116:35] ==> public open fun isTrue(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [117:9] ==> @CheckReturnValue public open fun assertThat(p0: Int): (AbstractIntegerAssert<*>..AbstractIntegerAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'event1' @ [117:20] ==> val event1: (SettableFuture<(Int..Int?)>..SettableFuture<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`tee correctly copies observations to multiple observers`[LocalVariableDescriptor]

'get' @ [117:27] ==> @CanIgnoreReturnValue public final fun get(): (Int..Int?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'isEqualTo' @ [117:34] ==> public open fun isEqualTo(p0: Int): (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractIntegerAssert[JavaMethodDescriptor]

'assertThat' @ [118:9] ==> @CheckReturnValue public open fun assertThat(p0: Int): (AbstractIntegerAssert<*>..AbstractIntegerAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'event2' @ [118:20] ==> val event2: (SettableFuture<(Int..Int?)>..SettableFuture<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`tee correctly copies observations to multiple observers`[LocalVariableDescriptor]

'get' @ [118:27] ==> @CanIgnoreReturnValue public final fun get(): (Int..Int?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'isEqualTo' @ [118:34] ==> public open fun isEqualTo(p0: Int): (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractIntegerAssert[JavaMethodDescriptor]

'assertThat' @ [119:9] ==> @CheckReturnValue public open fun assertThat(p0: Int): (AbstractIntegerAssert<*>..AbstractIntegerAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'event3' @ [119:20] ==> val event3: (SettableFuture<(Int..Int?)>..SettableFuture<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`tee correctly copies observations to multiple observers`[LocalVariableDescriptor]

'get' @ [119:27] ==> @CanIgnoreReturnValue public final fun get(): (Int..Int?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'isEqualTo' @ [119:34] ==> public open fun isEqualTo(p0: Int): (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractIntegerAssert[JavaMethodDescriptor]

'tee' @ [121:9] ==> val tee: Observer<(Int..Int?)> defined in net.corda.node.utilities.ObservablesTests.`tee correctly copies observations to multiple observers`[LocalVariableDescriptor]

'onCompleted' @ [121:13] ==> public abstract fun onCompleted(): Unit defined in rx.Observer[JavaMethodDescriptor]

'assertThat' @ [122:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'source1' @ [122:20] ==> val source1: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`tee correctly copies observations to multiple observers`[LocalVariableDescriptor]

'hasCompleted' @ [122:28] ==> public open fun hasCompleted(): Boolean defined in rx.subjects.PublishSubject[JavaMethodDescriptor]

'isTrue' @ [122:44] ==> public open fun isTrue(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [123:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'source2' @ [123:20] ==> val source2: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`tee correctly copies observations to multiple observers`[LocalVariableDescriptor]

'hasCompleted' @ [123:28] ==> public open fun hasCompleted(): Boolean defined in rx.subjects.PublishSubject[JavaMethodDescriptor]

'isTrue' @ [123:44] ==> public open fun isTrue(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [124:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'source3' @ [124:20] ==> val source3: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`tee correctly copies observations to multiple observers`[LocalVariableDescriptor]

'hasCompleted' @ [124:28] ==> public open fun hasCompleted(): Boolean defined in rx.subjects.PublishSubject[JavaMethodDescriptor]

'isTrue' @ [124:44] ==> public open fun isTrue(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'Test' @ [127:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'createDatabase' @ [129:24] ==> public final fun createDatabase(): CordaPersistence defined in net.corda.node.utilities.ObservablesTests[SimpleFunctionDescriptorImpl]

'create' @ [131:37] ==> public open fun <T : (Any..Any?)> create(): (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in rx.subjects.PublishSubject[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Int

'create' @ [132:35] ==> public open fun <T : (Any..Any?)> create(): (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in rx.subjects.PublishSubject[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Int

'source' @ [134:43] ==> val source: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`combine tee and bufferUntilDatabaseCommit`[LocalVariableDescriptor]

'create' @ [136:41] ==> public open fun <V : (Any..Any?)> create(): (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]
Inferred types:
    <V : (Any..Any?)> -> Pair<Int, Boolean>

'create' @ [137:40] ==> public open fun <V : (Any..Any?)> create(): (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]
Inferred types:
    <V : (Any..Any?)> -> Pair<Int, Boolean>

'observable' @ [139:9] ==> val observable: Observable<Int> defined in net.corda.node.utilities.ObservablesTests.`combine tee and bufferUntilDatabaseCommit`[LocalVariableDescriptor]

'first' @ [139:20] ==> public final fun first(): (Observable<(Int..Int?)>..Observable<(Int..Int?)>?) defined in rx.Observable[JavaMethodDescriptor]

'subscribe' @ [139:28] ==> public final fun subscribe(p0: (((Int..Int?)) -> Unit..(((Int..Int?)) -> Unit)?)): (Subscription..Subscription?) defined in rx.Observable[MyFunctionDescriptor]

'firstEvent' @ [139:40] ==> val firstEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`combine tee and bufferUntilDatabaseCommit`[LocalVariableDescriptor]

'set' @ [139:51] ==> @CanIgnoreReturnValue public open fun set(@Nullable p0: Pair<Int, Boolean>?): Boolean defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'it' @ [139:55] ==> value-parameter it: (Int..Int?) defined in net.corda.node.utilities.ObservablesTests.`combine tee and bufferUntilDatabaseCommit`.<anonymous>[ValueParameterDescriptorImpl]

'isInDatabaseTransaction' @ [139:61] ==> private final fun isInDatabaseTransaction(): Boolean defined in net.corda.node.utilities.ObservablesTests[SimpleFunctionDescriptorImpl]

'teed' @ [141:9] ==> val teed: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`combine tee and bufferUntilDatabaseCommit`[LocalVariableDescriptor]

'first' @ [141:14] ==> public final fun first(): (Observable<(Int..Int?)>..Observable<(Int..Int?)>?) defined in rx.subjects.PublishSubject[JavaMethodDescriptor]

'subscribe' @ [141:22] ==> public final fun subscribe(p0: (((Int..Int?)) -> Unit..(((Int..Int?)) -> Unit)?)): (Subscription..Subscription?) defined in rx.Observable[MyFunctionDescriptor]

'teedEvent' @ [141:34] ==> val teedEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`combine tee and bufferUntilDatabaseCommit`[LocalVariableDescriptor]

'set' @ [141:44] ==> @CanIgnoreReturnValue public open fun set(@Nullable p0: Pair<Int, Boolean>?): Boolean defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'it' @ [141:48] ==> value-parameter it: (Int..Int?) defined in net.corda.node.utilities.ObservablesTests.`combine tee and bufferUntilDatabaseCommit`.<anonymous>[ValueParameterDescriptorImpl]

'isInDatabaseTransaction' @ [141:54] ==> private final fun isInDatabaseTransaction(): Boolean defined in net.corda.node.utilities.ObservablesTests[SimpleFunctionDescriptorImpl]

'database' @ [143:9] ==> val database: CordaPersistence defined in net.corda.node.utilities.ObservablesTests.`combine tee and bufferUntilDatabaseCommit`[LocalVariableDescriptor]

'transaction' @ [143:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?)>): AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>?)>?)>?)>

'source' @ [144:34] ==> val source: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`combine tee and bufferUntilDatabaseCommit`[LocalVariableDescriptor]

'bufferUntilDatabaseCommit' @ [144:41] ==> public fun <T : Any> Observer<(Int..Int?)>.bufferUntilDatabaseCommit(): Observer<(Int..Int?)> defined in net.corda.node.utilities[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T : Any> -> (kotlin.Int..kotlin.Int?)

'tee' @ [144:69] ==> public fun <T> Observer<(Int..Int?)>.tee(vararg teeTo: Observer<(Int..Int?)>): Observer<(Int..Int?)> defined in net.corda.core.internal[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (kotlin.Int..kotlin.Int?)

'teed' @ [144:73] ==> val teed: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`combine tee and bufferUntilDatabaseCommit`[LocalVariableDescriptor]

'assertThat' @ [145:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)): (AbstractObjectAssert<*, (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<*, (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> PublishSubject<(kotlin.Int..kotlin.Int?)>

'source' @ [145:24] ==> val source: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`combine tee and bufferUntilDatabaseCommit`[LocalVariableDescriptor]

'isNotEqualTo' @ [145:32] ==> public open fun isNotEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'delayedSubject' @ [145:45] ==> val delayedSubject: Observer<(Int..Int?)> defined in net.corda.node.utilities.ObservablesTests.`combine tee and bufferUntilDatabaseCommit`.<anonymous>[LocalVariableDescriptor]

'delayedSubject' @ [146:13] ==> val delayedSubject: Observer<(Int..Int?)> defined in net.corda.node.utilities.ObservablesTests.`combine tee and bufferUntilDatabaseCommit`.<anonymous>[LocalVariableDescriptor]

'onNext' @ [146:28] ==> public abstract fun onNext(p0: (Int..Int?)): Unit defined in rx.Observer[JavaMethodDescriptor]

'assertThat' @ [147:13] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'firstEvent' @ [147:24] ==> val firstEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`combine tee and bufferUntilDatabaseCommit`[LocalVariableDescriptor]

'isDone' @ [147:35] ==> public final val <V : (Any..Any?)> SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>.isDone: Boolean[MyPropertyDescriptor]
Inferred types:
    <V : (Any..Any?)> -> (kotlin.Pair<kotlin.Int, kotlin.Boolean>..kotlin.Pair<kotlin.Int, kotlin.Boolean>?)

'isFalse' @ [147:43] ==> public open fun isFalse(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [148:13] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'teedEvent' @ [148:24] ==> val teedEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`combine tee and bufferUntilDatabaseCommit`[LocalVariableDescriptor]

'isDone' @ [148:34] ==> public final val <V : (Any..Any?)> SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>.isDone: Boolean[MyPropertyDescriptor]
Inferred types:
    <V : (Any..Any?)> -> (kotlin.Pair<kotlin.Int, kotlin.Boolean>..kotlin.Pair<kotlin.Int, kotlin.Boolean>?)

'isTrue' @ [148:42] ==> public open fun isTrue(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [150:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'firstEvent' @ [150:20] ==> val firstEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`combine tee and bufferUntilDatabaseCommit`[LocalVariableDescriptor]

'isDone' @ [150:31] ==> public final val <V : (Any..Any?)> SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>.isDone: Boolean[MyPropertyDescriptor]
Inferred types:
    <V : (Any..Any?)> -> (kotlin.Pair<kotlin.Int, kotlin.Boolean>..kotlin.Pair<kotlin.Int, kotlin.Boolean>?)

'isTrue' @ [150:39] ==> public open fun isTrue(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [152:9] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Pair<Int, Boolean>..Pair<Int, Boolean>?)): (AbstractObjectAssert<*, (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<*, (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Pair<Int, Boolean>

'firstEvent' @ [152:20] ==> val firstEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`combine tee and bufferUntilDatabaseCommit`[LocalVariableDescriptor]

'get' @ [152:31] ==> @CanIgnoreReturnValue public final fun get(): (Pair<Int, Boolean>..Pair<Int, Boolean>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'isEqualTo' @ [152:38] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'to' @ [152:48] ==> public infix fun <A, B> Int.to(that: Boolean): Pair<Int, Boolean> defined in kotlin[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> Int
    <B> -> Boolean

'assertThat' @ [153:9] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Pair<Int, Boolean>..Pair<Int, Boolean>?)): (AbstractObjectAssert<*, (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<*, (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Pair<Int, Boolean>

'teedEvent' @ [153:20] ==> val teedEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`combine tee and bufferUntilDatabaseCommit`[LocalVariableDescriptor]

'get' @ [153:30] ==> @CanIgnoreReturnValue public final fun get(): (Pair<Int, Boolean>..Pair<Int, Boolean>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'isEqualTo' @ [153:37] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'to' @ [153:47] ==> public infix fun <A, B> Int.to(that: Boolean): Pair<Int, Boolean> defined in kotlin[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> Int
    <B> -> Boolean

'Test' @ [156:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'createDatabase' @ [158:24] ==> public final fun createDatabase(): CordaPersistence defined in net.corda.node.utilities.ObservablesTests[SimpleFunctionDescriptorImpl]

'create' @ [160:37] ==> public open fun <T : (Any..Any?)> create(): (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in rx.subjects.PublishSubject[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Int

'source' @ [161:51] ==> val source: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`[LocalVariableDescriptor]

'wrapWithDatabaseTransaction' @ [161:58] ==> public fun <T : Any> Observable<(Int..Int?)>.wrapWithDatabaseTransaction(db: CordaPersistence? = ...): Observable<(Int..Int?)> defined in net.corda.node.utilities[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T : Any> -> (kotlin.Int..kotlin.Int?)

'create' @ [163:45] ==> public open fun <V : (Any..Any?)> create(): (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]
Inferred types:
    <V : (Any..Any?)> -> Pair<Int, Boolean>

'create' @ [164:61] ==> public open fun <V : (Any..Any?)> create(): (SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>..SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]
Inferred types:
    <V : (Any..Any?)> -> Pair<Int, UUID?>

'create' @ [165:60] ==> public open fun <V : (Any..Any?)> create(): (SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>..SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]
Inferred types:
    <V : (Any..Any?)> -> Pair<Int, UUID?>

'observableWithDbTx' @ [167:9] ==> val observableWithDbTx: Observable<Int> defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`[LocalVariableDescriptor]

'first' @ [167:28] ==> public final fun first(): (Observable<(Int..Int?)>..Observable<(Int..Int?)>?) defined in rx.Observable[JavaMethodDescriptor]

'subscribe' @ [167:36] ==> public final fun subscribe(p0: (((Int..Int?)) -> Unit..(((Int..Int?)) -> Unit)?)): (Subscription..Subscription?) defined in rx.Observable[MyFunctionDescriptor]

'undelayedEvent' @ [167:48] ==> val undelayedEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`[LocalVariableDescriptor]

'set' @ [167:63] ==> @CanIgnoreReturnValue public open fun set(@Nullable p0: Pair<Int, Boolean>?): Boolean defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'it' @ [167:67] ==> value-parameter it: (Int..Int?) defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`.<anonymous>[ValueParameterDescriptorImpl]

'isInDatabaseTransaction' @ [167:73] ==> private final fun isInDatabaseTransaction(): Boolean defined in net.corda.node.utilities.ObservablesTests[SimpleFunctionDescriptorImpl]

'future' @ [170:13] ==> value-parameter future: SettableFuture<Pair<Int, UUID?>> defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`.observeSecondEvent[ValueParameterDescriptorImpl]

'set' @ [170:20] ==> @CanIgnoreReturnValue public open fun set(@Nullable p0: Pair<Int, UUID?>?): Boolean defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'event' @ [170:24] ==> value-parameter event: Int defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`.observeSecondEvent[ValueParameterDescriptorImpl]

'if (isInDatabaseTransaction()) DatabaseTransactionManager.transactionId else null' @ [170:33] ==> public final fun <`<TYPE-PARAMETER-FOR-IF-RESOLVE>`> `<SPECIAL-FUNCTION-FOR-IF-RESOLVE>`(thenBranch: UUID?, elseBranch: UUID?): UUID?[SimpleFunctionDescriptorImpl]
Inferred types:
    <`<TYPE-PARAMETER-FOR-IF-RESOLVE>`> -> UUID?

'isInDatabaseTransaction' @ [170:37] ==> private final fun isInDatabaseTransaction(): Boolean defined in net.corda.node.utilities.ObservablesTests[SimpleFunctionDescriptorImpl]

'DatabaseTransactionManager' @ [170:64] ==> public companion object defined in net.corda.node.utilities.DatabaseTransactionManager[FakeCallableDescriptorForObject]

'transactionId' @ [170:91] ==> public final val transactionId: UUID defined in net.corda.node.utilities.DatabaseTransactionManager.Companion[DeserializedPropertyDescriptor]

'observableWithDbTx' @ [173:9] ==> val observableWithDbTx: Observable<Int> defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`[LocalVariableDescriptor]

'skip' @ [173:28] ==> public final fun skip(p0: Int): (Observable<(Int..Int?)>..Observable<(Int..Int?)>?) defined in rx.Observable[JavaMethodDescriptor]

'first' @ [173:36] ==> public final fun first(): (Observable<(Int..Int?)>..Observable<(Int..Int?)>?) defined in rx.Observable[JavaMethodDescriptor]

'subscribe' @ [173:44] ==> public final fun subscribe(p0: (((Int..Int?)) -> Unit..(((Int..Int?)) -> Unit)?)): (Subscription..Subscription?) defined in rx.Observable[MyFunctionDescriptor]

'observeSecondEvent' @ [173:56] ==> local final fun observeSecondEvent(event: Int, future: SettableFuture<Pair<Int, UUID?>>): Unit defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`[SimpleFunctionDescriptorImpl]

'it' @ [173:75] ==> value-parameter it: (Int..Int?) defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`.<anonymous>[ValueParameterDescriptorImpl]

'delayedEventFromSecondObserver' @ [173:79] ==> val delayedEventFromSecondObserver: (SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>..SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>?) defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`[LocalVariableDescriptor]

'observableWithDbTx' @ [174:9] ==> val observableWithDbTx: Observable<Int> defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`[LocalVariableDescriptor]

'skip' @ [174:28] ==> public final fun skip(p0: Int): (Observable<(Int..Int?)>..Observable<(Int..Int?)>?) defined in rx.Observable[JavaMethodDescriptor]

'first' @ [174:36] ==> public final fun first(): (Observable<(Int..Int?)>..Observable<(Int..Int?)>?) defined in rx.Observable[JavaMethodDescriptor]

'subscribe' @ [174:44] ==> public final fun subscribe(p0: (((Int..Int?)) -> Unit..(((Int..Int?)) -> Unit)?)): (Subscription..Subscription?) defined in rx.Observable[MyFunctionDescriptor]

'observeSecondEvent' @ [174:56] ==> local final fun observeSecondEvent(event: Int, future: SettableFuture<Pair<Int, UUID?>>): Unit defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`[SimpleFunctionDescriptorImpl]

'it' @ [174:75] ==> value-parameter it: (Int..Int?) defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`.<anonymous>[ValueParameterDescriptorImpl]

'delayedEventFromThirdObserver' @ [174:79] ==> val delayedEventFromThirdObserver: (SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>..SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>?) defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`[LocalVariableDescriptor]

'database' @ [176:9] ==> val database: CordaPersistence defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`[LocalVariableDescriptor]

'transaction' @ [176:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?)>): AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractBooleanAssert<out (org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>..org.assertj.core.api.AbstractBooleanAssert<out kotlin.Any?>?)>?)>?)>?)>?)>

'source' @ [177:39] ==> val source: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`[LocalVariableDescriptor]

'bufferUntilDatabaseCommit' @ [177:46] ==> public fun <T : Any> Observer<(Int..Int?)>.bufferUntilDatabaseCommit(): Observer<(Int..Int?)> defined in net.corda.node.utilities[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T : Any> -> (kotlin.Int..kotlin.Int?)

'assertThat' @ [178:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)): (AbstractObjectAssert<*, (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<*, (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> PublishSubject<(kotlin.Int..kotlin.Int?)>

'source' @ [178:24] ==> val source: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`[LocalVariableDescriptor]

'isNotEqualTo' @ [178:32] ==> public open fun isNotEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (PublishSubject<out Any?>..PublishSubject<out Any?>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?), (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'commitDelayedSource' @ [178:45] ==> val commitDelayedSource: Observer<(Int..Int?)> defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`.<anonymous>[LocalVariableDescriptor]

'commitDelayedSource' @ [179:13] ==> val commitDelayedSource: Observer<(Int..Int?)> defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`.<anonymous>[LocalVariableDescriptor]

'onNext' @ [179:33] ==> public abstract fun onNext(p0: (Int..Int?)): Unit defined in rx.Observer[JavaMethodDescriptor]

'source' @ [180:13] ==> val source: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`[LocalVariableDescriptor]

'onNext' @ [180:20] ==> public open fun onNext(p0: (Int..Int?)): Unit defined in rx.subjects.PublishSubject[JavaMethodDescriptor]

'assertThat' @ [181:13] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'undelayedEvent' @ [181:24] ==> val undelayedEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`[LocalVariableDescriptor]

'isDone' @ [181:39] ==> public final val <V : (Any..Any?)> SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>.isDone: Boolean[MyPropertyDescriptor]
Inferred types:
    <V : (Any..Any?)> -> (kotlin.Pair<kotlin.Int, kotlin.Boolean>..kotlin.Pair<kotlin.Int, kotlin.Boolean>?)

'isTrue' @ [181:47] ==> public open fun isTrue(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [182:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Pair<Int, Boolean>..Pair<Int, Boolean>?)): (AbstractObjectAssert<*, (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<*, (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Pair<Int, Boolean>

'undelayedEvent' @ [182:24] ==> val undelayedEvent: (SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>..SettableFuture<(Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`[LocalVariableDescriptor]

'get' @ [182:39] ==> @CanIgnoreReturnValue public final fun get(): (Pair<Int, Boolean>..Pair<Int, Boolean>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'isEqualTo' @ [182:46] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), out (Pair<Any?, Any?>..Pair<Any?, Any?>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?), (Pair<Int, Boolean>..Pair<Int, Boolean>?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'to' @ [182:56] ==> public infix fun <A, B> Int.to(that: Boolean): Pair<Int, Boolean> defined in kotlin[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> Int
    <B> -> Boolean

'assertThat' @ [183:13] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'delayedEventFromSecondObserver' @ [183:24] ==> val delayedEventFromSecondObserver: (SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>..SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>?) defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`[LocalVariableDescriptor]

'isDone' @ [183:55] ==> public final val <V : (Any..Any?)> SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>.isDone: Boolean[MyPropertyDescriptor]
Inferred types:
    <V : (Any..Any?)> -> (kotlin.Pair<kotlin.Int, java.util.UUID?>..kotlin.Pair<kotlin.Int, java.util.UUID?>?)

'isFalse' @ [183:63] ==> public open fun isFalse(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [185:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'delayedEventFromSecondObserver' @ [185:20] ==> val delayedEventFromSecondObserver: (SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>..SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>?) defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`[LocalVariableDescriptor]

'isDone' @ [185:51] ==> public final val <V : (Any..Any?)> SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>.isDone: Boolean[MyPropertyDescriptor]
Inferred types:
    <V : (Any..Any?)> -> (kotlin.Pair<kotlin.Int, java.util.UUID?>..kotlin.Pair<kotlin.Int, java.util.UUID?>?)

'isTrue' @ [185:59] ==> public open fun isTrue(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [187:9] ==> @CheckReturnValue public open fun assertThat(p0: Int): (AbstractIntegerAssert<*>..AbstractIntegerAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'delayedEventFromSecondObserver' @ [187:20] ==> val delayedEventFromSecondObserver: (SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>..SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>?) defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`[LocalVariableDescriptor]

'get' @ [187:51] ==> @CanIgnoreReturnValue public final fun get(): (Pair<Int, UUID?>..Pair<Int, UUID?>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'first' @ [187:57] ==> public final val first: Int defined in kotlin.Pair[DeserializedPropertyDescriptor]

'isEqualTo' @ [187:64] ==> public open fun isEqualTo(p0: Int): (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractIntegerAssert[JavaMethodDescriptor]

'assertThat' @ [188:9] ==> @CheckReturnValue public open fun <T : (Comparable<(UUID..UUID?)>..Comparable<(UUID..UUID?)>?)> assertThat(p0: (UUID..UUID?)): (AbstractComparableAssert<*, (UUID..UUID?)>..AbstractComparableAssert<*, (UUID..UUID?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Comparable<(T..T?)>..Comparable<(T..T?)>?)> -> UUID

'delayedEventFromSecondObserver' @ [188:20] ==> val delayedEventFromSecondObserver: (SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>..SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>?) defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`[LocalVariableDescriptor]

'get' @ [188:51] ==> @CanIgnoreReturnValue public final fun get(): (Pair<Int, UUID?>..Pair<Int, UUID?>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'second' @ [188:57] ==> public final val second: UUID? defined in kotlin.Pair[DeserializedPropertyDescriptor]

'isNotNull' @ [188:65] ==> public open fun isNotNull(): (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>?), (UUID..UUID?)>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>?), (UUID..UUID?)>?), (UUID..UUID?)>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>?), (UUID..UUID?)>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>?), (UUID..UUID?)>?), (UUID..UUID?)>?), (UUID..UUID?)>?) defined in org.assertj.core.api.AbstractComparableAssert[JavaMethodDescriptor]

'assertThat' @ [189:9] ==> @CheckReturnValue public open fun assertThat(p0: Int): (AbstractIntegerAssert<*>..AbstractIntegerAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'delayedEventFromThirdObserver' @ [189:20] ==> val delayedEventFromThirdObserver: (SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>..SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>?) defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`[LocalVariableDescriptor]

'get' @ [189:50] ==> @CanIgnoreReturnValue public final fun get(): (Pair<Int, UUID?>..Pair<Int, UUID?>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'first' @ [189:56] ==> public final val first: Int defined in kotlin.Pair[DeserializedPropertyDescriptor]

'isEqualTo' @ [189:63] ==> public open fun isEqualTo(p0: Int): (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractIntegerAssert[JavaMethodDescriptor]

'assertThat' @ [190:9] ==> @CheckReturnValue public open fun <T : (Comparable<(UUID..UUID?)>..Comparable<(UUID..UUID?)>?)> assertThat(p0: (UUID..UUID?)): (AbstractComparableAssert<*, (UUID..UUID?)>..AbstractComparableAssert<*, (UUID..UUID?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Comparable<(T..T?)>..Comparable<(T..T?)>?)> -> UUID

'delayedEventFromThirdObserver' @ [190:20] ==> val delayedEventFromThirdObserver: (SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>..SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>?) defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`[LocalVariableDescriptor]

'get' @ [190:50] ==> @CanIgnoreReturnValue public final fun get(): (Pair<Int, UUID?>..Pair<Int, UUID?>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'second' @ [190:56] ==> public final val second: UUID? defined in kotlin.Pair[DeserializedPropertyDescriptor]

'isNotNull' @ [190:64] ==> public open fun isNotNull(): (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>?), (UUID..UUID?)>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>?), (UUID..UUID?)>?), (UUID..UUID?)>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>?), (UUID..UUID?)>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>?), (UUID..UUID?)>?), (UUID..UUID?)>?), (UUID..UUID?)>?) defined in org.assertj.core.api.AbstractComparableAssert[JavaMethodDescriptor]

'assertThat' @ [193:9] ==> @CheckReturnValue public open fun <T : (Comparable<(UUID..UUID?)>..Comparable<(UUID..UUID?)>?)> assertThat(p0: (UUID..UUID?)): (AbstractComparableAssert<*, (UUID..UUID?)>..AbstractComparableAssert<*, (UUID..UUID?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Comparable<(T..T?)>..Comparable<(T..T?)>?)> -> UUID

'delayedEventFromSecondObserver' @ [193:20] ==> val delayedEventFromSecondObserver: (SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>..SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>?) defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`[LocalVariableDescriptor]

'get' @ [193:51] ==> @CanIgnoreReturnValue public final fun get(): (Pair<Int, UUID?>..Pair<Int, UUID?>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'second' @ [193:57] ==> public final val second: UUID? defined in kotlin.Pair[DeserializedPropertyDescriptor]

'isEqualTo' @ [193:65] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>?), (UUID..UUID?)>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>?), (UUID..UUID?)>?), (UUID..UUID?)>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>?), (UUID..UUID?)>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (UUID..UUID?)>?), (UUID..UUID?)>?), (UUID..UUID?)>?), (UUID..UUID?)>?) defined in org.assertj.core.api.AbstractComparableAssert[JavaMethodDescriptor]

'delayedEventFromThirdObserver' @ [193:75] ==> val delayedEventFromThirdObserver: (SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>..SettableFuture<(Pair<Int, UUID?>..Pair<Int, UUID?>?)>?) defined in net.corda.node.utilities.ObservablesTests.`new transaction open in observer when wrapped`[LocalVariableDescriptor]

'get' @ [193:105] ==> @CanIgnoreReturnValue public final fun get(): (Pair<Int, UUID?>..Pair<Int, UUID?>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'second' @ [193:111] ==> public final val second: UUID? defined in kotlin.Pair[DeserializedPropertyDescriptor]

'Test' @ [196:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'createDatabase' @ [198:24] ==> public final fun createDatabase(): CordaPersistence defined in net.corda.node.utilities.ObservablesTests[SimpleFunctionDescriptorImpl]

'create' @ [200:37] ==> public open fun <T : (Any..Any?)> create(): (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in rx.subjects.PublishSubject[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Int

'create' @ [202:36] ==> public open fun <V : (Any..Any?)> create(): (SettableFuture<(Int..Int?)>..SettableFuture<(Int..Int?)>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]
Inferred types:
    <V : (Any..Any?)> -> Int

'source' @ [204:51] ==> val source: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx doesn't eagerly subscribe`[LocalVariableDescriptor]

'bufferUntilSubscribed' @ [204:58] ==> public fun <T> Observable<(Int..Int?)>.bufferUntilSubscribed(): Observable<(Int..Int?)> defined in net.corda.core.internal[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (kotlin.Int..kotlin.Int?)

'doOnSubscribe' @ [204:82] ==> public final fun doOnSubscribe(p0: (() -> Unit..(() -> Unit)?)): (Observable<(Int..Int?)>..Observable<(Int..Int?)>?) defined in rx.Observable[MyFunctionDescriptor]

'subscribed' @ [204:98] ==> var subscribed: Boolean defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx doesn't eagerly subscribe`[LocalVariableDescriptor]

'bufferedObservable' @ [205:58] ==> val bufferedObservable: Observable<Int> defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx doesn't eagerly subscribe`[LocalVariableDescriptor]

'wrapWithDatabaseTransaction' @ [205:77] ==> public fun <T : Any> Observable<Int>.wrapWithDatabaseTransaction(db: CordaPersistence? = ...): Observable<Int> defined in net.corda.node.utilities[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T : Any> -> Int

'database' @ [205:105] ==> val database: CordaPersistence defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx doesn't eagerly subscribe`[LocalVariableDescriptor]

'source' @ [207:9] ==> val source: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx doesn't eagerly subscribe`[LocalVariableDescriptor]

'onNext' @ [207:16] ==> public open fun onNext(p0: (Int..Int?)): Unit defined in rx.subjects.PublishSubject[JavaMethodDescriptor]

'assertThat' @ [209:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'subscribed' @ [209:20] ==> var subscribed: Boolean defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx doesn't eagerly subscribe`[LocalVariableDescriptor]

'isFalse' @ [209:32] ==> public open fun isFalse(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [210:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'event' @ [210:20] ==> val event: (SettableFuture<(Int..Int?)>..SettableFuture<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx doesn't eagerly subscribe`[LocalVariableDescriptor]

'isDone' @ [210:26] ==> public final val <V : (Any..Any?)> SettableFuture<(Int..Int?)>.isDone: Boolean[MyPropertyDescriptor]
Inferred types:
    <V : (Any..Any?)> -> (kotlin.Int..kotlin.Int?)

'isFalse' @ [210:34] ==> public open fun isFalse(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'databaseWrappedObservable' @ [212:9] ==> val databaseWrappedObservable: Observable<Int> defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx doesn't eagerly subscribe`[LocalVariableDescriptor]

'first' @ [212:35] ==> public final fun first(): (Observable<(Int..Int?)>..Observable<(Int..Int?)>?) defined in rx.Observable[JavaMethodDescriptor]

'subscribe' @ [212:43] ==> public final fun subscribe(p0: (((Int..Int?)) -> Unit..(((Int..Int?)) -> Unit)?)): (Subscription..Subscription?) defined in rx.Observable[MyFunctionDescriptor]

'event' @ [212:55] ==> val event: (SettableFuture<(Int..Int?)>..SettableFuture<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx doesn't eagerly subscribe`[LocalVariableDescriptor]

'set' @ [212:61] ==> @CanIgnoreReturnValue public open fun set(@Nullable p0: Int?): Boolean defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'it' @ [212:65] ==> value-parameter it: (Int..Int?) defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx doesn't eagerly subscribe`.<anonymous>[ValueParameterDescriptorImpl]

'source' @ [213:9] ==> val source: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx doesn't eagerly subscribe`[LocalVariableDescriptor]

'onNext' @ [213:16] ==> public open fun onNext(p0: (Int..Int?)): Unit defined in rx.subjects.PublishSubject[JavaMethodDescriptor]

'assertThat' @ [215:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'event' @ [215:20] ==> val event: (SettableFuture<(Int..Int?)>..SettableFuture<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx doesn't eagerly subscribe`[LocalVariableDescriptor]

'isDone' @ [215:26] ==> public final val <V : (Any..Any?)> SettableFuture<(Int..Int?)>.isDone: Boolean[MyPropertyDescriptor]
Inferred types:
    <V : (Any..Any?)> -> (kotlin.Int..kotlin.Int?)

'isTrue' @ [215:34] ==> public open fun isTrue(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [216:9] ==> @CheckReturnValue public open fun assertThat(p0: Int): (AbstractIntegerAssert<*>..AbstractIntegerAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'event' @ [216:20] ==> val event: (SettableFuture<(Int..Int?)>..SettableFuture<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx doesn't eagerly subscribe`[LocalVariableDescriptor]

'get' @ [216:26] ==> @CanIgnoreReturnValue public final fun get(): (Int..Int?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'isEqualTo' @ [216:33] ==> public open fun isEqualTo(p0: Int): (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractIntegerAssert[JavaMethodDescriptor]

'Test' @ [219:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'createDatabase' @ [221:24] ==> public final fun createDatabase(): CordaPersistence defined in net.corda.node.utilities.ObservablesTests[SimpleFunctionDescriptorImpl]

'create' @ [223:37] ==> public open fun <T : (Any..Any?)> create(): (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in rx.subjects.PublishSubject[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Int

'source' @ [226:51] ==> val source: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx unsubscribes`[LocalVariableDescriptor]

'bufferUntilSubscribed' @ [226:58] ==> public fun <T> Observable<(Int..Int?)>.bufferUntilSubscribed(): Observable<(Int..Int?)> defined in net.corda.core.internal[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (kotlin.Int..kotlin.Int?)

'doOnUnsubscribe' @ [226:82] ==> public final fun doOnUnsubscribe(p0: (() -> Unit..(() -> Unit)?)): (Observable<(Int..Int?)>..Observable<(Int..Int?)>?) defined in rx.Observable[MyFunctionDescriptor]

'unsubscribed' @ [226:100] ==> var unsubscribed: Boolean defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx unsubscribes`[LocalVariableDescriptor]

'bufferedObservable' @ [227:58] ==> val bufferedObservable: Observable<Int> defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx unsubscribes`[LocalVariableDescriptor]

'wrapWithDatabaseTransaction' @ [227:77] ==> public fun <T : Any> Observable<Int>.wrapWithDatabaseTransaction(db: CordaPersistence? = ...): Observable<Int> defined in net.corda.node.utilities[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T : Any> -> Int

'database' @ [227:105] ==> val database: CordaPersistence defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx unsubscribes`[LocalVariableDescriptor]

'assertThat' @ [229:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'unsubscribed' @ [229:20] ==> var unsubscribed: Boolean defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx unsubscribes`[LocalVariableDescriptor]

'isFalse' @ [229:34] ==> public open fun isFalse(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'databaseWrappedObservable' @ [231:29] ==> val databaseWrappedObservable: Observable<Int> defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx unsubscribes`[LocalVariableDescriptor]

'subscribe' @ [231:55] ==> public final fun subscribe(p0: (((Int..Int?)) -> Unit..(((Int..Int?)) -> Unit)?)): (Subscription..Subscription?) defined in rx.Observable[MyFunctionDescriptor]

'databaseWrappedObservable' @ [232:29] ==> val databaseWrappedObservable: Observable<Int> defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx unsubscribes`[LocalVariableDescriptor]

'subscribe' @ [232:55] ==> public final fun subscribe(p0: (((Int..Int?)) -> Unit..(((Int..Int?)) -> Unit)?)): (Subscription..Subscription?) defined in rx.Observable[MyFunctionDescriptor]

'subscription1' @ [234:9] ==> val subscription1: (Subscription..Subscription?) defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx unsubscribes`[LocalVariableDescriptor]

'unsubscribe' @ [234:23] ==> public abstract fun unsubscribe(): Unit defined in rx.Subscription[JavaMethodDescriptor]

'assertThat' @ [235:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'unsubscribed' @ [235:20] ==> var unsubscribed: Boolean defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx unsubscribes`[LocalVariableDescriptor]

'isFalse' @ [235:34] ==> public open fun isFalse(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'subscription2' @ [237:9] ==> val subscription2: (Subscription..Subscription?) defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx unsubscribes`[LocalVariableDescriptor]

'unsubscribe' @ [237:23] ==> public abstract fun unsubscribe(): Unit defined in rx.Subscription[JavaMethodDescriptor]

'assertThat' @ [238:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'unsubscribed' @ [238:20] ==> var unsubscribed: Boolean defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx unsubscribes`[LocalVariableDescriptor]

'isTrue' @ [238:34] ==> public open fun isTrue(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'Test' @ [241:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'createDatabase' @ [243:24] ==> public final fun createDatabase(): CordaPersistence defined in net.corda.node.utilities.ObservablesTests[SimpleFunctionDescriptorImpl]

'create' @ [245:37] ==> public open fun <T : (Any..Any?)> create(): (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in rx.subjects.PublishSubject[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Int

'source' @ [248:51] ==> val source: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx restarts if we pass through zero subscribers`[LocalVariableDescriptor]

'doOnUnsubscribe' @ [248:58] ==> public final fun doOnUnsubscribe(p0: (() -> Unit..(() -> Unit)?)): (Observable<(Int..Int?)>..Observable<(Int..Int?)>?) defined in rx.subjects.PublishSubject[MyFunctionDescriptor]

'unsubscribed' @ [248:76] ==> var unsubscribed: Boolean defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx restarts if we pass through zero subscribers`[LocalVariableDescriptor]

'bufferedObservable' @ [249:58] ==> val bufferedObservable: Observable<Int> defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx restarts if we pass through zero subscribers`[LocalVariableDescriptor]

'wrapWithDatabaseTransaction' @ [249:77] ==> public fun <T : Any> Observable<Int>.wrapWithDatabaseTransaction(db: CordaPersistence? = ...): Observable<Int> defined in net.corda.node.utilities[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T : Any> -> Int

'database' @ [249:105] ==> val database: CordaPersistence defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx restarts if we pass through zero subscribers`[LocalVariableDescriptor]

'assertThat' @ [251:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'unsubscribed' @ [251:20] ==> var unsubscribed: Boolean defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx restarts if we pass through zero subscribers`[LocalVariableDescriptor]

'isFalse' @ [251:34] ==> public open fun isFalse(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'databaseWrappedObservable' @ [253:29] ==> val databaseWrappedObservable: Observable<Int> defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx restarts if we pass through zero subscribers`[LocalVariableDescriptor]

'subscribe' @ [253:55] ==> public final fun subscribe(p0: (((Int..Int?)) -> Unit..(((Int..Int?)) -> Unit)?)): (Subscription..Subscription?) defined in rx.Observable[MyFunctionDescriptor]

'databaseWrappedObservable' @ [254:29] ==> val databaseWrappedObservable: Observable<Int> defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx restarts if we pass through zero subscribers`[LocalVariableDescriptor]

'subscribe' @ [254:55] ==> public final fun subscribe(p0: (((Int..Int?)) -> Unit..(((Int..Int?)) -> Unit)?)): (Subscription..Subscription?) defined in rx.Observable[MyFunctionDescriptor]

'subscription1' @ [256:9] ==> val subscription1: (Subscription..Subscription?) defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx restarts if we pass through zero subscribers`[LocalVariableDescriptor]

'unsubscribe' @ [256:23] ==> public abstract fun unsubscribe(): Unit defined in rx.Subscription[JavaMethodDescriptor]

'assertThat' @ [257:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'unsubscribed' @ [257:20] ==> var unsubscribed: Boolean defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx restarts if we pass through zero subscribers`[LocalVariableDescriptor]

'isFalse' @ [257:34] ==> public open fun isFalse(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'subscription2' @ [259:9] ==> val subscription2: (Subscription..Subscription?) defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx restarts if we pass through zero subscribers`[LocalVariableDescriptor]

'unsubscribe' @ [259:23] ==> public abstract fun unsubscribe(): Unit defined in rx.Subscription[JavaMethodDescriptor]

'assertThat' @ [260:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'unsubscribed' @ [260:20] ==> var unsubscribed: Boolean defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx restarts if we pass through zero subscribers`[LocalVariableDescriptor]

'isTrue' @ [260:34] ==> public open fun isTrue(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'create' @ [262:36] ==> public open fun <V : (Any..Any?)> create(): (SettableFuture<(Int..Int?)>..SettableFuture<(Int..Int?)>?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]
Inferred types:
    <V : (Any..Any?)> -> Int

'databaseWrappedObservable' @ [263:29] ==> val databaseWrappedObservable: Observable<Int> defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx restarts if we pass through zero subscribers`[LocalVariableDescriptor]

'subscribe' @ [263:55] ==> public final fun subscribe(p0: (((Int..Int?)) -> Unit..(((Int..Int?)) -> Unit)?)): (Subscription..Subscription?) defined in rx.Observable[MyFunctionDescriptor]

'event' @ [263:67] ==> val event: (SettableFuture<(Int..Int?)>..SettableFuture<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx restarts if we pass through zero subscribers`[LocalVariableDescriptor]

'set' @ [263:73] ==> @CanIgnoreReturnValue public open fun set(@Nullable p0: Int?): Boolean defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'it' @ [263:77] ==> value-parameter it: (Int..Int?) defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx restarts if we pass through zero subscribers`.<anonymous>[ValueParameterDescriptorImpl]

'source' @ [265:9] ==> val source: (PublishSubject<(Int..Int?)>..PublishSubject<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx restarts if we pass through zero subscribers`[LocalVariableDescriptor]

'onNext' @ [265:16] ==> public open fun onNext(p0: (Int..Int?)): Unit defined in rx.subjects.PublishSubject[JavaMethodDescriptor]

'assertThat' @ [267:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'event' @ [267:20] ==> val event: (SettableFuture<(Int..Int?)>..SettableFuture<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx restarts if we pass through zero subscribers`[LocalVariableDescriptor]

'isDone' @ [267:26] ==> public final val <V : (Any..Any?)> SettableFuture<(Int..Int?)>.isDone: Boolean[MyPropertyDescriptor]
Inferred types:
    <V : (Any..Any?)> -> (kotlin.Int..kotlin.Int?)

'isTrue' @ [267:34] ==> public open fun isTrue(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [268:9] ==> @CheckReturnValue public open fun assertThat(p0: Int): (AbstractIntegerAssert<*>..AbstractIntegerAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'event' @ [268:20] ==> val event: (SettableFuture<(Int..Int?)>..SettableFuture<(Int..Int?)>?) defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx restarts if we pass through zero subscribers`[LocalVariableDescriptor]

'get' @ [268:26] ==> @CanIgnoreReturnValue public final fun get(): (Int..Int?) defined in com.google.common.util.concurrent.SettableFuture[JavaMethodDescriptor]

'isEqualTo' @ [268:33] ==> public open fun isEqualTo(p0: Int): (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractIntegerAssert[JavaMethodDescriptor]

'subscription3' @ [270:9] ==> val subscription3: (Subscription..Subscription?) defined in net.corda.node.utilities.ObservablesTests.`check wrapping in db tx restarts if we pass through zero subscribers`[LocalVariableDescriptor]

'unsubscribe' @ [270:23] ==> public abstract fun unsubscribe(): Unit defined in rx.Subscription[JavaMethodDescriptor]

