'TestDependencyInjectionBase' @ [48:25] ==> public constructor TestDependencyInjectionBase() defined in net.corda.testing.TestDependencyInjectionBase[DeserializedClassConstructorDescriptor]

'services' @ [52:40] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'vaultService' @ [52:49] ==> public open val vaultService: VaultService defined in net.corda.testing.node.MockServices[DeserializedPropertyDescriptor]

'services' @ [53:50] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'vaultQueryService' @ [53:59] ==> public open val vaultQueryService: VaultQueryService defined in net.corda.testing.node.MockServices[DeserializedPropertyDescriptor]

'makeTestIdentityService' @ [54:40] ==> public fun makeTestIdentityService(): InMemoryIdentityService defined in net.corda.testing.node[DeserializedSimpleFunctionDescriptor]

'lazy' @ [58:37] ==> public fun <T> lazy(initializer: () -> KeyPair): Lazy<KeyPair> defined in kotlin[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> KeyPair

'entropyToKeyPair' @ [58:44] ==> public fun entropyToKeyPair(entropy: BigInteger): KeyPair defined in net.corda.core.crypto[DeserializedSimpleFunctionDescriptor]

'valueOf' @ [58:72] ==> public open fun valueOf(p0: Long): (BigInteger..BigInteger?) defined in java.math.BigInteger[JavaMethodDescriptor]

'Party' @ [59:36] ==> public constructor Party(name: X500Name, owningKey: PublicKey) defined in net.corda.core.identity.Party[DeserializedClassConstructorDescriptor]

'X500Name' @ [59:42] ==> public constructor X500Name(p0: (String..String?)) defined in org.bouncycastle.asn1.x500.X500Name[JavaClassConstructorDescriptor]

'CASH_NOTARY_KEY' @ [59:106] ==> public final val CASH_NOTARY_KEY: KeyPair defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'public' @ [59:122] ==> public final val KeyPair.public: (PublicKey..PublicKey?)[MyPropertyDescriptor]

'getTestPartyAndCertificate' @ [60:59] ==> public fun getTestPartyAndCertificate(name: X500Name, publicKey: PublicKey, trustRoot: CertificateAndKeyPair = ...): PartyAndCertificate defined in net.corda.testing[DeserializedSimpleFunctionDescriptor]

'CASH_NOTARY' @ [60:86] ==> public final val CASH_NOTARY: Party defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'nameOrNull' @ [60:98] ==> public open fun nameOrNull(): X500Name defined in net.corda.core.identity.Party[DeserializedSimpleFunctionDescriptor]

'CASH_NOTARY_KEY' @ [60:112] ==> public final val CASH_NOTARY_KEY: KeyPair defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'public' @ [60:128] ==> public final val KeyPair.public: (PublicKey..PublicKey?)[MyPropertyDescriptor]

'Before' @ [62:5] ==> public constructor Before() defined in org.junit.Before[JavaClassConstructorDescriptor]

'identitySvc' @ [65:9] ==> public final val identitySvc: IdentityService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'verifyAndRegisterIdentity' @ [65:21] ==> public abstract fun verifyAndRegisterIdentity(identity: PartyAndCertificate): PartyAndCertificate? defined in net.corda.core.node.services.IdentityService[DeserializedSimpleFunctionDescriptor]

'CASH_NOTARY_IDENTITY' @ [65:47] ==> public final val CASH_NOTARY_IDENTITY: PartyAndCertificate defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'identitySvc' @ [66:9] ==> public final val identitySvc: IdentityService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'verifyAndRegisterIdentity' @ [66:21] ==> public abstract fun verifyAndRegisterIdentity(identity: PartyAndCertificate): PartyAndCertificate? defined in net.corda.core.node.services.IdentityService[DeserializedSimpleFunctionDescriptor]

'BOC_IDENTITY' @ [66:47] ==> public val BOC_IDENTITY: PartyAndCertificate defined in net.corda.testing[DeserializedPropertyDescriptor]

'makeTestDatabaseAndMockServices' @ [67:35] ==> public fun makeTestDatabaseAndMockServices(customSchemas: Set<MappedSchema> = ..., keys: List<KeyPair> = ..., createIdentityService: () -> IdentityService = ...): Pair<CordaPersistence, MockServices> defined in net.corda.testing.node[DeserializedSimpleFunctionDescriptor]

'listOf' @ [67:74] ==> public fun <T> listOf(vararg elements: KeyPair): List<KeyPair> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> KeyPair

'MEGA_CORP_KEY' @ [67:81] ==> public val MEGA_CORP_KEY: KeyPair defined in net.corda.testing[DeserializedPropertyDescriptor]

'DUMMY_NOTARY_KEY' @ [67:96] ==> public val DUMMY_NOTARY_KEY: KeyPair defined in net.corda.testing[DeserializedPropertyDescriptor]

'identitySvc' @ [67:141] ==> public final val identitySvc: IdentityService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'database' @ [68:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'databaseAndServices' @ [68:20] ==> val databaseAndServices: Pair<CordaPersistence, MockServices> defined in net.corda.node.services.vault.VaultQueryTests.setUp[LocalVariableDescriptor]

'first' @ [68:40] ==> public final val first: CordaPersistence defined in kotlin.Pair[DeserializedPropertyDescriptor]

'services' @ [69:9] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'databaseAndServices' @ [69:20] ==> val databaseAndServices: Pair<CordaPersistence, MockServices> defined in net.corda.node.services.vault.VaultQueryTests.setUp[LocalVariableDescriptor]

'second' @ [69:40] ==> public final val second: MockServices defined in kotlin.Pair[DeserializedPropertyDescriptor]

'notaryServices' @ [70:9] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'MockServices' @ [70:26] ==> public constructor MockServices(vararg keys: KeyPair) defined in net.corda.testing.node.MockServices[DeserializedClassConstructorDescriptor]

'DUMMY_NOTARY_KEY' @ [70:39] ==> public val DUMMY_NOTARY_KEY: KeyPair defined in net.corda.testing[DeserializedPropertyDescriptor]

'DUMMY_CASH_ISSUER_KEY' @ [70:57] ==> public val DUMMY_CASH_ISSUER_KEY: KeyPair defined in net.corda.finance.contracts.asset[DeserializedPropertyDescriptor]

'BOC_KEY' @ [70:80] ==> public val BOC_KEY: KeyPair defined in net.corda.testing[DeserializedPropertyDescriptor]

'MEGA_CORP_KEY' @ [70:89] ==> public val MEGA_CORP_KEY: KeyPair defined in net.corda.testing[DeserializedPropertyDescriptor]

'After' @ [73:5] ==> public constructor After() defined in org.junit.After[JavaClassConstructorDescriptor]

'database' @ [75:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'close' @ [75:18] ==> public open fun close(): Unit defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]

'Ignore' @ [81:5] ==> public constructor Ignore(value: String = ...) defined in org.junit.Ignore[JavaClassConstructorDescriptor]

'Test' @ [82:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'configureDatabase' @ [84:24] ==> public fun configureDatabase(dataSourceProperties: Properties, databaseProperties: Properties?, createSchemaService: () -> SchemaService = ..., createIdentityService: () -> IdentityService): CordaPersistence defined in net.corda.node.utilities[DeserializedSimpleFunctionDescriptor]

'makePersistentDataSourceProperties' @ [84:42] ==> private final fun makePersistentDataSourceProperties(): Properties defined in net.corda.node.services.vault.VaultQueryTests[SimpleFunctionDescriptorImpl]

'makeTestDatabaseProperties' @ [84:80] ==> public fun makeTestDatabaseProperties(key: String? = ..., value: String? = ...): Properties defined in net.corda.testing.node[DeserializedSimpleFunctionDescriptor]

'identitySvc' @ [84:136] ==> public final val identitySvc: IdentityService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'setUpDb' @ [86:9] ==> private final fun setUpDb(_database: CordaPersistence, delay: Long = ...): Unit defined in net.corda.node.services.vault.VaultQueryTests[SimpleFunctionDescriptorImpl]

'database' @ [86:17] ==> val database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests.createPersistentTestDb[LocalVariableDescriptor]

'database' @ [88:9] ==> val database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests.createPersistentTestDb[LocalVariableDescriptor]

'close' @ [88:18] ==> public open fun close(): Unit defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]

'_database' @ [93:9] ==> value-parameter _database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests.setUpDb[ValueParameterDescriptorImpl]

'transaction' @ [93:19] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault.Update<ContractState>): Vault.Update<ContractState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Update<ContractState>

'services' @ [96:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [96:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [96:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [96:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [96:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [96:94] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [97:35] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [97:44] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [98:35] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [98:44] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [99:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [99:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [100:30] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [100:39] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [100:61] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'sleep' @ [104:13] ==> public open fun sleep(p0: Long): Unit defined in java.lang.Thread[JavaMethodDescriptor]

'delay' @ [104:19] ==> value-parameter delay: Long = ... defined in net.corda.node.services.vault.VaultQueryTests.setUpDb[ValueParameterDescriptorImpl]

'services' @ [107:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeLinearStates' @ [107:22] ==> public fun ServiceHub.consumeLinearStates(linearStates: List<StateAndRef<LinearState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'linearStatesXYZ' @ [107:42] ==> val linearStatesXYZ: Vault<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.setUpDb.<anonymous>[LocalVariableDescriptor]

'states' @ [107:58] ==> public final val states: Iterable<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'toList' @ [107:65] ==> public fun <T> Iterable<StateAndRef<LinearState>>.toList(): List<StateAndRef<LinearState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>

'DUMMY_NOTARY' @ [107:75] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [108:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeLinearStates' @ [108:22] ==> public fun ServiceHub.consumeLinearStates(linearStates: List<StateAndRef<LinearState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'linearStatesJKL' @ [108:42] ==> val linearStatesJKL: Vault<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.setUpDb.<anonymous>[LocalVariableDescriptor]

'states' @ [108:58] ==> public final val states: Iterable<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'toList' @ [108:65] ==> public fun <T> Iterable<StateAndRef<LinearState>>.toList(): List<StateAndRef<LinearState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>

'DUMMY_NOTARY' @ [108:75] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [109:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeDeals' @ [109:22] ==> public fun ServiceHub.consumeDeals(dealStates: List<StateAndRef<DealState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'dealStates' @ [109:35] ==> val dealStates: Vault<DealState> defined in net.corda.node.services.vault.VaultQueryTests.setUpDb.<anonymous>[LocalVariableDescriptor]

'states' @ [109:46] ==> public final val states: Iterable<StateAndRef<DealState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'filter' @ [109:53] ==> public inline fun <T> Iterable<StateAndRef<DealState>>.filter(predicate: (StateAndRef<DealState>) -> Boolean): List<StateAndRef<DealState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<DealState>

'it' @ [109:62] ==> value-parameter it: StateAndRef<DealState> defined in net.corda.node.services.vault.VaultQueryTests.setUpDb.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'state' @ [109:65] ==> public final val state: TransactionState<DealState> defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'data' @ [109:71] ==> public final val data: DealState defined in net.corda.core.contracts.TransactionState[DeserializedPropertyDescriptor]

'linearId' @ [109:76] ==> public abstract val linearId: UniqueIdentifier defined in net.corda.finance.contracts.DealState[DeserializedPropertyDescriptor]

'externalId' @ [109:85] ==> public final val externalId: String? defined in net.corda.core.contracts.UniqueIdentifier[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [109:108] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [110:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeCash' @ [110:22] ==> @JvmOverloads public fun ServiceHub.consumeCash(amount: Amount<Currency>, to: Party = ..., notary: Party): Vault.Update<ContractState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [110:37] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [110:55] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Properties' @ [118:21] ==> public constructor Properties() defined in java.util.Properties[JavaClassConstructorDescriptor]

'props' @ [119:9] ==> val props: Properties defined in net.corda.node.services.vault.VaultQueryTests.makePersistentDataSourceProperties[LocalVariableDescriptor]

'setProperty' @ [119:15] ==> public open fun setProperty(p0: (String..String?), p1: (String..String?)): (Any..Any?) defined in java.util.Properties[JavaMethodDescriptor]

'props' @ [120:9] ==> val props: Properties defined in net.corda.node.services.vault.VaultQueryTests.makePersistentDataSourceProperties[LocalVariableDescriptor]

'setProperty' @ [120:15] ==> public open fun setProperty(p0: (String..String?), p1: (String..String?)): (Any..Any?) defined in java.util.Properties[JavaMethodDescriptor]

'props' @ [121:9] ==> val props: Properties defined in net.corda.node.services.vault.VaultQueryTests.makePersistentDataSourceProperties[LocalVariableDescriptor]

'setProperty' @ [121:15] ==> public open fun setProperty(p0: (String..String?), p1: (String..String?)): (Any..Any?) defined in java.util.Properties[JavaMethodDescriptor]

'props' @ [122:9] ==> val props: Properties defined in net.corda.node.services.vault.VaultQueryTests.makePersistentDataSourceProperties[LocalVariableDescriptor]

'setProperty' @ [122:15] ==> public open fun setProperty(p0: (String..String?), p1: (String..String?)): (Any..Any?) defined in java.util.Properties[JavaMethodDescriptor]

'props' @ [123:16] ==> val props: Properties defined in net.corda.node.services.vault.VaultQueryTests.makePersistentDataSourceProperties[LocalVariableDescriptor]

'!!' @ [127:22] ==> public final fun <`<TYPE-PARAMETER-FOR-EXCLEXCL-RESOLVE>`> `<SPECIAL-FUNCTION-FOR-EXCLEXCL-RESOLVE>`(baseExpr: ExpectedException?): ExpectedException[SimpleFunctionDescriptorImpl]
Inferred types:
    <`<TYPE-PARAMETER-FOR-EXCLEXCL-RESOLVE>`> -> ExpectedException

'none' @ [127:40] ==> public open fun none(): (ExpectedException..ExpectedException?) defined in org.junit.rules.ExpectedException[JavaMethodDescriptor]

'Test' @ [136:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [138:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [138:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<DealState>): Vault<DealState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<DealState>

'services' @ [139:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [139:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [139:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [139:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [139:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [139:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [140:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [140:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [141:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [141:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [141:44] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'database' @ [143:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [143:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?)): (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.node.services.Vault.StateMetadata..net.corda.core.node.services.Vault.StateMetadata?)>..org.assertj.core.api.ListAssert<(net.corda.core.node.services.Vault.StateMetadata..net.corda.core.node.services.Vault.StateMetadata?)>?)

'vaultQuerySvc' @ [145:26] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [145:40] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'result' @ [154:26] ==> val result: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states simple`.<anonymous>[LocalVariableDescriptor]

'states' @ [154:33] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'result' @ [155:28] ==> val result: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states simple`.<anonymous>[LocalVariableDescriptor]

'statesMetadata' @ [155:35] ==> public final val statesMetadata: List<Vault.StateMetadata> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'assertThat' @ [158:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'states' @ [158:24] ==> val states: List<StateAndRef<ContractState>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states simple`.<anonymous>[LocalVariableDescriptor]

'hasSize' @ [158:32] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [159:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (Vault.StateMetadata..Vault.StateMetadata?)>..List<(Vault.StateMetadata..Vault.StateMetadata?)>?)): (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateMetadata

'metadata' @ [159:24] ==> val metadata: List<Vault.StateMetadata> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states simple`.<anonymous>[LocalVariableDescriptor]

'hasSize' @ [159:34] ==> public open fun hasSize(p0: Int): (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [163:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [165:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [165:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<DealState>): Vault<DealState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<DealState>

'services' @ [166:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [166:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [166:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [166:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [166:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [166:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [167:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [167:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [168:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [168:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [168:44] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'database' @ [170:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [170:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?)): (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.node.services.Vault.StateMetadata..net.corda.core.node.services.Vault.StateMetadata?)>..org.assertj.core.api.ListAssert<(net.corda.core.node.services.Vault.StateMetadata..net.corda.core.node.services.Vault.StateMetadata?)>?)

'VaultQueryCriteria' @ [171:28] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'vaultQuerySvc' @ [172:26] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [172:40] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteria' @ [172:63] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states verbose`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [174:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'result' @ [174:24] ==> val result: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states verbose`.<anonymous>[LocalVariableDescriptor]

'states' @ [174:31] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [174:39] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [175:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (Vault.StateMetadata..Vault.StateMetadata?)>..List<(Vault.StateMetadata..Vault.StateMetadata?)>?)): (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateMetadata

'result' @ [175:24] ==> val result: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states verbose`.<anonymous>[LocalVariableDescriptor]

'statesMetadata' @ [175:31] ==> public final val statesMetadata: List<Vault.StateMetadata> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [175:47] ==> public open fun hasSize(p0: Int): (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [179:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [181:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [181:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [182:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [182:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [182:46] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [182:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [182:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [182:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [183:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [183:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [183:46] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [183:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [183:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [183:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [184:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [184:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [184:46] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [184:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [184:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [184:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [185:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [185:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [185:46] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [185:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [185:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [185:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'PageSpecification' @ [187:22] ==> public constructor PageSpecification(pageNumber: Int = ..., pageSize: Int = ...) defined in net.corda.core.node.services.vault.PageSpecification[DeserializedClassConstructorDescriptor]

'DEFAULT_PAGE_NUM' @ [187:40] ==> public const val DEFAULT_PAGE_NUM: Int defined in net.corda.core.node.services.vault[DeserializedPropertyDescriptor]

'database' @ [188:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [188:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?)>): AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>?)>?)>

'VaultQueryCriteria' @ [189:28] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Vault' @ [189:56] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'ALL' @ [189:74] ==> enum entry ALL defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [190:40] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [190:54] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria, paging: PageSpecification): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteria' @ [190:77] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with count`.<anonymous>[LocalVariableDescriptor]

'paging' @ [190:87] ==> val paging: PageSpecification defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with count`[LocalVariableDescriptor]

'assertThat' @ [191:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'resultsBeforeConsume' @ [191:24] ==> val resultsBeforeConsume: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with count`.<anonymous>[LocalVariableDescriptor]

'states' @ [191:45] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [191:53] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [192:13] ==> @CheckReturnValue public open fun assertThat(p0: Long): (AbstractLongAssert<*>..AbstractLongAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'resultsBeforeConsume' @ [192:24] ==> val resultsBeforeConsume: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with count`.<anonymous>[LocalVariableDescriptor]

'totalStatesAvailable' @ [192:45] ==> public final val totalStatesAvailable: Long defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [192:67] ==> public open fun isEqualTo(p0: Long): (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractLongAssert[JavaMethodDescriptor]

'database' @ [194:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [194:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault.Update<ContractState>): Vault.Update<ContractState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Update<ContractState>

'services' @ [195:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeCash' @ [195:22] ==> @JvmOverloads public fun ServiceHub.consumeCash(amount: Amount<Currency>, to: Party = ..., notary: Party): Vault.Update<ContractState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [195:37] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [195:55] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'database' @ [197:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [197:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?)>): AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>?)>?)>

'VaultQueryCriteria' @ [198:36] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Vault' @ [198:64] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'UNCONSUMED' @ [198:82] ==> enum entry UNCONSUMED defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [199:39] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [199:53] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria, paging: PageSpecification): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'consumedCriteria' @ [199:76] ==> val consumedCriteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with count`.<anonymous>[LocalVariableDescriptor]

'paging' @ [199:94] ==> val paging: PageSpecification defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with count`[LocalVariableDescriptor]

'assertThat' @ [200:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'resultsAfterConsume' @ [200:24] ==> val resultsAfterConsume: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with count`.<anonymous>[LocalVariableDescriptor]

'states' @ [200:44] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [200:52] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [201:13] ==> @CheckReturnValue public open fun assertThat(p0: Long): (AbstractLongAssert<*>..AbstractLongAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'resultsAfterConsume' @ [201:24] ==> val resultsAfterConsume: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with count`.<anonymous>[LocalVariableDescriptor]

'totalStatesAvailable' @ [201:44] ==> public final val totalStatesAvailable: Long defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [201:66] ==> public open fun isEqualTo(p0: Long): (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractLongAssert[JavaMethodDescriptor]

'Test' @ [205:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [207:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [207:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<DealState>): Vault<DealState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<DealState>

'services' @ [208:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [208:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [208:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [208:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [208:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [208:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [209:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [209:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [210:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [210:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [210:44] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'database' @ [212:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [212:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?)): (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.node.services.Vault.StateMetadata..net.corda.core.node.services.Vault.StateMetadata?)>..org.assertj.core.api.ListAssert<(net.corda.core.node.services.Vault.StateMetadata..net.corda.core.node.services.Vault.StateMetadata?)>?)

'vaultQuerySvc' @ [213:26] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [213:40] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(): Vault.Page<Cash.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'assertThat' @ [215:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..List<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'result' @ [215:24] ==> val result: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states simple`.<anonymous>[LocalVariableDescriptor]

'states' @ [215:31] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [215:39] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [216:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (Vault.StateMetadata..Vault.StateMetadata?)>..List<(Vault.StateMetadata..Vault.StateMetadata?)>?)): (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateMetadata

'result' @ [216:24] ==> val result: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states simple`.<anonymous>[LocalVariableDescriptor]

'statesMetadata' @ [216:31] ==> public final val statesMetadata: List<Vault.StateMetadata> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [216:47] ==> public open fun hasSize(p0: Int): (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [220:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [222:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [222:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<DealState>): Vault<DealState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<DealState>

'services' @ [223:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [223:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [223:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [223:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [223:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [223:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [224:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [224:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [225:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [225:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [225:44] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'database' @ [227:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [227:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?)): (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.node.services.Vault.StateMetadata..net.corda.core.node.services.Vault.StateMetadata?)>..org.assertj.core.api.ListAssert<(net.corda.core.node.services.Vault.StateMetadata..net.corda.core.node.services.Vault.StateMetadata?)>?)

'VaultQueryCriteria' @ [228:28] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'vaultQuerySvc' @ [229:26] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [229:40] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<Cash.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'criteria' @ [229:60] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states verbose`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [231:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..List<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'result' @ [231:24] ==> val result: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states verbose`.<anonymous>[LocalVariableDescriptor]

'states' @ [231:31] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [231:39] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [232:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (Vault.StateMetadata..Vault.StateMetadata?)>..List<(Vault.StateMetadata..Vault.StateMetadata?)>?)): (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateMetadata

'result' @ [232:24] ==> val result: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states verbose`.<anonymous>[LocalVariableDescriptor]

'statesMetadata' @ [232:31] ==> public final val statesMetadata: List<Vault.StateMetadata> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [232:47] ==> public open fun hasSize(p0: Int): (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [236:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'mutableListOf' @ [238:48] ==> @SinceKotlin @InlineOnly public inline fun <T> mutableListOf(): MutableList<StateRef> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateRef

'database' @ [239:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [239:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Boolean): Boolean defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Boolean

'services' @ [240:32] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [240:41] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [240:66] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [240:75] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [240:91] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [240:113] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'issuedStates' @ [241:35] ==> val issuedStates: Vault<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref`.<anonymous>[LocalVariableDescriptor]

'states' @ [241:48] ==> public final val states: Iterable<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'map' @ [241:55] ==> public inline fun <T, R> Iterable<StateAndRef<Cash.State>>.map(transform: (StateAndRef<Cash.State>) -> StateRef): List<StateRef> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<State>
    <R> -> StateRef

'it' @ [241:61] ==> value-parameter it: StateAndRef<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'ref' @ [241:64] ==> public final val ref: StateRef defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'toList' @ [241:70] ==> public fun <T> Iterable<StateRef>.toList(): List<StateRef> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateRef

'stateRefs' @ [242:13] ==> val stateRefs: MutableList<StateRef> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref`[LocalVariableDescriptor]

'addAll' @ [242:23] ==> public abstract fun addAll(elements: Collection<StateRef>): Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor]

'issuedStateRefs' @ [242:30] ==> val issuedStateRefs: List<StateRef> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref`.<anonymous>[LocalVariableDescriptor]

'database' @ [244:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [244:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Boolean): Boolean defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Boolean

'services' @ [245:31] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeCash' @ [245:40] ==> @JvmOverloads public fun ServiceHub.consumeCash(amount: Amount<Currency>, to: Party = ..., notary: Party): Vault.Update<ContractState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [245:55] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [245:73] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'spentStates' @ [246:37] ==> val spentStates: Vault.Update<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref`.<anonymous>[LocalVariableDescriptor]

'consumed' @ [246:49] ==> public final val consumed: Set<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Update[DeserializedPropertyDescriptor]

'map' @ [246:58] ==> public inline fun <T, R> Iterable<StateAndRef<ContractState>>.map(transform: (StateAndRef<ContractState>) -> StateRef): List<StateRef> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<ContractState>
    <R> -> StateRef

'it' @ [246:64] ==> value-parameter it: StateAndRef<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'ref' @ [246:67] ==> public final val ref: StateRef defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'toList' @ [246:73] ==> public fun <T> Iterable<StateRef>.toList(): List<StateRef> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateRef

'spentStates' @ [247:37] ==> val spentStates: Vault.Update<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref`.<anonymous>[LocalVariableDescriptor]

'produced' @ [247:49] ==> public final val produced: Set<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Update[DeserializedPropertyDescriptor]

'map' @ [247:58] ==> public inline fun <T, R> Iterable<StateAndRef<ContractState>>.map(transform: (StateAndRef<ContractState>) -> StateRef): List<StateRef> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<ContractState>
    <R> -> StateRef

'it' @ [247:64] ==> value-parameter it: StateAndRef<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'ref' @ [247:67] ==> public final val ref: StateRef defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'toList' @ [247:73] ==> public fun <T> Iterable<StateRef>.toList(): List<StateRef> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateRef

'stateRefs' @ [248:13] ==> val stateRefs: MutableList<StateRef> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref`[LocalVariableDescriptor]

'addAll' @ [248:23] ==> public abstract fun addAll(elements: Collection<StateRef>): Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor]

'consumedStateRefs' @ [248:30] ==> val consumedStateRefs: List<StateRef> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref`.<anonymous>[LocalVariableDescriptor]

'plus' @ [248:48] ==> public operator fun <T> Collection<StateRef>.plus(elements: Iterable<StateRef>): List<StateRef> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateRef

'producedStateRefs' @ [248:53] ==> val producedStateRefs: List<StateRef> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref`.<anonymous>[LocalVariableDescriptor]

'database' @ [250:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [250:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>?)>): AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>..org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>..org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>..org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>..org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>..org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>..org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>..org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>..org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>?)>?)>?)>?)>..org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>..org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>..org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>..org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>..org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>..org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>..org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>..org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractIntegerAssert<out (org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>..org.assertj.core.api.AbstractIntegerAssert<out kotlin.Any?>?)>?)>?)>?)>?)>

'Standard' @ [251:47] ==> public constructor Standard(attribute: Sort.Attribute) defined in net.corda.core.node.services.vault.SortAttribute.Standard[DeserializedClassConstructorDescriptor]

'STATE_REF' @ [251:82] ==> enum entry STATE_REF defined in net.corda.core.node.services.vault.Sort.CommonStateAttribute[FakeCallableDescriptorForObject]

'VaultQueryCriteria' @ [252:28] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'vaultQuerySvc' @ [253:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [253:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria, sorting: Sort): Vault.Page<Cash.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'criteria' @ [253:61] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref`.<anonymous>[LocalVariableDescriptor]

'Sort' @ [253:71] ==> public constructor Sort(columns: Collection<Sort.SortColumn>) defined in net.corda.core.node.services.vault.Sort[DeserializedClassConstructorDescriptor]

'setOf' @ [253:76] ==> public fun <T> setOf(element: Sort.SortColumn): Set<Sort.SortColumn> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> SortColumn

'SortColumn' @ [253:87] ==> public constructor SortColumn(sortAttribute: SortAttribute, direction: Sort.Direction = ...) defined in net.corda.core.node.services.vault.Sort.SortColumn[DeserializedClassConstructorDescriptor]

'sortAttribute' @ [253:98] ==> val sortAttribute: SortAttribute.Standard defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref`.<anonymous>[LocalVariableDescriptor]

'ASC' @ [253:128] ==> enum entry ASC defined in net.corda.core.node.services.vault.Sort.Direction[FakeCallableDescriptorForObject]

'assertThat' @ [259:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..List<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [259:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref`.<anonymous>[LocalVariableDescriptor]

'states' @ [259:32] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [259:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'stateRefs' @ [261:35] ==> val stateRefs: MutableList<StateRef> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref`[LocalVariableDescriptor]

'sortedBy' @ [261:45] ==> public inline fun <T, R : Comparable<Int>> Iterable<StateRef>.sortedBy(crossinline selector: (StateRef) -> Int?): List<StateRef> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateRef
    <R : Comparable<R>> -> Int

'it' @ [261:56] ==> value-parameter it: StateRef defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'index' @ [261:59] ==> public final val index: Int defined in net.corda.core.contracts.StateRef[DeserializedPropertyDescriptor]

'assertThat' @ [263:13] ==> @CheckReturnValue public open fun assertThat(p0: Int): (AbstractIntegerAssert<*>..AbstractIntegerAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'results' @ [263:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref`.<anonymous>[LocalVariableDescriptor]

'states' @ [263:32] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'first' @ [263:39] ==> public fun <T> List<StateAndRef<Cash.State>>.first(): StateAndRef<Cash.State> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<State>

'ref' @ [263:47] ==> public final val ref: StateRef defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'index' @ [263:51] ==> public final val index: Int defined in net.corda.core.contracts.StateRef[DeserializedPropertyDescriptor]

'isEqualTo' @ [263:58] ==> public open fun isEqualTo(p0: Int): (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractIntegerAssert[JavaMethodDescriptor]

'sortedStateRefs' @ [263:68] ==> val sortedStateRefs: List<StateRef> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref`.<anonymous>[LocalVariableDescriptor]

'first' @ [263:84] ==> public fun <T> List<StateRef>.first(): StateRef defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateRef

'index' @ [263:92] ==> public final val index: Int defined in net.corda.core.contracts.StateRef[DeserializedPropertyDescriptor]

'assertThat' @ [264:13] ==> @CheckReturnValue public open fun assertThat(p0: Int): (AbstractIntegerAssert<*>..AbstractIntegerAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'results' @ [264:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref`.<anonymous>[LocalVariableDescriptor]

'states' @ [264:32] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'last' @ [264:39] ==> public fun <T> List<StateAndRef<Cash.State>>.last(): StateAndRef<Cash.State> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<State>

'ref' @ [264:46] ==> public final val ref: StateRef defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'index' @ [264:50] ==> public final val index: Int defined in net.corda.core.contracts.StateRef[DeserializedPropertyDescriptor]

'isEqualTo' @ [264:57] ==> public open fun isEqualTo(p0: Int): (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractIntegerAssert[JavaMethodDescriptor]

'sortedStateRefs' @ [264:67] ==> val sortedStateRefs: List<StateRef> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref`.<anonymous>[LocalVariableDescriptor]

'last' @ [264:83] ==> public fun <T> List<StateRef>.last(): StateRef defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateRef

'index' @ [264:90] ==> public final val index: Int defined in net.corda.core.contracts.StateRef[DeserializedPropertyDescriptor]

'Test' @ [268:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'mutableSetOf' @ [270:24] ==> @SinceKotlin @InlineOnly public inline fun <T> mutableSetOf(): MutableSet<SecureHash> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> SecureHash

'database' @ [271:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [271:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [272:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [272:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [272:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [272:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [272:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [272:94] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [274:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [274:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Unit): Unit defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Unit

'services' @ [275:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeCash' @ [275:22] ==> @JvmOverloads public fun ServiceHub.consumeCash(amount: Amount<Currency>, to: Party = ..., notary: Party): Vault.Update<ContractState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [275:37] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [275:55] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'consumed' @ [275:69] ==> public final val consumed: Set<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Update[DeserializedPropertyDescriptor]

'forEach' @ [275:78] ==> @HidesMembers public inline fun <T> Iterable<StateAndRef<ContractState>>.forEach(action: (StateAndRef<ContractState>) -> Unit): Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<ContractState>

'consumed' @ [275:88] ==> val consumed: MutableSet<SecureHash> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref txnId and index`[LocalVariableDescriptor]

'it' @ [275:100] ==> value-parameter it: StateAndRef<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref txnId and index`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'ref' @ [275:103] ==> public final val ref: StateRef defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'txhash' @ [275:107] ==> public final val txhash: SecureHash defined in net.corda.core.contracts.StateRef[DeserializedPropertyDescriptor]

'services' @ [276:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeCash' @ [276:22] ==> @JvmOverloads public fun ServiceHub.consumeCash(amount: Amount<Currency>, to: Party = ..., notary: Party): Vault.Update<ContractState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [276:37] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [276:55] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'consumed' @ [276:69] ==> public final val consumed: Set<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Update[DeserializedPropertyDescriptor]

'forEach' @ [276:78] ==> @HidesMembers public inline fun <T> Iterable<StateAndRef<ContractState>>.forEach(action: (StateAndRef<ContractState>) -> Unit): Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<ContractState>

'consumed' @ [276:88] ==> val consumed: MutableSet<SecureHash> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref txnId and index`[LocalVariableDescriptor]

'it' @ [276:100] ==> value-parameter it: StateAndRef<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref txnId and index`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'ref' @ [276:103] ==> public final val ref: StateRef defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'txhash' @ [276:107] ==> public final val txhash: SecureHash defined in net.corda.core.contracts.StateRef[DeserializedPropertyDescriptor]

'database' @ [278:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [278:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>?)

'Standard' @ [279:52] ==> public constructor Standard(attribute: Sort.Attribute) defined in net.corda.core.node.services.vault.SortAttribute.Standard[DeserializedClassConstructorDescriptor]

'STATE_REF_TXN_ID' @ [279:87] ==> enum entry STATE_REF_TXN_ID defined in net.corda.core.node.services.vault.Sort.CommonStateAttribute[FakeCallableDescriptorForObject]

'Standard' @ [280:52] ==> public constructor Standard(attribute: Sort.Attribute) defined in net.corda.core.node.services.vault.SortAttribute.Standard[DeserializedClassConstructorDescriptor]

'STATE_REF_INDEX' @ [280:87] ==> enum entry STATE_REF_INDEX defined in net.corda.core.node.services.vault.Sort.CommonStateAttribute[FakeCallableDescriptorForObject]

'Sort' @ [281:26] ==> public constructor Sort(columns: Collection<Sort.SortColumn>) defined in net.corda.core.node.services.vault.Sort[DeserializedClassConstructorDescriptor]

'setOf' @ [281:31] ==> public fun <T> setOf(vararg elements: Sort.SortColumn): Set<Sort.SortColumn> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> SortColumn

'SortColumn' @ [281:42] ==> public constructor SortColumn(sortAttribute: SortAttribute, direction: Sort.Direction = ...) defined in net.corda.core.node.services.vault.Sort.SortColumn[DeserializedClassConstructorDescriptor]

'sortAttributeTxnId' @ [281:53] ==> val sortAttributeTxnId: SortAttribute.Standard defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref txnId and index`.<anonymous>[LocalVariableDescriptor]

'ASC' @ [281:88] ==> enum entry ASC defined in net.corda.core.node.services.vault.Sort.Direction[FakeCallableDescriptorForObject]

'SortColumn' @ [282:42] ==> public constructor SortColumn(sortAttribute: SortAttribute, direction: Sort.Direction = ...) defined in net.corda.core.node.services.vault.Sort.SortColumn[DeserializedClassConstructorDescriptor]

'sortAttributeIndex' @ [282:53] ==> val sortAttributeIndex: SortAttribute.Standard defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref txnId and index`.<anonymous>[LocalVariableDescriptor]

'ASC' @ [282:88] ==> enum entry ASC defined in net.corda.core.node.services.vault.Sort.Direction[FakeCallableDescriptorForObject]

'VaultQueryCriteria' @ [283:28] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'vaultQuerySvc' @ [284:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [284:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria, sorting: Sort): Vault.Page<Cash.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'criteria' @ [284:61] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref txnId and index`.<anonymous>[LocalVariableDescriptor]

'sortBy' @ [284:71] ==> val sortBy: Sort defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref txnId and index`.<anonymous>[LocalVariableDescriptor]

'results' @ [286:13] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref txnId and index`.<anonymous>[LocalVariableDescriptor]

'statesMetadata' @ [286:21] ==> public final val statesMetadata: List<Vault.StateMetadata> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'forEach' @ [286:36] ==> @HidesMembers public inline fun <T> Iterable<Vault.StateMetadata>.forEach(action: (Vault.StateMetadata) -> Unit): Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateMetadata

'println' @ [287:17] ==> @InlineOnly public inline fun println(message: Any?): Unit defined in kotlin.io[DeserializedSimpleFunctionDescriptor]

'it' @ [287:29] ==> value-parameter it: Vault.StateMetadata defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref txnId and index`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'ref' @ [287:32] ==> public final val ref: StateRef defined in net.corda.core.node.services.Vault.StateMetadata[DeserializedPropertyDescriptor]

'assertThat' @ [288:17] ==> @CheckReturnValue public open fun <T : (Comparable<(Vault.StateStatus..Vault.StateStatus?)>..Comparable<(Vault.StateStatus..Vault.StateStatus?)>?)> assertThat(p0: (Vault.StateStatus..Vault.StateStatus?)): (AbstractComparableAssert<*, (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<*, (Vault.StateStatus..Vault.StateStatus?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Comparable<(T..T?)>..Comparable<(T..T?)>?)> -> StateStatus

'it' @ [288:28] ==> value-parameter it: Vault.StateMetadata defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref txnId and index`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'status' @ [288:31] ==> public final val status: Vault.StateStatus defined in net.corda.core.node.services.Vault.StateMetadata[DeserializedPropertyDescriptor]

'isEqualTo' @ [288:39] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?) defined in org.assertj.core.api.AbstractComparableAssert[JavaMethodDescriptor]

'Vault' @ [288:49] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'UNCONSUMED' @ [288:67] ==> enum entry UNCONSUMED defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'results' @ [290:26] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref txnId and index`.<anonymous>[LocalVariableDescriptor]

'states' @ [290:34] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'sortedBy' @ [290:41] ==> public inline fun <T, R : Comparable<String>> Iterable<StateAndRef<Cash.State>>.sortedBy(crossinline selector: (StateAndRef<Cash.State>) -> String?): List<StateAndRef<Cash.State>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<State>
    <R : Comparable<R>> -> String

'it' @ [290:52] ==> value-parameter it: StateAndRef<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref txnId and index`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'ref' @ [290:55] ==> public final val ref: StateRef defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'toString' @ [290:59] ==> public open fun toString(): String defined in net.corda.core.contracts.StateRef[DeserializedSimpleFunctionDescriptor]

'assertThat' @ [291:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..List<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [291:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref txnId and index`.<anonymous>[LocalVariableDescriptor]

'states' @ [291:32] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [291:40] ==> public open fun isEqualTo(p0: (Any..Any?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'sorted' @ [291:50] ==> val sorted: List<StateAndRef<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref txnId and index`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [292:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..List<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [292:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref txnId and index`.<anonymous>[LocalVariableDescriptor]

'states' @ [292:32] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'allSatisfy' @ [292:40] ==> public final fun allSatisfy(p0: (((StateAndRef<Cash.State>..StateAndRef<Cash.State>?)) -> Unit..(((StateAndRef<Cash.State>..StateAndRef<Cash.State>?)) -> Unit)?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.ListAssert[MyFunctionDescriptor]

'!' @ [292:53] ==> public final operator fun not(): Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor]

'consumed' @ [292:54] ==> val consumed: MutableSet<SecureHash> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref txnId and index`[LocalVariableDescriptor]

'contains' @ [292:63] ==> public abstract fun contains(element: SecureHash): Boolean defined in kotlin.collections.MutableSet[DeserializedSimpleFunctionDescriptor]

'it' @ [292:72] ==> value-parameter it: (StateAndRef<Cash.State>..StateAndRef<Cash.State>?) defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash states sorted by state ref txnId and index`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'ref' @ [292:75] ==> public final val ref: StateRef defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'txhash' @ [292:79] ==> public final val txhash: SecureHash defined in net.corda.core.contracts.StateRef[DeserializedPropertyDescriptor]

'Test' @ [296:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [299:13] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [299:22] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> List<StateRef>): List<StateRef> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> List<StateRef>

'services' @ [300:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [300:26] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [301:36] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [301:45] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'issuedStates' @ [302:17] ==> val issuedStates: Vault<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states for state refs`.<anonymous>[LocalVariableDescriptor]

'states' @ [302:30] ==> public final val states: Iterable<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'map' @ [302:37] ==> public inline fun <T, R> Iterable<StateAndRef<LinearState>>.map(transform: (StateAndRef<LinearState>) -> StateRef): List<StateRef> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>
    <R> -> StateRef

'it' @ [302:43] ==> value-parameter it: StateAndRef<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states for state refs`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'ref' @ [302:46] ==> public final val ref: StateRef defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'toList' @ [302:52] ==> public fun <T> Iterable<StateRef>.toList(): List<StateRef> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateRef

'database' @ [304:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [304:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>): AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>?), (net.corda.core.contracts.StateRef..net.corda.core.contracts.StateRef?)>

'Standard' @ [306:47] ==> public constructor Standard(attribute: Sort.Attribute) defined in net.corda.core.node.services.vault.SortAttribute.Standard[DeserializedClassConstructorDescriptor]

'STATE_REF_TXN_ID' @ [306:82] ==> enum entry STATE_REF_TXN_ID defined in net.corda.core.node.services.vault.Sort.CommonStateAttribute[FakeCallableDescriptorForObject]

'VaultQueryCriteria' @ [307:28] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'listOf' @ [307:59] ==> public fun <T> listOf(vararg elements: StateRef): List<StateRef> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateRef

'stateRefs' @ [307:66] ==> val stateRefs: List<StateRef> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states for state refs`[LocalVariableDescriptor]

'first' @ [307:76] ==> public fun <T> List<StateRef>.first(): StateRef defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateRef

'stateRefs' @ [307:85] ==> val stateRefs: List<StateRef> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states for state refs`[LocalVariableDescriptor]

'last' @ [307:95] ==> public fun <T> List<StateRef>.last(): StateRef defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateRef

'vaultQuerySvc' @ [308:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [308:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria, sorting: Sort): Vault.Page<DummyLinearContract.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'criteria' @ [308:76] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states for state refs`.<anonymous>[LocalVariableDescriptor]

'Sort' @ [308:86] ==> public constructor Sort(columns: Collection<Sort.SortColumn>) defined in net.corda.core.node.services.vault.Sort[DeserializedClassConstructorDescriptor]

'setOf' @ [308:91] ==> public fun <T> setOf(element: Sort.SortColumn): Set<Sort.SortColumn> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> SortColumn

'SortColumn' @ [308:102] ==> public constructor SortColumn(sortAttribute: SortAttribute, direction: Sort.Direction = ...) defined in net.corda.core.node.services.vault.Sort.SortColumn[DeserializedClassConstructorDescriptor]

'sortAttribute' @ [308:113] ==> val sortAttribute: SortAttribute.Standard defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states for state refs`.<anonymous>[LocalVariableDescriptor]

'ASC' @ [308:143] ==> enum entry ASC defined in net.corda.core.node.services.vault.Sort.Direction[FakeCallableDescriptorForObject]

'assertThat' @ [311:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>..List<(StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>?)): (ListAssert<(StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>..ListAssert<(StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [311:24] ==> val results: Vault.Page<DummyLinearContract.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states for state refs`.<anonymous>[LocalVariableDescriptor]

'states' @ [311:32] ==> public final val states: List<StateAndRef<DummyLinearContract.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [311:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>..ListAssert<(StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'stateRefs' @ [313:35] ==> val stateRefs: List<StateRef> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states for state refs`[LocalVariableDescriptor]

'sortedBy' @ [313:45] ==> public inline fun <T, R : Comparable<String>> Iterable<StateRef>.sortedBy(crossinline selector: (StateRef) -> String?): List<StateRef> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateRef
    <R : Comparable<R>> -> String

'it' @ [313:56] ==> value-parameter it: StateRef defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states for state refs`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'txhash' @ [313:59] ==> public final val txhash: SecureHash defined in net.corda.core.contracts.StateRef[DeserializedPropertyDescriptor]

'bytes' @ [313:66] ==> public open val bytes: ByteArray defined in net.corda.core.crypto.SecureHash[DeserializedPropertyDescriptor]

'toHexString' @ [313:72] ==> public fun ByteArray.toHexString(): String defined in net.corda.core.utilities[DeserializedSimpleFunctionDescriptor]

'assertThat' @ [314:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (StateRef..StateRef?)): (AbstractObjectAssert<*, (StateRef..StateRef?)>..AbstractObjectAssert<*, (StateRef..StateRef?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> StateRef

'results' @ [314:24] ==> val results: Vault.Page<DummyLinearContract.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states for state refs`.<anonymous>[LocalVariableDescriptor]

'states' @ [314:32] ==> public final val states: List<StateAndRef<DummyLinearContract.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'first' @ [314:39] ==> public fun <T> List<StateAndRef<DummyLinearContract.State>>.first(): StateAndRef<DummyLinearContract.State> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<State>

'ref' @ [314:47] ==> public final val ref: StateRef defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'isEqualTo' @ [314:52] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'sortedStateRefs' @ [314:62] ==> val sortedStateRefs: List<StateRef> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states for state refs`.<anonymous>[LocalVariableDescriptor]

'first' @ [314:78] ==> public fun <T> List<StateRef>.first(): StateRef defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateRef

'assertThat' @ [315:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (StateRef..StateRef?)): (AbstractObjectAssert<*, (StateRef..StateRef?)>..AbstractObjectAssert<*, (StateRef..StateRef?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> StateRef

'results' @ [315:24] ==> val results: Vault.Page<DummyLinearContract.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states for state refs`.<anonymous>[LocalVariableDescriptor]

'states' @ [315:32] ==> public final val states: List<StateAndRef<DummyLinearContract.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'last' @ [315:39] ==> public fun <T> List<StateAndRef<DummyLinearContract.State>>.last(): StateAndRef<DummyLinearContract.State> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<State>

'ref' @ [315:46] ==> public final val ref: StateRef defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'isEqualTo' @ [315:51] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?), (StateRef..StateRef?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'sortedStateRefs' @ [315:61] ==> val sortedStateRefs: List<StateRef> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states for state refs`.<anonymous>[LocalVariableDescriptor]

'last' @ [315:77] ==> public fun <T> List<StateRef>.last(): StateRef defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateRef

'Test' @ [319:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [321:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [321:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<DealState>): Vault<DealState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<DealState>

'services' @ [322:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [322:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [322:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [322:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [322:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [322:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [323:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [323:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [324:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [324:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [324:44] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'database' @ [326:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [326:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>?)>?)

'VaultQueryCriteria' @ [329:28] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'setOf' @ [329:68] ==> public fun <T> setOf(vararg elements: Class<out ContractState>): Set<Class<out ContractState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Class<out ContractState>

'Cash' @ [329:74] ==> public companion object defined in net.corda.finance.contracts.asset.Cash[FakeCallableDescriptorForObject]

'java' @ [329:92] ==> public val <T> KClass<Cash.State>.java: Class<Cash.State> defined in kotlin.jvm[DeserializedPropertyDescriptor]
Inferred types:
    <T> -> State

'java' @ [329:115] ==> public val <T> KClass<DealState>.java: Class<DealState> defined in kotlin.jvm[DeserializedPropertyDescriptor]
Inferred types:
    <T> -> DealState

'vaultQuerySvc' @ [330:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [330:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteria' @ [330:64] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states for contract state types`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [332:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'results' @ [332:24] ==> val results: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states for contract state types`.<anonymous>[LocalVariableDescriptor]

'states' @ [332:32] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [332:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [336:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [338:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [338:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault.Update<ContractState>): Vault.Update<ContractState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Update<ContractState>

'services' @ [339:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [339:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [339:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [339:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [339:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [339:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [340:32] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [340:41] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [341:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [341:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [342:30] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [342:39] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [342:61] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'services' @ [344:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeLinearStates' @ [344:22] ==> public fun ServiceHub.consumeLinearStates(linearStates: List<StateAndRef<LinearState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'linearStates' @ [344:42] ==> val linearStates: Vault<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`consumed states`.<anonymous>[LocalVariableDescriptor]

'states' @ [344:55] ==> public final val states: Iterable<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'toList' @ [344:62] ==> public fun <T> Iterable<StateAndRef<LinearState>>.toList(): List<StateAndRef<LinearState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>

'DUMMY_NOTARY' @ [344:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [345:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeDeals' @ [345:22] ==> public fun ServiceHub.consumeDeals(dealStates: List<StateAndRef<DealState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'dealStates' @ [345:35] ==> val dealStates: Vault<DealState> defined in net.corda.node.services.vault.VaultQueryTests.`consumed states`.<anonymous>[LocalVariableDescriptor]

'states' @ [345:46] ==> public final val states: Iterable<StateAndRef<DealState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'filter' @ [345:53] ==> public inline fun <T> Iterable<StateAndRef<DealState>>.filter(predicate: (StateAndRef<DealState>) -> Boolean): List<StateAndRef<DealState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<DealState>

'it' @ [345:62] ==> value-parameter it: StateAndRef<DealState> defined in net.corda.node.services.vault.VaultQueryTests.`consumed states`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'state' @ [345:65] ==> public final val state: TransactionState<DealState> defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'data' @ [345:71] ==> public final val data: DealState defined in net.corda.core.contracts.TransactionState[DeserializedPropertyDescriptor]

'linearId' @ [345:76] ==> public abstract val linearId: UniqueIdentifier defined in net.corda.finance.contracts.DealState[DeserializedPropertyDescriptor]

'externalId' @ [345:85] ==> public final val externalId: String? defined in net.corda.core.contracts.UniqueIdentifier[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [345:108] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [346:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeCash' @ [346:22] ==> @JvmOverloads public fun ServiceHub.consumeCash(amount: Amount<Currency>, to: Party = ..., notary: Party): Vault.Update<ContractState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [346:37] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [346:55] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'database' @ [348:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [348:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>?)>?)

'VaultQueryCriteria' @ [349:28] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Vault' @ [349:56] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'CONSUMED' @ [349:74] ==> enum entry CONSUMED defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [350:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [350:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteria' @ [350:64] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`consumed states`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [351:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'results' @ [351:24] ==> val results: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`consumed states`.<anonymous>[LocalVariableDescriptor]

'states' @ [351:32] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [351:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [355:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [357:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [357:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [358:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [358:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [358:46] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [358:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [358:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [358:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [359:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [359:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [359:46] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [359:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [359:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [359:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [360:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [360:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [360:46] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [360:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [360:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [360:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [361:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [361:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [361:46] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [361:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [361:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [361:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'PageSpecification' @ [363:22] ==> public constructor PageSpecification(pageNumber: Int = ..., pageSize: Int = ...) defined in net.corda.core.node.services.vault.PageSpecification[DeserializedClassConstructorDescriptor]

'DEFAULT_PAGE_NUM' @ [363:40] ==> public const val DEFAULT_PAGE_NUM: Int defined in net.corda.core.node.services.vault[DeserializedPropertyDescriptor]

'database' @ [364:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [364:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?)>): AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>?)>?)>

'VaultQueryCriteria' @ [365:28] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Vault' @ [365:56] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'ALL' @ [365:74] ==> enum entry ALL defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [366:40] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [366:54] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria, paging: PageSpecification): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteria' @ [366:77] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`consumed states with count`.<anonymous>[LocalVariableDescriptor]

'paging' @ [366:87] ==> val paging: PageSpecification defined in net.corda.node.services.vault.VaultQueryTests.`consumed states with count`[LocalVariableDescriptor]

'assertThat' @ [367:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'resultsBeforeConsume' @ [367:24] ==> val resultsBeforeConsume: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`consumed states with count`.<anonymous>[LocalVariableDescriptor]

'states' @ [367:45] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [367:53] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [368:13] ==> @CheckReturnValue public open fun assertThat(p0: Long): (AbstractLongAssert<*>..AbstractLongAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'resultsBeforeConsume' @ [368:24] ==> val resultsBeforeConsume: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`consumed states with count`.<anonymous>[LocalVariableDescriptor]

'totalStatesAvailable' @ [368:45] ==> public final val totalStatesAvailable: Long defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [368:67] ==> public open fun isEqualTo(p0: Long): (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractLongAssert[JavaMethodDescriptor]

'database' @ [370:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [370:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault.Update<ContractState>): Vault.Update<ContractState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Update<ContractState>

'services' @ [371:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeCash' @ [371:22] ==> @JvmOverloads public fun ServiceHub.consumeCash(amount: Amount<Currency>, to: Party = ..., notary: Party): Vault.Update<ContractState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [371:37] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [371:55] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'database' @ [373:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [373:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?)>): AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>?)>?)>

'VaultQueryCriteria' @ [374:36] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Vault' @ [374:64] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'CONSUMED' @ [374:82] ==> enum entry CONSUMED defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [375:39] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [375:53] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria, paging: PageSpecification): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'consumedCriteria' @ [375:76] ==> val consumedCriteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`consumed states with count`.<anonymous>[LocalVariableDescriptor]

'paging' @ [375:94] ==> val paging: PageSpecification defined in net.corda.node.services.vault.VaultQueryTests.`consumed states with count`[LocalVariableDescriptor]

'assertThat' @ [376:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'resultsAfterConsume' @ [376:24] ==> val resultsAfterConsume: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`consumed states with count`.<anonymous>[LocalVariableDescriptor]

'states' @ [376:44] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [376:52] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [377:13] ==> @CheckReturnValue public open fun assertThat(p0: Long): (AbstractLongAssert<*>..AbstractLongAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'resultsAfterConsume' @ [377:24] ==> val resultsAfterConsume: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`consumed states with count`.<anonymous>[LocalVariableDescriptor]

'totalStatesAvailable' @ [377:44] ==> public final val totalStatesAvailable: Long defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [377:66] ==> public open fun isEqualTo(p0: Long): (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractLongAssert[JavaMethodDescriptor]

'Test' @ [381:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [383:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [383:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault.Update<ContractState>): Vault.Update<ContractState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Update<ContractState>

'services' @ [384:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [384:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [384:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [384:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [384:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [384:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [385:32] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [385:41] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [386:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [386:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [387:30] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [387:39] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [387:61] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'services' @ [389:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeLinearStates' @ [389:22] ==> public fun ServiceHub.consumeLinearStates(linearStates: List<StateAndRef<LinearState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'linearStates' @ [389:42] ==> val linearStates: Vault<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`all states`.<anonymous>[LocalVariableDescriptor]

'states' @ [389:55] ==> public final val states: Iterable<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'toList' @ [389:62] ==> public fun <T> Iterable<StateAndRef<LinearState>>.toList(): List<StateAndRef<LinearState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>

'DUMMY_NOTARY' @ [389:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [390:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeDeals' @ [390:22] ==> public fun ServiceHub.consumeDeals(dealStates: List<StateAndRef<DealState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'dealStates' @ [390:35] ==> val dealStates: Vault<DealState> defined in net.corda.node.services.vault.VaultQueryTests.`all states`.<anonymous>[LocalVariableDescriptor]

'states' @ [390:46] ==> public final val states: Iterable<StateAndRef<DealState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'filter' @ [390:53] ==> public inline fun <T> Iterable<StateAndRef<DealState>>.filter(predicate: (StateAndRef<DealState>) -> Boolean): List<StateAndRef<DealState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<DealState>

'it' @ [390:62] ==> value-parameter it: StateAndRef<DealState> defined in net.corda.node.services.vault.VaultQueryTests.`all states`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'state' @ [390:65] ==> public final val state: TransactionState<DealState> defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'data' @ [390:71] ==> public final val data: DealState defined in net.corda.core.contracts.TransactionState[DeserializedPropertyDescriptor]

'linearId' @ [390:76] ==> public abstract val linearId: UniqueIdentifier defined in net.corda.finance.contracts.DealState[DeserializedPropertyDescriptor]

'externalId' @ [390:85] ==> public final val externalId: String? defined in net.corda.core.contracts.UniqueIdentifier[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [390:108] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [391:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeCash' @ [391:22] ==> @JvmOverloads public fun ServiceHub.consumeCash(amount: Amount<Currency>, to: Party = ..., notary: Party): Vault.Update<ContractState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [391:37] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [391:55] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'database' @ [393:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [393:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>?)>?)

'VaultQueryCriteria' @ [394:28] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Vault' @ [394:56] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'ALL' @ [394:74] ==> enum entry ALL defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [395:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [395:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteria' @ [395:64] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`all states`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [396:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'results' @ [396:24] ==> val results: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`all states`.<anonymous>[LocalVariableDescriptor]

'states' @ [396:32] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [396:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [400:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [402:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [402:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [403:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [403:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [403:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [403:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [403:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [403:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'VaultQueryCriteria' @ [405:24] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Vault' @ [405:52] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'ALL' @ [405:70] ==> enum entry ALL defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'PageSpecification' @ [406:22] ==> public constructor PageSpecification(pageNumber: Int = ..., pageSize: Int = ...) defined in net.corda.core.node.services.vault.PageSpecification[DeserializedClassConstructorDescriptor]

'DEFAULT_PAGE_NUM' @ [406:40] ==> public const val DEFAULT_PAGE_NUM: Int defined in net.corda.core.node.services.vault[DeserializedPropertyDescriptor]

'database' @ [407:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [407:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?)>): AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>?)>?)>

'vaultQuerySvc' @ [408:40] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [408:54] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria, paging: PageSpecification): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteria' @ [408:77] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`all states with count`[LocalVariableDescriptor]

'paging' @ [408:87] ==> val paging: PageSpecification defined in net.corda.node.services.vault.VaultQueryTests.`all states with count`[LocalVariableDescriptor]

'assertThat' @ [409:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'resultsBeforeConsume' @ [409:24] ==> val resultsBeforeConsume: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`all states with count`.<anonymous>[LocalVariableDescriptor]

'states' @ [409:45] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [409:53] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [410:13] ==> @CheckReturnValue public open fun assertThat(p0: Long): (AbstractLongAssert<*>..AbstractLongAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'resultsBeforeConsume' @ [410:24] ==> val resultsBeforeConsume: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`all states with count`.<anonymous>[LocalVariableDescriptor]

'totalStatesAvailable' @ [410:45] ==> public final val totalStatesAvailable: Long defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [410:67] ==> public open fun isEqualTo(p0: Long): (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractLongAssert[JavaMethodDescriptor]

'database' @ [412:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [412:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault.Update<ContractState>): Vault.Update<ContractState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Update<ContractState>

'services' @ [413:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeCash' @ [413:22] ==> @JvmOverloads public fun ServiceHub.consumeCash(amount: Amount<Currency>, to: Party = ..., notary: Party): Vault.Update<ContractState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [413:37] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [413:55] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'database' @ [415:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [415:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?)>): AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>?)>?)>

'vaultQuerySvc' @ [416:39] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [416:53] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria, paging: PageSpecification): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteria' @ [416:76] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`all states with count`[LocalVariableDescriptor]

'paging' @ [416:86] ==> val paging: PageSpecification defined in net.corda.node.services.vault.VaultQueryTests.`all states with count`[LocalVariableDescriptor]

'assertThat' @ [417:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'resultsAfterConsume' @ [417:24] ==> val resultsAfterConsume: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`all states with count`.<anonymous>[LocalVariableDescriptor]

'states' @ [417:44] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [417:52] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [418:13] ==> @CheckReturnValue public open fun assertThat(p0: Long): (AbstractLongAssert<*>..AbstractLongAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'resultsAfterConsume' @ [418:24] ==> val resultsAfterConsume: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`all states with count`.<anonymous>[LocalVariableDescriptor]

'totalStatesAvailable' @ [418:44] ==> public final val totalStatesAvailable: Long defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [418:66] ==> public open fun isEqualTo(p0: Long): (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractLongAssert[JavaMethodDescriptor]

'Test' @ [422:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [424:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [424:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<DealState>): Vault<DealState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<DealState>

'services' @ [425:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [425:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [425:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [425:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'CASH_NOTARY' @ [425:72] ==> public final val CASH_NOTARY: Party defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'Random' @ [425:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [426:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [426:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [427:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [427:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [427:44] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'database' @ [429:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [429:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>?)>?)

'VaultQueryCriteria' @ [431:28] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'listOf' @ [431:56] ==> public fun <T> listOf(element: Party): List<Party> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Party

'CASH_NOTARY' @ [431:63] ==> public final val CASH_NOTARY: Party defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'vaultQuerySvc' @ [432:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [432:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteria' @ [432:64] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states by notary`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [434:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'results' @ [434:24] ==> val results: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states by notary`.<anonymous>[LocalVariableDescriptor]

'states' @ [434:32] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [434:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [438:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [440:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [440:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<DealState>): Vault<DealState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<DealState>

'identitySvc' @ [441:13] ==> public final val identitySvc: IdentityService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'verifyAndRegisterIdentity' @ [441:25] ==> public abstract fun verifyAndRegisterIdentity(identity: PartyAndCertificate): PartyAndCertificate? defined in net.corda.core.node.services.IdentityService[DeserializedSimpleFunctionDescriptor]

'BIG_CORP_IDENTITY' @ [441:51] ==> public val BIG_CORP_IDENTITY: PartyAndCertificate defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [443:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [443:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [443:77] ==> public fun <T> listOf(vararg elements: Party): List<Party> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Party

'MEGA_CORP' @ [443:84] ==> public val MEGA_CORP: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'MINI_CORP' @ [443:95] ==> public val MINI_CORP: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [444:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [444:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [444:44] ==> public fun <T> listOf(element: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'listOf' @ [444:74] ==> public fun <T> listOf(vararg elements: Party): List<Party> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Party

'MEGA_CORP' @ [444:81] ==> public val MEGA_CORP: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'BIG_CORP' @ [444:92] ==> public val BIG_CORP: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [445:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [445:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [445:44] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'listOf' @ [445:81] ==> public fun <T> listOf(element: Party): List<Party> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Party

'BIG_CORP' @ [445:88] ==> public val BIG_CORP: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'database' @ [447:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [447:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>?)>?)

'LinearStateQueryCriteria' @ [448:28] ==> @JvmOverloads public constructor LinearStateQueryCriteria(participants: List<AbstractParty>? = ..., uuid: List<UUID>? = ..., externalId: List<String>? = ..., status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria[DeserializedClassConstructorDescriptor]

'listOf' @ [448:68] ==> public fun <T> listOf(element: Party): List<Party> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Party

'BIG_CORP' @ [448:75] ==> public val BIG_CORP: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'vaultQuerySvc' @ [449:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [449:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteria' @ [449:64] ==> val criteria: QueryCriteria.LinearStateQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear states for single participant`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [450:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'results' @ [450:24] ==> val results: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear states for single participant`.<anonymous>[LocalVariableDescriptor]

'states' @ [450:32] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [450:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [454:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [456:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [456:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<DealState>): Vault<DealState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<DealState>

'identitySvc' @ [457:13] ==> public final val identitySvc: IdentityService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'verifyAndRegisterIdentity' @ [457:25] ==> public abstract fun verifyAndRegisterIdentity(identity: PartyAndCertificate): PartyAndCertificate? defined in net.corda.core.node.services.IdentityService[DeserializedSimpleFunctionDescriptor]

'BIG_CORP_IDENTITY' @ [457:51] ==> public val BIG_CORP_IDENTITY: PartyAndCertificate defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [459:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [459:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [459:77] ==> public fun <T> listOf(vararg elements: Party): List<Party> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Party

'MEGA_CORP' @ [459:84] ==> public val MEGA_CORP: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'MINI_CORP' @ [459:95] ==> public val MINI_CORP: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [460:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [460:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [460:44] ==> public fun <T> listOf(element: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'listOf' @ [460:74] ==> public fun <T> listOf(vararg elements: Party): List<Party> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Party

'MEGA_CORP' @ [460:81] ==> public val MEGA_CORP: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'BIG_CORP' @ [460:92] ==> public val BIG_CORP: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [461:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [461:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [461:44] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'listOf' @ [461:81] ==> public fun <T> listOf(element: Party): List<Party> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Party

'MEGA_CORP' @ [461:88] ==> public val MEGA_CORP: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'database' @ [463:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [463:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>?)>?)

'LinearStateQueryCriteria' @ [465:28] ==> @JvmOverloads public constructor LinearStateQueryCriteria(participants: List<AbstractParty>? = ..., uuid: List<UUID>? = ..., externalId: List<String>? = ..., status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria[DeserializedClassConstructorDescriptor]

'listOf' @ [465:68] ==> public fun <T> listOf(vararg elements: Party): List<Party> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Party

'BIG_CORP' @ [465:75] ==> public val BIG_CORP: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'MINI_CORP' @ [465:85] ==> public val MINI_CORP: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'vaultQuerySvc' @ [466:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [466:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteria' @ [466:64] ==> val criteria: QueryCriteria.LinearStateQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear states for two participants`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [469:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'results' @ [469:24] ==> val results: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear states for two participants`.<anonymous>[LocalVariableDescriptor]

'states' @ [469:32] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [469:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [473:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'component1' @ [475:14] ==> public final operator fun component1(): (UUID..UUID?) defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor]

'component2' @ [475:23] ==> public final operator fun component2(): (UUID..UUID?) defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor]

'database' @ [476:13] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [476:22] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Pair<(UUID..UUID?), (UUID..UUID?)>): Pair<(UUID..UUID?), (UUID..UUID?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Pair<(java.util.UUID..java.util.UUID?), (java.util.UUID..java.util.UUID?)>

'services' @ [477:36] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [477:45] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [477:70] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [477:79] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'CASH_NOTARY' @ [477:95] ==> public final val CASH_NOTARY: Party defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'Random' @ [477:116] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'states' @ [477:128] ==> public final val states: Iterable<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'toList' @ [477:135] ==> public fun <T> Iterable<StateAndRef<Cash.State>>.toList(): List<StateAndRef<Cash.State>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<State>

'vaultSvc' @ [478:17] ==> public final val vaultSvc: VaultService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'softLockReserve' @ [478:26] ==> public abstract fun softLockReserve(lockId: UUID, stateRefs: NonEmptySet<StateRef>): Unit defined in net.corda.core.node.services.VaultService[DeserializedSimpleFunctionDescriptor]

'randomUUID' @ [478:47] ==> public open fun randomUUID(): (UUID..UUID?) defined in java.util.UUID[JavaMethodDescriptor]

'NonEmptySet' @ [478:61] ==> public companion object defined in net.corda.core.utilities.NonEmptySet[FakeCallableDescriptorForObject]

'of' @ [478:73] ==> @JvmStatic public final fun <T> of(first: StateRef, second: StateRef, vararg rest: StateRef): NonEmptySet<StateRef> defined in net.corda.core.utilities.NonEmptySet.Companion[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateRef

'issuedStates' @ [478:76] ==> val issuedStates: List<StateAndRef<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`.<anonymous>[LocalVariableDescriptor]

'ref' @ [478:92] ==> public final val ref: StateRef defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'issuedStates' @ [478:97] ==> val issuedStates: List<StateAndRef<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`.<anonymous>[LocalVariableDescriptor]

'ref' @ [478:113] ==> public final val ref: StateRef defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'issuedStates' @ [478:118] ==> val issuedStates: List<StateAndRef<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`.<anonymous>[LocalVariableDescriptor]

'ref' @ [478:134] ==> public final val ref: StateRef defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'randomUUID' @ [479:36] ==> public open fun randomUUID(): (UUID..UUID?) defined in java.util.UUID[JavaMethodDescriptor]

'vaultSvc' @ [480:17] ==> public final val vaultSvc: VaultService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'softLockReserve' @ [480:26] ==> public abstract fun softLockReserve(lockId: UUID, stateRefs: NonEmptySet<StateRef>): Unit defined in net.corda.core.node.services.VaultService[DeserializedSimpleFunctionDescriptor]

'lockId1' @ [480:42] ==> val lockId1: (UUID..UUID?) defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`.<anonymous>[LocalVariableDescriptor]

'NonEmptySet' @ [480:51] ==> public companion object defined in net.corda.core.utilities.NonEmptySet[FakeCallableDescriptorForObject]

'of' @ [480:63] ==> @JvmStatic public final fun <T> of(first: StateRef, second: StateRef, vararg rest: StateRef): NonEmptySet<StateRef> defined in net.corda.core.utilities.NonEmptySet.Companion[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateRef

'issuedStates' @ [480:66] ==> val issuedStates: List<StateAndRef<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`.<anonymous>[LocalVariableDescriptor]

'ref' @ [480:82] ==> public final val ref: StateRef defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'issuedStates' @ [480:87] ==> val issuedStates: List<StateAndRef<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`.<anonymous>[LocalVariableDescriptor]

'ref' @ [480:103] ==> public final val ref: StateRef defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'randomUUID' @ [481:36] ==> public open fun randomUUID(): (UUID..UUID?) defined in java.util.UUID[JavaMethodDescriptor]

'vaultSvc' @ [482:17] ==> public final val vaultSvc: VaultService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'softLockReserve' @ [482:26] ==> public abstract fun softLockReserve(lockId: UUID, stateRefs: NonEmptySet<StateRef>): Unit defined in net.corda.core.node.services.VaultService[DeserializedSimpleFunctionDescriptor]

'lockId2' @ [482:42] ==> val lockId2: (UUID..UUID?) defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`.<anonymous>[LocalVariableDescriptor]

'NonEmptySet' @ [482:51] ==> public companion object defined in net.corda.core.utilities.NonEmptySet[FakeCallableDescriptorForObject]

'of' @ [482:63] ==> @JvmStatic public final fun <T> of(element: StateRef): NonEmptySet<StateRef> defined in net.corda.core.utilities.NonEmptySet.Companion[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateRef

'issuedStates' @ [482:66] ==> val issuedStates: List<StateAndRef<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`.<anonymous>[LocalVariableDescriptor]

'ref' @ [482:82] ==> public final val ref: StateRef defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'Pair' @ [483:17] ==> public constructor Pair<out A, out B>(first: (UUID..UUID?), second: (UUID..UUID?)) defined in kotlin.Pair[DeserializedClassConstructorDescriptor]
Inferred types:
    <out A> -> (java.util.UUID..java.util.UUID?)
    <out B> -> (java.util.UUID..java.util.UUID?)

'lockId1' @ [483:22] ==> val lockId1: (UUID..UUID?) defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`.<anonymous>[LocalVariableDescriptor]

'lockId2' @ [483:31] ==> val lockId2: (UUID..UUID?) defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`.<anonymous>[LocalVariableDescriptor]

'database' @ [485:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [485:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault.Page<ContractState>): Vault.Page<ContractState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Page<ContractState>

'VaultQueryCriteria' @ [487:37] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'SoftLockingCondition' @ [487:79] ==> public constructor SoftLockingCondition(type: QueryCriteria.SoftLockingType, lockIds: List<UUID> = ...) defined in net.corda.core.node.services.vault.QueryCriteria.SoftLockingCondition[DeserializedClassConstructorDescriptor]

'UNLOCKED_ONLY' @ [487:116] ==> enum entry UNLOCKED_ONLY defined in net.corda.core.node.services.vault.QueryCriteria.SoftLockingType[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [488:36] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [488:50] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteriaExclusive' @ [488:73] ==> val criteriaExclusive: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [489:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'resultsExclusive' @ [489:24] ==> val resultsExclusive: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`.<anonymous>[LocalVariableDescriptor]

'states' @ [489:41] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [489:49] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'VaultQueryCriteria' @ [492:38] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'SoftLockingCondition' @ [492:80] ==> public constructor SoftLockingCondition(type: QueryCriteria.SoftLockingType, lockIds: List<UUID> = ...) defined in net.corda.core.node.services.vault.QueryCriteria.SoftLockingCondition[DeserializedClassConstructorDescriptor]

'LOCKED_ONLY' @ [492:117] ==> enum entry LOCKED_ONLY defined in net.corda.core.node.services.vault.QueryCriteria.SoftLockingType[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [493:37] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [493:51] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteriaLockedOnly' @ [493:74] ==> val criteriaLockedOnly: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [494:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'resultsLockedOnly' @ [494:24] ==> val resultsLockedOnly: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`.<anonymous>[LocalVariableDescriptor]

'states' @ [494:42] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [494:50] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'VaultQueryCriteria' @ [497:36] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'SoftLockingCondition' @ [497:78] ==> public constructor SoftLockingCondition(type: QueryCriteria.SoftLockingType, lockIds: List<UUID> = ...) defined in net.corda.core.node.services.vault.QueryCriteria.SoftLockingCondition[DeserializedClassConstructorDescriptor]

'SPECIFIED' @ [497:115] ==> enum entry SPECIFIED defined in net.corda.core.node.services.vault.QueryCriteria.SoftLockingType[FakeCallableDescriptorForObject]

'listOf' @ [497:126] ==> public fun <T> listOf(element: (UUID..UUID?)): List<(UUID..UUID?)> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (java.util.UUID..java.util.UUID?)

'lockId1' @ [497:133] ==> val lockId1: (UUID..UUID?) defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`[LocalVariableDescriptor]

'vaultQuerySvc' @ [498:35] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [498:49] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteriaByLockId' @ [498:72] ==> val criteriaByLockId: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [499:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'resultsByLockId' @ [499:24] ==> val resultsByLockId: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`.<anonymous>[LocalVariableDescriptor]

'states' @ [499:40] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [499:48] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'VaultQueryCriteria' @ [502:37] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'SoftLockingCondition' @ [502:79] ==> public constructor SoftLockingCondition(type: QueryCriteria.SoftLockingType, lockIds: List<UUID> = ...) defined in net.corda.core.node.services.vault.QueryCriteria.SoftLockingCondition[DeserializedClassConstructorDescriptor]

'SPECIFIED' @ [502:116] ==> enum entry SPECIFIED defined in net.corda.core.node.services.vault.QueryCriteria.SoftLockingType[FakeCallableDescriptorForObject]

'listOf' @ [502:127] ==> public fun <T> listOf(vararg elements: (UUID..UUID?)): List<(UUID..UUID?)> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (java.util.UUID..java.util.UUID?)

'lockId1' @ [502:134] ==> val lockId1: (UUID..UUID?) defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`[LocalVariableDescriptor]

'lockId2' @ [502:143] ==> val lockId2: (UUID..UUID?) defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`[LocalVariableDescriptor]

'vaultQuerySvc' @ [503:36] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [503:50] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteriaByLockIds' @ [503:73] ==> val criteriaByLockIds: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [504:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'resultsByLockIds' @ [504:24] ==> val resultsByLockIds: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`.<anonymous>[LocalVariableDescriptor]

'states' @ [504:41] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [504:49] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'VaultQueryCriteria' @ [507:47] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'SoftLockingCondition' @ [507:89] ==> public constructor SoftLockingCondition(type: QueryCriteria.SoftLockingType, lockIds: List<UUID> = ...) defined in net.corda.core.node.services.vault.QueryCriteria.SoftLockingCondition[DeserializedClassConstructorDescriptor]

'UNLOCKED_AND_SPECIFIED' @ [507:126] ==> enum entry UNLOCKED_AND_SPECIFIED defined in net.corda.core.node.services.vault.QueryCriteria.SoftLockingType[FakeCallableDescriptorForObject]

'listOf' @ [507:150] ==> public fun <T> listOf(element: (UUID..UUID?)): List<(UUID..UUID?)> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (java.util.UUID..java.util.UUID?)

'lockId2' @ [507:157] ==> val lockId2: (UUID..UUID?) defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`[LocalVariableDescriptor]

'vaultQuerySvc' @ [508:47] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [508:61] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteriaUnlockedAndByLockId' @ [508:84] ==> val criteriaUnlockedAndByLockId: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [509:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'resultsUnlockedAndByLockIds' @ [509:24] ==> val resultsUnlockedAndByLockIds: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`.<anonymous>[LocalVariableDescriptor]

'states' @ [509:52] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [509:60] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'expectedEx' @ [512:13] ==> public final val expectedEx: ExpectedException defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'expect' @ [512:24] ==> public open fun expect(p0: (Class<out (Throwable..Throwable?)>..Class<out (Throwable..Throwable?)>?)): Unit defined in org.junit.rules.ExpectedException[JavaMethodDescriptor]

'IllegalArgumentException' @ [512:31] ==> public final fun <init>(): IllegalArgumentException /* = IllegalArgumentException */ defined in kotlin.IllegalArgumentException[TypeAliasConstructorDescriptorImpl]

'java' @ [512:63] ==> public val <T> KClass<IllegalArgumentException /* = IllegalArgumentException */>.java: Class<IllegalArgumentException /* = IllegalArgumentException */> defined in kotlin.jvm[DeserializedPropertyDescriptor]
Inferred types:
    <T> -> IllegalArgumentException

'expectedEx' @ [513:13] ==> public final val expectedEx: ExpectedException defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'expectMessage' @ [513:24] ==> public open fun expectMessage(p0: (String..String?)): Unit defined in org.junit.rules.ExpectedException[JavaMethodDescriptor]

'VaultQueryCriteria' @ [514:41] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'SoftLockingCondition' @ [514:83] ==> public constructor SoftLockingCondition(type: QueryCriteria.SoftLockingType, lockIds: List<UUID> = ...) defined in net.corda.core.node.services.vault.QueryCriteria.SoftLockingCondition[DeserializedClassConstructorDescriptor]

'UNLOCKED_AND_SPECIFIED' @ [514:120] ==> enum entry UNLOCKED_AND_SPECIFIED defined in net.corda.core.node.services.vault.QueryCriteria.SoftLockingType[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [515:13] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [515:27] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteriaMissingLockId' @ [515:50] ==> val criteriaMissingLockId: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states with soft locking`.<anonymous>[LocalVariableDescriptor]

'Test' @ [519:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [521:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [521:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [522:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [522:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [522:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [522:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [522:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [522:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [523:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [523:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [523:47] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [523:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [523:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [523:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [524:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [524:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'SWISS_FRANCS' @ [524:47] ==> public val Int.SWISS_FRANCS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [524:61] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [524:77] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [524:97] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [526:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [526:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>?)

'builder' @ [527:37] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String?>): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String?> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> ColumnPredicateExpression<PersistentCashState, String?>

'CashSchemaV1' @ [527:47] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [527:60] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'currency' @ [527:81] ==> @field:Column public final var currency: String defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'equal' @ [527:90] ==> public final fun <O, R> KProperty1<CashSchemaV1.PersistentCashState, String?>.equal(value: (String..String?)): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String?> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R> -> (kotlin.String..kotlin.String?)

'GBP' @ [527:96] ==> @field:JvmField public val GBP: Currency defined in net.corda.finance[DeserializedPropertyDescriptor]

'currencyCode' @ [527:100] ==> public final val Currency.currencyCode: (String..String?)[MyPropertyDescriptor]

'VaultCustomQueryCriteria' @ [528:28] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CashSchemaV1.PersistentCashState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCashState

'logicalExpression' @ [528:53] ==> val logicalExpression: CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String?> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator EQUAL`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [529:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [529:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<Cash.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'criteria' @ [529:61] ==> val criteria: QueryCriteria.VaultCustomQueryCriteria<CashSchemaV1.PersistentCashState> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator EQUAL`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [530:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..List<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [530:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator EQUAL`.<anonymous>[LocalVariableDescriptor]

'states' @ [530:32] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [530:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [534:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [536:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [536:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [537:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [537:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [537:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [537:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [537:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [537:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [538:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [538:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [538:47] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [538:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [538:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [538:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [539:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [539:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'SWISS_FRANCS' @ [539:47] ==> public val Int.SWISS_FRANCS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [539:61] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [539:77] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [539:97] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [541:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [541:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>?)

'builder' @ [542:37] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String?>): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String?> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> ColumnPredicateExpression<PersistentCashState, String?>

'CashSchemaV1' @ [542:47] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [542:60] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'currency' @ [542:81] ==> @field:Column public final var currency: String defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'notEqual' @ [542:90] ==> public final fun <O, R> KProperty1<CashSchemaV1.PersistentCashState, String?>.notEqual(value: (String..String?)): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String?> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R> -> (kotlin.String..kotlin.String?)

'GBP' @ [542:99] ==> @field:JvmField public val GBP: Currency defined in net.corda.finance[DeserializedPropertyDescriptor]

'currencyCode' @ [542:103] ==> public final val Currency.currencyCode: (String..String?)[MyPropertyDescriptor]

'VaultCustomQueryCriteria' @ [543:28] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CashSchemaV1.PersistentCashState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCashState

'logicalExpression' @ [543:53] ==> val logicalExpression: CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String?> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator NOT EQUAL`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [544:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [544:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<Cash.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'criteria' @ [544:61] ==> val criteria: QueryCriteria.VaultCustomQueryCriteria<CashSchemaV1.PersistentCashState> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator NOT EQUAL`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [545:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..List<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [545:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator NOT EQUAL`.<anonymous>[LocalVariableDescriptor]

'states' @ [545:32] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [545:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [549:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [551:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [551:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [552:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [552:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [552:45] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [552:54] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [552:70] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [552:90] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [553:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [553:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [553:46] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [553:54] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [553:70] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [553:90] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [554:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [554:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'SWISS_FRANCS' @ [554:47] ==> public val Int.SWISS_FRANCS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [554:61] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [554:77] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [554:97] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [556:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [556:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>?)

'builder' @ [557:37] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, Long>): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> ColumnPredicateExpression<PersistentCashState, Long>

'CashSchemaV1' @ [557:47] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [557:60] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'pennies' @ [557:81] ==> @field:Column public final var pennies: Long defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'greaterThan' @ [557:89] ==> public final fun <O, R : Comparable<Long>> KProperty1<CashSchemaV1.PersistentCashState, Long?>.greaterThan(value: Long): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R : Comparable<R>> -> Long

'VaultCustomQueryCriteria' @ [558:28] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CashSchemaV1.PersistentCashState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCashState

'logicalExpression' @ [558:53] ==> val logicalExpression: CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator GREATER_THAN`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [559:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [559:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<Cash.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'criteria' @ [559:61] ==> val criteria: QueryCriteria.VaultCustomQueryCriteria<CashSchemaV1.PersistentCashState> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator GREATER_THAN`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [560:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..List<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [560:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator GREATER_THAN`.<anonymous>[LocalVariableDescriptor]

'states' @ [560:32] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [560:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [564:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [566:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [566:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [567:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [567:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [567:45] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [567:54] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [567:70] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [567:90] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [568:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [568:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [568:46] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [568:54] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [568:70] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [568:90] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [569:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [569:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'SWISS_FRANCS' @ [569:47] ==> public val Int.SWISS_FRANCS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [569:61] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [569:77] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [569:97] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [571:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [571:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>?)

'builder' @ [572:37] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, Long>): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> ColumnPredicateExpression<PersistentCashState, Long>

'CashSchemaV1' @ [572:47] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [572:60] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'pennies' @ [572:81] ==> @field:Column public final var pennies: Long defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'greaterThanOrEqual' @ [572:89] ==> public final fun <O, R : Comparable<Long>> KProperty1<CashSchemaV1.PersistentCashState, Long?>.greaterThanOrEqual(value: Long): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R : Comparable<R>> -> Long

'VaultCustomQueryCriteria' @ [573:28] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CashSchemaV1.PersistentCashState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCashState

'logicalExpression' @ [573:53] ==> val logicalExpression: CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator GREATER_THAN_OR_EQUAL`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [574:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [574:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<Cash.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'criteria' @ [574:61] ==> val criteria: QueryCriteria.VaultCustomQueryCriteria<CashSchemaV1.PersistentCashState> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator GREATER_THAN_OR_EQUAL`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [575:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..List<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [575:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator GREATER_THAN_OR_EQUAL`.<anonymous>[LocalVariableDescriptor]

'states' @ [575:32] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [575:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [579:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [581:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [581:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [582:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [582:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [582:45] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [582:54] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [582:70] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [582:90] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [583:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [583:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [583:46] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [583:54] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [583:70] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [583:90] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [584:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [584:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'SWISS_FRANCS' @ [584:47] ==> public val Int.SWISS_FRANCS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [584:61] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [584:77] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [584:97] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [586:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [586:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>?)

'builder' @ [587:37] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, Long>): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> ColumnPredicateExpression<PersistentCashState, Long>

'CashSchemaV1' @ [587:47] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [587:60] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'pennies' @ [587:81] ==> @field:Column public final var pennies: Long defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'lessThan' @ [587:89] ==> public final fun <O, R : Comparable<Long>> KProperty1<CashSchemaV1.PersistentCashState, Long?>.lessThan(value: Long): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R : Comparable<R>> -> Long

'VaultCustomQueryCriteria' @ [588:28] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CashSchemaV1.PersistentCashState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCashState

'logicalExpression' @ [588:53] ==> val logicalExpression: CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator LESS_THAN`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [589:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [589:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<Cash.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'criteria' @ [589:61] ==> val criteria: QueryCriteria.VaultCustomQueryCriteria<CashSchemaV1.PersistentCashState> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator LESS_THAN`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [590:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..List<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [590:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator LESS_THAN`.<anonymous>[LocalVariableDescriptor]

'states' @ [590:32] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [590:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [594:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [596:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [596:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [597:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [597:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [597:45] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [597:54] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [597:70] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [597:90] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [598:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [598:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [598:46] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [598:54] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [598:70] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [598:90] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [599:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [599:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'SWISS_FRANCS' @ [599:47] ==> public val Int.SWISS_FRANCS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [599:61] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [599:77] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [599:97] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [601:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [601:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>?)

'builder' @ [602:37] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, Long>): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> ColumnPredicateExpression<PersistentCashState, Long>

'CashSchemaV1' @ [602:47] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [602:60] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'pennies' @ [602:81] ==> @field:Column public final var pennies: Long defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'lessThanOrEqual' @ [602:89] ==> public final fun <O, R : Comparable<Long>> KProperty1<CashSchemaV1.PersistentCashState, Long?>.lessThanOrEqual(value: Long): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R : Comparable<R>> -> Long

'VaultCustomQueryCriteria' @ [603:28] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CashSchemaV1.PersistentCashState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCashState

'logicalExpression' @ [603:53] ==> val logicalExpression: CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator LESS_THAN_OR_EQUAL`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [604:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [604:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<Cash.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'criteria' @ [604:61] ==> val criteria: QueryCriteria.VaultCustomQueryCriteria<CashSchemaV1.PersistentCashState> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator LESS_THAN_OR_EQUAL`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [605:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..List<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [605:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator LESS_THAN_OR_EQUAL`.<anonymous>[LocalVariableDescriptor]

'states' @ [605:32] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [605:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [609:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [611:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [611:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [612:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [612:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [612:45] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [612:54] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [612:70] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [612:90] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [613:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [613:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [613:46] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [613:54] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [613:70] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [613:90] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [614:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [614:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'SWISS_FRANCS' @ [614:47] ==> public val Int.SWISS_FRANCS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [614:61] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [614:77] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [614:97] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [616:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [616:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>?)

'builder' @ [617:37] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, Long>): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> ColumnPredicateExpression<PersistentCashState, Long>

'CashSchemaV1' @ [617:47] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [617:60] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'pennies' @ [617:81] ==> @field:Column public final var pennies: Long defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'between' @ [617:89] ==> public final fun <O, R : Comparable<Long>> KProperty1<CashSchemaV1.PersistentCashState, Long?>.between(from: Long, to: Long): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R : Comparable<R>> -> Long

'VaultCustomQueryCriteria' @ [618:28] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CashSchemaV1.PersistentCashState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCashState

'logicalExpression' @ [618:53] ==> val logicalExpression: CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator BETWEEN`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [619:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [619:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<Cash.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'criteria' @ [619:61] ==> val criteria: QueryCriteria.VaultCustomQueryCriteria<CashSchemaV1.PersistentCashState> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator BETWEEN`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [620:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..List<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [620:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator BETWEEN`.<anonymous>[LocalVariableDescriptor]

'states' @ [620:32] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [620:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [624:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [626:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [626:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [627:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [627:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [627:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [627:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [627:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [627:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [628:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [628:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [628:47] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [628:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [628:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [628:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [629:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [629:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'SWISS_FRANCS' @ [629:47] ==> public val Int.SWISS_FRANCS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [629:61] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [629:77] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [629:97] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [631:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [631:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>?)

'listOf' @ [632:30] ==> public fun <T> listOf(vararg elements: (String..String?)): List<(String..String?)> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (kotlin.String..kotlin.String?)

'CHF' @ [632:37] ==> @field:JvmField public val CHF: Currency defined in net.corda.finance[DeserializedPropertyDescriptor]

'currencyCode' @ [632:41] ==> public final val Currency.currencyCode: (String..String?)[MyPropertyDescriptor]

'GBP' @ [632:55] ==> @field:JvmField public val GBP: Currency defined in net.corda.finance[DeserializedPropertyDescriptor]

'currencyCode' @ [632:59] ==> public final val Currency.currencyCode: (String..String?)[MyPropertyDescriptor]

'builder' @ [633:37] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String>): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> ColumnPredicateExpression<PersistentCashState, String>

'CashSchemaV1' @ [633:47] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [633:60] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'currency' @ [633:81] ==> @field:Column public final var currency: String defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'`in`' @ [633:90] ==> public final fun <O, R : Comparable<String>> KProperty1<CashSchemaV1.PersistentCashState, String?>.`in`(collection: Collection<String>): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R : Comparable<R>> -> String

'currencies' @ [633:95] ==> val currencies: List<(String..String?)> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator IN`.<anonymous>[LocalVariableDescriptor]

'VaultCustomQueryCriteria' @ [634:28] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CashSchemaV1.PersistentCashState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCashState

'logicalExpression' @ [634:53] ==> val logicalExpression: CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator IN`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [635:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [635:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<Cash.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'criteria' @ [635:61] ==> val criteria: QueryCriteria.VaultCustomQueryCriteria<CashSchemaV1.PersistentCashState> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator IN`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [636:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..List<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [636:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator IN`.<anonymous>[LocalVariableDescriptor]

'states' @ [636:32] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [636:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [640:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [642:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [642:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [643:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [643:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [643:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [643:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [643:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [643:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [644:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [644:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [644:47] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [644:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [644:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [644:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [645:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [645:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'SWISS_FRANCS' @ [645:47] ==> public val Int.SWISS_FRANCS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [645:61] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [645:77] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [645:97] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [647:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [647:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>?)

'listOf' @ [648:30] ==> public fun <T> listOf(vararg elements: (String..String?)): List<(String..String?)> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (kotlin.String..kotlin.String?)

'CHF' @ [648:37] ==> @field:JvmField public val CHF: Currency defined in net.corda.finance[DeserializedPropertyDescriptor]

'currencyCode' @ [648:41] ==> public final val Currency.currencyCode: (String..String?)[MyPropertyDescriptor]

'GBP' @ [648:55] ==> @field:JvmField public val GBP: Currency defined in net.corda.finance[DeserializedPropertyDescriptor]

'currencyCode' @ [648:59] ==> public final val Currency.currencyCode: (String..String?)[MyPropertyDescriptor]

'builder' @ [649:37] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String>): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> ColumnPredicateExpression<PersistentCashState, String>

'CashSchemaV1' @ [649:47] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [649:60] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'currency' @ [649:81] ==> @field:Column public final var currency: String defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'notIn' @ [649:90] ==> public final fun <O, R : Comparable<String>> KProperty1<CashSchemaV1.PersistentCashState, String?>.notIn(collection: Collection<String>): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R : Comparable<R>> -> String

'currencies' @ [649:96] ==> val currencies: List<(String..String?)> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator NOT IN`.<anonymous>[LocalVariableDescriptor]

'VaultCustomQueryCriteria' @ [650:28] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CashSchemaV1.PersistentCashState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCashState

'logicalExpression' @ [650:53] ==> val logicalExpression: CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator NOT IN`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [651:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [651:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<Cash.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'criteria' @ [651:61] ==> val criteria: QueryCriteria.VaultCustomQueryCriteria<CashSchemaV1.PersistentCashState> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator NOT IN`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [652:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..List<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [652:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator NOT IN`.<anonymous>[LocalVariableDescriptor]

'states' @ [652:32] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [652:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [656:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [658:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [658:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [659:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [659:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [659:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [659:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [659:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [659:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [660:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [660:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [660:47] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [660:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [660:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [660:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [661:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [661:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'SWISS_FRANCS' @ [661:47] ==> public val Int.SWISS_FRANCS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [661:61] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [661:77] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [661:97] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [663:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [663:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>?)

'builder' @ [664:37] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String>): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> ColumnPredicateExpression<PersistentCashState, String>

'CashSchemaV1' @ [664:47] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [664:60] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'currency' @ [664:81] ==> @field:Column public final var currency: String defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'like' @ [664:90] ==> public final fun <O> KProperty1<CashSchemaV1.PersistentCashState, String?>.like(string: String): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState

'VaultCustomQueryCriteria' @ [665:28] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CashSchemaV1.PersistentCashState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCashState

'logicalExpression' @ [665:53] ==> val logicalExpression: CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator LIKE`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [666:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [666:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<Cash.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'criteria' @ [666:61] ==> val criteria: QueryCriteria.VaultCustomQueryCriteria<CashSchemaV1.PersistentCashState> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator LIKE`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [667:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..List<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [667:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator LIKE`.<anonymous>[LocalVariableDescriptor]

'states' @ [667:32] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [667:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [671:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [673:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [673:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [674:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [674:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [674:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [674:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [674:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [674:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [675:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [675:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [675:47] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [675:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [675:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [675:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [676:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [676:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'SWISS_FRANCS' @ [676:47] ==> public val Int.SWISS_FRANCS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [676:61] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [676:77] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [676:97] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [678:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [678:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>?)

'builder' @ [679:37] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String>): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> ColumnPredicateExpression<PersistentCashState, String>

'CashSchemaV1' @ [679:47] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [679:60] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'currency' @ [679:81] ==> @field:Column public final var currency: String defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'notLike' @ [679:90] ==> public final fun <O> KProperty1<CashSchemaV1.PersistentCashState, String?>.notLike(string: String): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState

'VaultCustomQueryCriteria' @ [680:28] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CashSchemaV1.PersistentCashState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCashState

'logicalExpression' @ [680:53] ==> val logicalExpression: CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator NOT LIKE`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [681:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [681:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<Cash.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'criteria' @ [681:61] ==> val criteria: QueryCriteria.VaultCustomQueryCriteria<CashSchemaV1.PersistentCashState> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator NOT LIKE`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [682:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..List<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [682:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator NOT LIKE`.<anonymous>[LocalVariableDescriptor]

'states' @ [682:32] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [682:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [686:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [688:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [688:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [689:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [689:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [689:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [689:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [689:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [689:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [690:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [690:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [690:47] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [690:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [690:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [690:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [691:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [691:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'SWISS_FRANCS' @ [691:47] ==> public val Int.SWISS_FRANCS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [691:61] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [691:77] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [691:97] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [693:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [693:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>?)

'builder' @ [694:37] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String>): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> ColumnPredicateExpression<PersistentCashState, String>

'CashSchemaV1' @ [694:47] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [694:60] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'issuerParty' @ [694:81] ==> @field:Column public final var issuerParty: String defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'isNull' @ [694:93] ==> public final fun <O, R> KProperty1<CashSchemaV1.PersistentCashState, String?>.isNull(): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R> -> String

'VaultCustomQueryCriteria' @ [695:28] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CashSchemaV1.PersistentCashState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCashState

'logicalExpression' @ [695:53] ==> val logicalExpression: CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator IS_NULL`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [696:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [696:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<Cash.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'criteria' @ [696:61] ==> val criteria: QueryCriteria.VaultCustomQueryCriteria<CashSchemaV1.PersistentCashState> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator IS_NULL`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [697:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..List<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [697:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator IS_NULL`.<anonymous>[LocalVariableDescriptor]

'states' @ [697:32] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [697:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [701:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [703:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [703:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [704:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [704:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [704:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [704:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [704:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [704:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [705:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [705:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [705:47] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [705:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [705:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [705:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [706:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [706:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'SWISS_FRANCS' @ [706:47] ==> public val Int.SWISS_FRANCS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [706:61] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [706:77] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [706:97] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [708:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [708:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>?)

'builder' @ [709:37] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String>): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> ColumnPredicateExpression<PersistentCashState, String>

'CashSchemaV1' @ [709:47] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [709:60] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'issuerParty' @ [709:81] ==> @field:Column public final var issuerParty: String defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'notNull' @ [709:93] ==> public final fun <O, R> KProperty1<CashSchemaV1.PersistentCashState, String?>.notNull(): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R> -> String

'VaultCustomQueryCriteria' @ [710:28] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CashSchemaV1.PersistentCashState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCashState

'logicalExpression' @ [710:53] ==> val logicalExpression: CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator NOT_NULL`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [711:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [711:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<Cash.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'criteria' @ [711:61] ==> val criteria: QueryCriteria.VaultCustomQueryCriteria<CashSchemaV1.PersistentCashState> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator NOT_NULL`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [712:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..List<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [712:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`logical operator NOT_NULL`.<anonymous>[LocalVariableDescriptor]

'states' @ [712:32] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [712:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [716:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [718:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [718:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [719:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [719:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [719:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [719:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [719:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [719:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [720:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [720:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [720:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [720:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [720:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [720:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [721:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [721:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [721:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [721:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [721:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [721:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [722:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [722:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [722:47] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [722:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [722:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [722:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [723:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [723:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'SWISS_FRANCS' @ [723:47] ==> public val Int.SWISS_FRANCS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [723:61] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [723:77] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [723:97] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [725:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [725:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>): AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>

'builder' @ [727:23] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, Long>): CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> AggregateFunctionExpression<PersistentCashState, Long>

'CashSchemaV1' @ [727:33] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [727:46] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'pennies' @ [727:67] ==> @field:Column public final var pennies: Long defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'sum' @ [727:75] ==> public final fun <O, R> KProperty1<CashSchemaV1.PersistentCashState, Long?>.sum(groupByColumns: List<KProperty1<CashSchemaV1.PersistentCashState, Long>>? = ..., orderBy: Sort.Direction? = ...): CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R> -> Long

'VaultCustomQueryCriteria' @ [728:31] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CashSchemaV1.PersistentCashState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCashState

'sum' @ [728:56] ==> val sum: CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions without group clause`.<anonymous>[LocalVariableDescriptor]

'builder' @ [730:25] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, Long>): CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> AggregateFunctionExpression<PersistentCashState, Long>

'CashSchemaV1' @ [730:35] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [730:48] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'pennies' @ [730:69] ==> @field:Column public final var pennies: Long defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'count' @ [730:77] ==> public final fun <O, R> KProperty1<CashSchemaV1.PersistentCashState, Long?>.count(): CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R> -> Long

'VaultCustomQueryCriteria' @ [731:33] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CashSchemaV1.PersistentCashState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCashState

'count' @ [731:58] ==> val count: CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions without group clause`.<anonymous>[LocalVariableDescriptor]

'builder' @ [733:23] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, Long>): CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> AggregateFunctionExpression<PersistentCashState, Long>

'CashSchemaV1' @ [733:33] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [733:46] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'pennies' @ [733:67] ==> @field:Column public final var pennies: Long defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'max' @ [733:75] ==> public final fun <O, R> KProperty1<CashSchemaV1.PersistentCashState, Long?>.max(groupByColumns: List<KProperty1<CashSchemaV1.PersistentCashState, Long>>? = ..., orderBy: Sort.Direction? = ...): CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R> -> Long

'VaultCustomQueryCriteria' @ [734:31] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CashSchemaV1.PersistentCashState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCashState

'max' @ [734:56] ==> val max: CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions without group clause`.<anonymous>[LocalVariableDescriptor]

'builder' @ [736:23] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, Long>): CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> AggregateFunctionExpression<PersistentCashState, Long>

'CashSchemaV1' @ [736:33] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [736:46] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'pennies' @ [736:67] ==> @field:Column public final var pennies: Long defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'min' @ [736:75] ==> public final fun <O, R> KProperty1<CashSchemaV1.PersistentCashState, Long?>.min(groupByColumns: List<KProperty1<CashSchemaV1.PersistentCashState, Long>>? = ..., orderBy: Sort.Direction? = ...): CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R> -> Long

'VaultCustomQueryCriteria' @ [737:31] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CashSchemaV1.PersistentCashState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCashState

'min' @ [737:56] ==> val min: CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions without group clause`.<anonymous>[LocalVariableDescriptor]

'builder' @ [739:23] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, Long>): CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> AggregateFunctionExpression<PersistentCashState, Long>

'CashSchemaV1' @ [739:33] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [739:46] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'pennies' @ [739:67] ==> @field:Column public final var pennies: Long defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'avg' @ [739:75] ==> public final fun <O, R> KProperty1<CashSchemaV1.PersistentCashState, Long?>.avg(groupByColumns: List<KProperty1<CashSchemaV1.PersistentCashState, Long>>? = ..., orderBy: Sort.Direction? = ...): CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R> -> Long

'VaultCustomQueryCriteria' @ [740:31] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CashSchemaV1.PersistentCashState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCashState

'avg' @ [740:56] ==> val avg: CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions without group clause`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [742:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [742:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<FungibleAsset<*>> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> FungibleAsset<*>

'sumCriteria' @ [742:67] ==> val sumCriteria: QueryCriteria.VaultCustomQueryCriteria<CashSchemaV1.PersistentCashState> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions without group clause`.<anonymous>[LocalVariableDescriptor]

'and' @ [743:63] ==> public final fun and(criteria: QueryCriteria): QueryCriteria defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedSimpleFunctionDescriptor]

'countCriteria' @ [743:67] ==> val countCriteria: QueryCriteria.VaultCustomQueryCriteria<CashSchemaV1.PersistentCashState> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions without group clause`.<anonymous>[LocalVariableDescriptor]

'and' @ [744:63] ==> public final infix fun and(criteria: QueryCriteria): QueryCriteria defined in net.corda.core.node.services.vault.QueryCriteria[DeserializedSimpleFunctionDescriptor]

'maxCriteria' @ [744:67] ==> val maxCriteria: QueryCriteria.VaultCustomQueryCriteria<CashSchemaV1.PersistentCashState> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions without group clause`.<anonymous>[LocalVariableDescriptor]

'and' @ [745:63] ==> public final infix fun and(criteria: QueryCriteria): QueryCriteria defined in net.corda.core.node.services.vault.QueryCriteria[DeserializedSimpleFunctionDescriptor]

'minCriteria' @ [745:67] ==> val minCriteria: QueryCriteria.VaultCustomQueryCriteria<CashSchemaV1.PersistentCashState> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions without group clause`.<anonymous>[LocalVariableDescriptor]

'and' @ [746:63] ==> public final infix fun and(criteria: QueryCriteria): QueryCriteria defined in net.corda.core.node.services.vault.QueryCriteria[DeserializedSimpleFunctionDescriptor]

'avgCriteria' @ [746:67] ==> val avgCriteria: QueryCriteria.VaultCustomQueryCriteria<CashSchemaV1.PersistentCashState> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions without group clause`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [749:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (Any..Any?)>..List<(Any..Any?)>?)): (ListAssert<(Any..Any?)>..ListAssert<(Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> Any

'results' @ [749:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions without group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [749:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [749:46] ==> public open fun hasSize(p0: Int): (ListAssert<(Any..Any?)>..ListAssert<(Any..Any?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [750:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [750:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions without group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [750:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [750:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [751:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [751:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions without group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [751:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [751:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [752:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [752:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions without group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [752:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [752:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [753:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [753:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions without group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [753:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [753:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [754:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [754:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions without group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [754:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [754:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'Test' @ [758:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [760:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [760:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [761:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [761:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [761:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [761:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [761:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [761:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [762:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [762:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [762:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [762:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [762:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [762:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [763:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [763:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [763:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [763:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [763:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [763:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [764:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [764:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [764:47] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [764:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [764:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [764:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [765:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [765:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'SWISS_FRANCS' @ [765:47] ==> public val Int.SWISS_FRANCS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [765:61] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [765:77] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [765:97] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [767:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [767:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>): AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>

'builder' @ [769:23] ==> public inline fun <A> builder(block: Builder.() -> Nothing): Nothing defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> Nothing

'CashSchemaV1' @ [769:33] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [769:46] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'pennies' @ [769:67] ==> @field:Column public final var pennies: Long defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'sum' @ [769:75] ==> public final fun <O, R> KProperty1<CashSchemaV1.PersistentCashState, {Comparable<{Long & String}> & java.io.Serializable}?>.sum(groupByColumns: List<KProperty1<CashSchemaV1.PersistentCashState, {Comparable<{Long & String}> & java.io.Serializable}>>? = ..., orderBy: Sort.Direction? = ...): CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, {Comparable<{Long & String}> & java.io.Serializable}> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R> -> {Comparable<{Long & String}> & java.io.Serializable}

'listOf' @ [769:96] ==> public fun <T> listOf(element: KMutableProperty1<CashSchemaV1.PersistentCashState, String>): List<KMutableProperty1<CashSchemaV1.PersistentCashState, String>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> KMutableProperty1<PersistentCashState, String>

'CashSchemaV1' @ [769:103] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [769:116] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'VaultCustomQueryCriteria' @ [770:31] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<PersistentState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentState

'sum' @ [770:56] ==> val sum: Nothing defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'builder' @ [772:23] ==> public inline fun <A> builder(block: Builder.() -> Nothing): Nothing defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> Nothing

'CashSchemaV1' @ [772:33] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [772:46] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'pennies' @ [772:67] ==> @field:Column public final var pennies: Long defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'max' @ [772:75] ==> public final fun <O, R> KProperty1<CashSchemaV1.PersistentCashState, {Comparable<{Long & String}> & java.io.Serializable}?>.max(groupByColumns: List<KProperty1<CashSchemaV1.PersistentCashState, {Comparable<{Long & String}> & java.io.Serializable}>>? = ..., orderBy: Sort.Direction? = ...): CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, {Comparable<{Long & String}> & java.io.Serializable}> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R> -> {Comparable<{Long & String}> & java.io.Serializable}

'listOf' @ [772:96] ==> public fun <T> listOf(element: KMutableProperty1<CashSchemaV1.PersistentCashState, String>): List<KMutableProperty1<CashSchemaV1.PersistentCashState, String>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> KMutableProperty1<PersistentCashState, String>

'CashSchemaV1' @ [772:103] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [772:116] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'VaultCustomQueryCriteria' @ [773:31] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<PersistentState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentState

'max' @ [773:56] ==> val max: Nothing defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'builder' @ [775:23] ==> public inline fun <A> builder(block: Builder.() -> Nothing): Nothing defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> Nothing

'CashSchemaV1' @ [775:33] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [775:46] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'pennies' @ [775:67] ==> @field:Column public final var pennies: Long defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'min' @ [775:75] ==> public final fun <O, R> KProperty1<CashSchemaV1.PersistentCashState, {Comparable<{Long & String}> & java.io.Serializable}?>.min(groupByColumns: List<KProperty1<CashSchemaV1.PersistentCashState, {Comparable<{Long & String}> & java.io.Serializable}>>? = ..., orderBy: Sort.Direction? = ...): CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, {Comparable<{Long & String}> & java.io.Serializable}> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R> -> {Comparable<{Long & String}> & java.io.Serializable}

'listOf' @ [775:96] ==> public fun <T> listOf(element: KMutableProperty1<CashSchemaV1.PersistentCashState, String>): List<KMutableProperty1<CashSchemaV1.PersistentCashState, String>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> KMutableProperty1<PersistentCashState, String>

'CashSchemaV1' @ [775:103] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [775:116] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'VaultCustomQueryCriteria' @ [776:31] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<PersistentState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentState

'min' @ [776:56] ==> val min: Nothing defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'builder' @ [778:23] ==> public inline fun <A> builder(block: Builder.() -> Nothing): Nothing defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> Nothing

'CashSchemaV1' @ [778:33] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [778:46] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'pennies' @ [778:67] ==> @field:Column public final var pennies: Long defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'avg' @ [778:75] ==> public final fun <O, R> KProperty1<CashSchemaV1.PersistentCashState, {Comparable<{Long & String}> & java.io.Serializable}?>.avg(groupByColumns: List<KProperty1<CashSchemaV1.PersistentCashState, {Comparable<{Long & String}> & java.io.Serializable}>>? = ..., orderBy: Sort.Direction? = ...): CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, {Comparable<{Long & String}> & java.io.Serializable}> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R> -> {Comparable<{Long & String}> & java.io.Serializable}

'listOf' @ [778:96] ==> public fun <T> listOf(element: KMutableProperty1<CashSchemaV1.PersistentCashState, String>): List<KMutableProperty1<CashSchemaV1.PersistentCashState, String>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> KMutableProperty1<PersistentCashState, String>

'CashSchemaV1' @ [778:103] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [778:116] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'VaultCustomQueryCriteria' @ [779:31] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<PersistentState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentState

'avg' @ [779:56] ==> val avg: Nothing defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [781:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [781:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<FungibleAsset<*>> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> FungibleAsset<*>

'sumCriteria' @ [781:67] ==> val sumCriteria: QueryCriteria.VaultCustomQueryCriteria<PersistentState> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'and' @ [782:63] ==> public final fun and(criteria: QueryCriteria): QueryCriteria defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedSimpleFunctionDescriptor]

'maxCriteria' @ [782:67] ==> val maxCriteria: QueryCriteria.VaultCustomQueryCriteria<PersistentState> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'and' @ [783:63] ==> public final infix fun and(criteria: QueryCriteria): QueryCriteria defined in net.corda.core.node.services.vault.QueryCriteria[DeserializedSimpleFunctionDescriptor]

'minCriteria' @ [783:67] ==> val minCriteria: QueryCriteria.VaultCustomQueryCriteria<PersistentState> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'and' @ [784:63] ==> public final infix fun and(criteria: QueryCriteria): QueryCriteria defined in net.corda.core.node.services.vault.QueryCriteria[DeserializedSimpleFunctionDescriptor]

'avgCriteria' @ [784:67] ==> val avgCriteria: QueryCriteria.VaultCustomQueryCriteria<PersistentState> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [787:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (Any..Any?)>..List<(Any..Any?)>?)): (ListAssert<(Any..Any?)>..ListAssert<(Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> Any

'results' @ [787:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [787:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [787:46] ==> public open fun hasSize(p0: Int): (ListAssert<(Any..Any?)>..ListAssert<(Any..Any?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [789:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [789:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [789:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [789:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [790:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [790:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [790:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [790:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [791:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [791:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [791:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [791:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [792:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [792:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [792:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [792:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [793:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [793:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [793:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [793:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [794:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [794:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [794:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [794:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [795:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [795:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [795:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [795:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [796:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [796:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [796:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [796:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [798:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [798:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [798:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [798:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [799:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [799:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [799:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [799:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [800:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [800:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [800:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [800:50] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [801:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [801:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [801:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [801:50] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [802:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [802:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [802:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [802:50] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [803:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [803:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [803:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [803:50] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [804:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [804:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [804:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [804:50] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [805:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [805:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [805:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [805:50] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [807:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [807:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [807:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [807:50] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [808:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [808:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [808:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [808:50] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [809:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [809:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [809:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [809:50] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [810:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [810:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [810:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [810:50] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [811:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [811:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [811:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [811:50] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [812:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [812:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [812:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [812:50] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [813:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [813:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [813:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [813:50] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [814:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [814:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions with single group clause`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [814:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [814:50] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'Test' @ [818:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [820:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [820:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'identitySvc' @ [821:13] ==> public final val identitySvc: IdentityService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'verifyAndRegisterIdentity' @ [821:25] ==> public abstract fun verifyAndRegisterIdentity(identity: PartyAndCertificate): PartyAndCertificate? defined in net.corda.core.node.services.IdentityService[DeserializedSimpleFunctionDescriptor]

'BOC_IDENTITY' @ [821:51] ==> public val BOC_IDENTITY: PartyAndCertificate defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [823:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [823:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [823:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [823:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [823:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [823:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'DUMMY_CASH_ISSUER' @ [823:115] ==> public val DUMMY_CASH_ISSUER: PartyAndReference defined in net.corda.finance.contracts.asset[DeserializedPropertyDescriptor]

'services' @ [824:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [824:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [824:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [824:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [824:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [824:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'BOC' @ [824:115] ==> public val BOC: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'ref' @ [824:119] ==> public final fun ref(vararg bytes: Byte): PartyAndReference defined in net.corda.core.identity.Party[DeserializedSimpleFunctionDescriptor]

'services' @ [825:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [825:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [825:47] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [825:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [825:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [825:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'DUMMY_CASH_ISSUER' @ [825:114] ==> public val DUMMY_CASH_ISSUER: PartyAndReference defined in net.corda.finance.contracts.asset[DeserializedPropertyDescriptor]

'services' @ [826:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [826:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [826:47] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [826:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [826:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [826:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'BOC' @ [826:114] ==> public val BOC: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'ref' @ [826:118] ==> public final fun ref(vararg bytes: Byte): PartyAndReference defined in net.corda.core.identity.Party[DeserializedSimpleFunctionDescriptor]

'database' @ [828:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [828:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>): AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>

'builder' @ [830:23] ==> public inline fun <A> builder(block: Builder.() -> Nothing): Nothing defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> Nothing

'CashSchemaV1' @ [830:33] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [830:46] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'pennies' @ [830:67] ==> @field:Column public final var pennies: Long defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'sum' @ [830:75] ==> public final fun <O, R> KProperty1<CashSchemaV1.PersistentCashState, {Comparable<{Long & String}> & java.io.Serializable}?>.sum(groupByColumns: List<KProperty1<CashSchemaV1.PersistentCashState, {Comparable<{Long & String}> & java.io.Serializable}>>? = ..., orderBy: Sort.Direction? = ...): CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, {Comparable<{Long & String}> & java.io.Serializable}> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R> -> {Comparable<{Long & String}> & java.io.Serializable}

'listOf' @ [830:96] ==> public fun <T> listOf(vararg elements: KMutableProperty1<CashSchemaV1.PersistentCashState, String>): List<KMutableProperty1<CashSchemaV1.PersistentCashState, String>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> KMutableProperty1<PersistentCashState, String>

'CashSchemaV1' @ [830:103] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [830:116] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'CashSchemaV1' @ [831:103] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [831:116] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'DESC' @ [832:104] ==> enum entry DESC defined in net.corda.core.node.services.vault.Sort.Direction[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [835:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [835:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<FungibleAsset<*>> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> FungibleAsset<*>

'VaultCustomQueryCriteria' @ [835:67] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<PersistentState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentState

'sum' @ [835:92] ==> val sum: Nothing defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions sum by issuer and currency and sort by aggregate sum`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [838:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (Any..Any?)>..List<(Any..Any?)>?)): (ListAssert<(Any..Any?)>..ListAssert<(Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> Any

'results' @ [838:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions sum by issuer and currency and sort by aggregate sum`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [838:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [838:46] ==> public open fun hasSize(p0: Int): (ListAssert<(Any..Any?)>..ListAssert<(Any..Any?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [840:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [840:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions sum by issuer and currency and sort by aggregate sum`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [840:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [840:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [841:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [841:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions sum by issuer and currency and sort by aggregate sum`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [841:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [841:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'BOC_PUBKEY' @ [841:59] ==> public val BOC_PUBKEY: PublicKey defined in net.corda.testing[DeserializedPropertyDescriptor]

'toBase58String' @ [841:70] ==> public fun PublicKey.toBase58String(): String defined in net.corda.core.crypto[DeserializedSimpleFunctionDescriptor]

'assertThat' @ [842:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [842:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions sum by issuer and currency and sort by aggregate sum`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [842:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [842:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [843:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [843:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions sum by issuer and currency and sort by aggregate sum`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [843:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [843:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [844:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [844:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions sum by issuer and currency and sort by aggregate sum`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [844:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [844:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'DUMMY_CASH_ISSUER' @ [844:59] ==> public val DUMMY_CASH_ISSUER: PartyAndReference defined in net.corda.finance.contracts.asset[DeserializedPropertyDescriptor]

'party' @ [844:77] ==> public final val party: AbstractParty defined in net.corda.core.contracts.PartyAndReference[DeserializedPropertyDescriptor]

'owningKey' @ [844:83] ==> public final val owningKey: PublicKey defined in net.corda.core.identity.AbstractParty[DeserializedPropertyDescriptor]

'toBase58String' @ [844:93] ==> public fun PublicKey.toBase58String(): String defined in net.corda.core.crypto[DeserializedSimpleFunctionDescriptor]

'assertThat' @ [845:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [845:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions sum by issuer and currency and sort by aggregate sum`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [845:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [845:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [846:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [846:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions sum by issuer and currency and sort by aggregate sum`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [846:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [846:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [847:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [847:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions sum by issuer and currency and sort by aggregate sum`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [847:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [847:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'BOC_PUBKEY' @ [847:59] ==> public val BOC_PUBKEY: PublicKey defined in net.corda.testing[DeserializedPropertyDescriptor]

'toBase58String' @ [847:70] ==> public fun PublicKey.toBase58String(): String defined in net.corda.core.crypto[DeserializedSimpleFunctionDescriptor]

'assertThat' @ [848:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [848:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions sum by issuer and currency and sort by aggregate sum`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [848:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [848:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [849:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [849:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions sum by issuer and currency and sort by aggregate sum`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [849:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [849:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [850:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [850:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions sum by issuer and currency and sort by aggregate sum`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [850:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [850:50] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'DUMMY_CASH_ISSUER' @ [850:60] ==> public val DUMMY_CASH_ISSUER: PartyAndReference defined in net.corda.finance.contracts.asset[DeserializedPropertyDescriptor]

'party' @ [850:78] ==> public final val party: AbstractParty defined in net.corda.core.contracts.PartyAndReference[DeserializedPropertyDescriptor]

'owningKey' @ [850:84] ==> public final val owningKey: PublicKey defined in net.corda.core.identity.AbstractParty[DeserializedPropertyDescriptor]

'toBase58String' @ [850:94] ==> public fun PublicKey.toBase58String(): String defined in net.corda.core.crypto[DeserializedSimpleFunctionDescriptor]

'assertThat' @ [851:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [851:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions sum by issuer and currency and sort by aggregate sum`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [851:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [851:50] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'Test' @ [855:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [857:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [857:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<DealState>): Vault<DealState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<DealState>

'services' @ [859:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [859:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [859:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [859:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'CASH_NOTARY' @ [859:72] ==> public final val CASH_NOTARY: Party defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'Random' @ [859:93] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [860:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [860:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [861:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [861:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [862:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [862:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [863:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [863:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [863:44] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'database' @ [865:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [865:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?)>): AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>?)>?)>

'builder' @ [867:25] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.AggregateFunctionExpression<VaultSchemaV1.VaultStates, Instant>): CriteriaExpression.AggregateFunctionExpression<VaultSchemaV1.VaultStates, Instant> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> AggregateFunctionExpression<VaultStates, Instant>

'VaultSchemaV1' @ [867:35] ==> @CordaSerializable public object VaultSchemaV1 : MappedSchema defined in net.corda.node.services.vault[FakeCallableDescriptorForObject]

'VaultStates' @ [867:49] ==> public constructor VaultStates(notary: AbstractParty, contractStateClassName: String, contractState: ByteArray, stateStatus: Vault.StateStatus, recordedTime: Instant, consumedTime: Instant? = ..., lockId: String? = ..., lockUpdateTime: Instant? = ...) defined in net.corda.node.services.vault.VaultSchemaV1.VaultStates[DeserializedClassConstructorDescriptor]

'recordedTime' @ [867:62] ==> @field:Column public final var recordedTime: Instant defined in net.corda.node.services.vault.VaultSchemaV1.VaultStates[DeserializedPropertyDescriptor]

'count' @ [867:75] ==> public final fun <O, R> KProperty1<VaultSchemaV1.VaultStates, Instant?>.count(): CriteriaExpression.AggregateFunctionExpression<VaultSchemaV1.VaultStates, Instant> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> VaultStates
    <R> -> Instant

'VaultCustomQueryCriteria' @ [868:47] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<VaultSchemaV1.VaultStates, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> VaultStates

'count' @ [868:72] ==> val count: CriteriaExpression.AggregateFunctionExpression<VaultSchemaV1.VaultStates, Instant> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [869:38] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [869:52] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<FungibleAsset<*>> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> FungibleAsset<*>

'countCriteria' @ [869:78] ==> val countCriteria: QueryCriteria.VaultCustomQueryCriteria<VaultSchemaV1.VaultStates> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [869:93] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'single' @ [869:106] ==> public fun <T> List<Any>.single(): Any defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Any

'assertThat' @ [870:13] ==> @CheckReturnValue public open fun assertThat(p0: Long): (AbstractLongAssert<*>..AbstractLongAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'fungibleStateCount' @ [870:24] ==> val fungibleStateCount: Long defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type`.<anonymous>[LocalVariableDescriptor]

'isEqualTo' @ [870:44] ==> public open fun isEqualTo(p0: Long): (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractLongAssert[JavaMethodDescriptor]

'vaultQuerySvc' @ [873:36] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [873:50] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<LinearState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> LinearState

'countCriteria' @ [873:71] ==> val countCriteria: QueryCriteria.VaultCustomQueryCriteria<VaultSchemaV1.VaultStates> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [873:86] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'single' @ [873:99] ==> public fun <T> List<Any>.single(): Any defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Any

'assertThat' @ [874:13] ==> @CheckReturnValue public open fun assertThat(p0: Long): (AbstractLongAssert<*>..AbstractLongAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'linearStateCount' @ [874:24] ==> val linearStateCount: Long defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type`.<anonymous>[LocalVariableDescriptor]

'isEqualTo' @ [874:42] ==> public open fun isEqualTo(p0: Long): (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractLongAssert[JavaMethodDescriptor]

'vaultQuerySvc' @ [877:34] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [877:48] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<DealState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> DealState

'countCriteria' @ [877:67] ==> val countCriteria: QueryCriteria.VaultCustomQueryCriteria<VaultSchemaV1.VaultStates> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [877:82] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'single' @ [877:95] ==> public fun <T> List<Any>.single(): Any defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Any

'assertThat' @ [878:13] ==> @CheckReturnValue public open fun assertThat(p0: Long): (AbstractLongAssert<*>..AbstractLongAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'dealStateCount' @ [878:24] ==> val dealStateCount: Long defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type`.<anonymous>[LocalVariableDescriptor]

'isEqualTo' @ [878:40] ==> public open fun isEqualTo(p0: Long): (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractLongAssert[JavaMethodDescriptor]

'Test' @ [882:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'component1' @ [884:14] ==> public final operator fun component1(): Vault<LinearState> defined in kotlin.Triple[DeserializedSimpleFunctionDescriptor]

'component2' @ [884:30] ==> public final operator fun component2(): Vault<LinearState> defined in kotlin.Triple[DeserializedSimpleFunctionDescriptor]

'component3' @ [884:46] ==> public final operator fun component3(): Vault<DealState> defined in kotlin.Triple[DeserializedSimpleFunctionDescriptor]

'database' @ [885:13] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [885:22] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Triple<Vault<LinearState>, Vault<LinearState>, Vault<DealState>>): Triple<Vault<LinearState>, Vault<LinearState>, Vault<DealState>> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Triple<Vault<LinearState>, Vault<LinearState>, Vault<DealState>>

'services' @ [887:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [887:26] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [887:51] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [887:60] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [887:76] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [887:98] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [888:39] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [888:48] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [889:39] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [889:48] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [890:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [890:26] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [891:34] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [891:43] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [891:65] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'Triple' @ [892:17] ==> public constructor Triple<out A, out B, out C>(first: Vault<LinearState>, second: Vault<LinearState>, third: Vault<DealState>) defined in kotlin.Triple[DeserializedClassConstructorDescriptor]
Inferred types:
    <out A> -> Vault<LinearState>
    <out B> -> Vault<LinearState>
    <out C> -> Vault<DealState>

'linearStatesJKL' @ [892:24] ==> val linearStatesJKL: Vault<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`.<anonymous>[LocalVariableDescriptor]

'linearStatesXYZ' @ [892:40] ==> val linearStatesXYZ: Vault<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`.<anonymous>[LocalVariableDescriptor]

'dealStates' @ [892:56] ==> val dealStates: Vault<DealState> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`.<anonymous>[LocalVariableDescriptor]

'builder' @ [894:21] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.AggregateFunctionExpression<VaultSchemaV1.VaultStates, Instant>): CriteriaExpression.AggregateFunctionExpression<VaultSchemaV1.VaultStates, Instant> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> AggregateFunctionExpression<VaultStates, Instant>

'VaultSchemaV1' @ [894:31] ==> @CordaSerializable public object VaultSchemaV1 : MappedSchema defined in net.corda.node.services.vault[FakeCallableDescriptorForObject]

'VaultStates' @ [894:45] ==> public constructor VaultStates(notary: AbstractParty, contractStateClassName: String, contractState: ByteArray, stateStatus: Vault.StateStatus, recordedTime: Instant, consumedTime: Instant? = ..., lockId: String? = ..., lockUpdateTime: Instant? = ...) defined in net.corda.node.services.vault.VaultSchemaV1.VaultStates[DeserializedClassConstructorDescriptor]

'recordedTime' @ [894:58] ==> @field:Column public final var recordedTime: Instant defined in net.corda.node.services.vault.VaultSchemaV1.VaultStates[DeserializedPropertyDescriptor]

'count' @ [894:71] ==> public final fun <O, R> KProperty1<VaultSchemaV1.VaultStates, Instant?>.count(): CriteriaExpression.AggregateFunctionExpression<VaultSchemaV1.VaultStates, Instant> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> VaultStates
    <R> -> Instant

'database' @ [895:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [895:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?)>): AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>?)>?)>

'VaultCustomQueryCriteria' @ [897:47] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<VaultSchemaV1.VaultStates, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> VaultStates

'count' @ [897:72] ==> val count: CriteriaExpression.AggregateFunctionExpression<VaultSchemaV1.VaultStates, Instant> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`[LocalVariableDescriptor]

'Vault' @ [897:79] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'ALL' @ [897:97] ==> enum entry ALL defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [898:38] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [898:52] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<FungibleAsset<*>> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> FungibleAsset<*>

'countCriteria' @ [898:78] ==> val countCriteria: QueryCriteria.VaultCustomQueryCriteria<VaultSchemaV1.VaultStates> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [898:93] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'single' @ [898:106] ==> public fun <T> List<Any>.single(): Any defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Any

'assertThat' @ [899:13] ==> @CheckReturnValue public open fun assertThat(p0: Long): (AbstractLongAssert<*>..AbstractLongAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'fungibleStateCount' @ [899:24] ==> val fungibleStateCount: Long defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`.<anonymous>[LocalVariableDescriptor]

'isEqualTo' @ [899:44] ==> public open fun isEqualTo(p0: Long): (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractLongAssert[JavaMethodDescriptor]

'vaultQuerySvc' @ [902:36] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [902:50] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<LinearState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> LinearState

'countCriteria' @ [902:71] ==> val countCriteria: QueryCriteria.VaultCustomQueryCriteria<VaultSchemaV1.VaultStates> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [902:86] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'single' @ [902:99] ==> public fun <T> List<Any>.single(): Any defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Any

'assertThat' @ [903:13] ==> @CheckReturnValue public open fun assertThat(p0: Long): (AbstractLongAssert<*>..AbstractLongAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'linearStateCount' @ [903:24] ==> val linearStateCount: Long defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`.<anonymous>[LocalVariableDescriptor]

'isEqualTo' @ [903:42] ==> public open fun isEqualTo(p0: Long): (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractLongAssert[JavaMethodDescriptor]

'vaultQuerySvc' @ [906:34] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [906:48] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<DealState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> DealState

'countCriteria' @ [906:67] ==> val countCriteria: QueryCriteria.VaultCustomQueryCriteria<VaultSchemaV1.VaultStates> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [906:82] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'single' @ [906:95] ==> public fun <T> List<Any>.single(): Any defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Any

'assertThat' @ [907:13] ==> @CheckReturnValue public open fun assertThat(p0: Long): (AbstractLongAssert<*>..AbstractLongAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'dealStateCount' @ [907:24] ==> val dealStateCount: Long defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`.<anonymous>[LocalVariableDescriptor]

'isEqualTo' @ [907:40] ==> public open fun isEqualTo(p0: Long): (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractLongAssert[JavaMethodDescriptor]

'database' @ [910:12] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [910:21] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault.Update<ContractState>): Vault.Update<ContractState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Update<ContractState>

'services' @ [912:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeLinearStates' @ [912:26] ==> public fun ServiceHub.consumeLinearStates(linearStates: List<StateAndRef<LinearState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'linearStatesXYZ' @ [912:46] ==> val linearStatesXYZ: Vault<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`[LocalVariableDescriptor]

'states' @ [912:62] ==> public final val states: Iterable<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'toList' @ [912:69] ==> public fun <T> Iterable<StateAndRef<LinearState>>.toList(): List<StateAndRef<LinearState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>

'DUMMY_NOTARY' @ [912:79] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [913:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeLinearStates' @ [913:26] ==> public fun ServiceHub.consumeLinearStates(linearStates: List<StateAndRef<LinearState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'linearStatesJKL' @ [913:46] ==> val linearStatesJKL: Vault<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`[LocalVariableDescriptor]

'states' @ [913:62] ==> public final val states: Iterable<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'toList' @ [913:69] ==> public fun <T> Iterable<StateAndRef<LinearState>>.toList(): List<StateAndRef<LinearState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>

'DUMMY_NOTARY' @ [913:79] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [914:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeDeals' @ [914:26] ==> public fun ServiceHub.consumeDeals(dealStates: List<StateAndRef<DealState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'dealStates' @ [914:39] ==> val dealStates: Vault<DealState> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`[LocalVariableDescriptor]

'states' @ [914:50] ==> public final val states: Iterable<StateAndRef<DealState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'filter' @ [914:57] ==> public inline fun <T> Iterable<StateAndRef<DealState>>.filter(predicate: (StateAndRef<DealState>) -> Boolean): List<StateAndRef<DealState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<DealState>

'it' @ [914:66] ==> value-parameter it: StateAndRef<DealState> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'state' @ [914:69] ==> public final val state: TransactionState<DealState> defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'data' @ [914:75] ==> public final val data: DealState defined in net.corda.core.contracts.TransactionState[DeserializedPropertyDescriptor]

'linearId' @ [914:80] ==> public abstract val linearId: UniqueIdentifier defined in net.corda.finance.contracts.DealState[DeserializedPropertyDescriptor]

'externalId' @ [914:89] ==> public final val externalId: String? defined in net.corda.core.contracts.UniqueIdentifier[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [914:112] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [915:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeCash' @ [915:26] ==> @JvmOverloads public fun ServiceHub.consumeCash(amount: Amount<Currency>, to: Party = ..., notary: Party): Vault.Update<ContractState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [915:41] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [915:59] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'database' @ [919:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [919:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?)>): AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>?)>?)>

'VaultCustomQueryCriteria' @ [921:57] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<VaultSchemaV1.VaultStates, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> VaultStates

'count' @ [921:82] ==> val count: CriteriaExpression.AggregateFunctionExpression<VaultSchemaV1.VaultStates, Instant> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`[LocalVariableDescriptor]

'Vault' @ [921:89] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'UNCONSUMED' @ [921:107] ==> enum entry UNCONSUMED defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [922:48] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [922:62] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<FungibleAsset<*>> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> FungibleAsset<*>

'countCriteriaUnconsumed' @ [922:88] ==> val countCriteriaUnconsumed: QueryCriteria.VaultCustomQueryCriteria<VaultSchemaV1.VaultStates> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [922:113] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'single' @ [922:126] ==> public fun <T> List<Any>.single(): Any defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Any

'assertThat' @ [923:13] ==> @CheckReturnValue public open fun assertThat(p0: Int): (AbstractIntegerAssert<*>..AbstractIntegerAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'fungibleStateCountUnconsumed' @ [923:24] ==> val fungibleStateCountUnconsumed: Long defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`.<anonymous>[LocalVariableDescriptor]

'toInt' @ [923:53] ==> public open fun toInt(): Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor]

'isEqualTo' @ [923:62] ==> public open fun isEqualTo(p0: Int): (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractIntegerAssert[JavaMethodDescriptor]

'-' @ [923:72] ==> public final operator fun minus(other: Int): Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor]

'cashUpdates' @ [923:77] ==> val cashUpdates: Vault.Update<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`[LocalVariableDescriptor]

'consumed' @ [923:89] ==> public final val consumed: Set<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Update[DeserializedPropertyDescriptor]

'size' @ [923:98] ==> public abstract val size: Int defined in kotlin.collections.Set[DeserializedPropertyDescriptor]

'cashUpdates' @ [923:105] ==> val cashUpdates: Vault.Update<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`[LocalVariableDescriptor]

'produced' @ [923:117] ==> public final val produced: Set<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Update[DeserializedPropertyDescriptor]

'size' @ [923:126] ==> public abstract val size: Int defined in kotlin.collections.Set[DeserializedPropertyDescriptor]

'vaultQuerySvc' @ [926:46] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [926:60] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<LinearState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> LinearState

'countCriteriaUnconsumed' @ [926:81] ==> val countCriteriaUnconsumed: QueryCriteria.VaultCustomQueryCriteria<VaultSchemaV1.VaultStates> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [926:106] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'single' @ [926:119] ==> public fun <T> List<Any>.single(): Any defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Any

'assertThat' @ [927:13] ==> @CheckReturnValue public open fun assertThat(p0: Long): (AbstractLongAssert<*>..AbstractLongAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'linearStateCountUnconsumed' @ [927:24] ==> val linearStateCountUnconsumed: Long defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`.<anonymous>[LocalVariableDescriptor]

'isEqualTo' @ [927:52] ==> public open fun isEqualTo(p0: Long): (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractLongAssert[JavaMethodDescriptor]

'vaultQuerySvc' @ [930:44] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [930:58] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<DealState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> DealState

'countCriteriaUnconsumed' @ [930:77] ==> val countCriteriaUnconsumed: QueryCriteria.VaultCustomQueryCriteria<VaultSchemaV1.VaultStates> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [930:102] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'single' @ [930:115] ==> public fun <T> List<Any>.single(): Any defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Any

'assertThat' @ [931:13] ==> @CheckReturnValue public open fun assertThat(p0: Long): (AbstractLongAssert<*>..AbstractLongAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'dealStateCountUnconsumed' @ [931:24] ==> val dealStateCountUnconsumed: Long defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`.<anonymous>[LocalVariableDescriptor]

'isEqualTo' @ [931:50] ==> public open fun isEqualTo(p0: Long): (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractLongAssert[JavaMethodDescriptor]

'VaultCustomQueryCriteria' @ [936:55] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<VaultSchemaV1.VaultStates, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> VaultStates

'count' @ [936:80] ==> val count: CriteriaExpression.AggregateFunctionExpression<VaultSchemaV1.VaultStates, Instant> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`[LocalVariableDescriptor]

'Vault' @ [936:87] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'CONSUMED' @ [936:105] ==> enum entry CONSUMED defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [937:46] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [937:60] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<FungibleAsset<*>> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> FungibleAsset<*>

'countCriteriaConsumed' @ [937:86] ==> val countCriteriaConsumed: QueryCriteria.VaultCustomQueryCriteria<VaultSchemaV1.VaultStates> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [937:109] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'single' @ [937:122] ==> public fun <T> List<Any>.single(): Any defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Any

'assertThat' @ [938:13] ==> @CheckReturnValue public open fun assertThat(p0: Int): (AbstractIntegerAssert<*>..AbstractIntegerAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'fungibleStateCountConsumed' @ [938:24] ==> val fungibleStateCountConsumed: Long defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`.<anonymous>[LocalVariableDescriptor]

'toInt' @ [938:51] ==> public open fun toInt(): Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor]

'isEqualTo' @ [938:60] ==> public open fun isEqualTo(p0: Int): (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>..AbstractIntegerAssert<out (AbstractIntegerAssert<out Any?>..AbstractIntegerAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractIntegerAssert[JavaMethodDescriptor]

'cashUpdates' @ [938:70] ==> val cashUpdates: Vault.Update<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`[LocalVariableDescriptor]

'consumed' @ [938:82] ==> public final val consumed: Set<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Update[DeserializedPropertyDescriptor]

'size' @ [938:91] ==> public abstract val size: Int defined in kotlin.collections.Set[DeserializedPropertyDescriptor]

'vaultQuerySvc' @ [941:44] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [941:58] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<LinearState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> LinearState

'countCriteriaConsumed' @ [941:79] ==> val countCriteriaConsumed: QueryCriteria.VaultCustomQueryCriteria<VaultSchemaV1.VaultStates> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [941:102] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'single' @ [941:115] ==> public fun <T> List<Any>.single(): Any defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Any

'assertThat' @ [942:13] ==> @CheckReturnValue public open fun assertThat(p0: Long): (AbstractLongAssert<*>..AbstractLongAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'linearStateCountConsumed' @ [942:24] ==> val linearStateCountConsumed: Long defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`.<anonymous>[LocalVariableDescriptor]

'isEqualTo' @ [942:50] ==> public open fun isEqualTo(p0: Long): (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractLongAssert[JavaMethodDescriptor]

'vaultQuerySvc' @ [945:42] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [945:56] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<DealState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> DealState

'countCriteriaConsumed' @ [945:75] ==> val countCriteriaConsumed: QueryCriteria.VaultCustomQueryCriteria<VaultSchemaV1.VaultStates> defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [945:98] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'single' @ [945:111] ==> public fun <T> List<Any>.single(): Any defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Any

'assertThat' @ [946:13] ==> @CheckReturnValue public open fun assertThat(p0: Long): (AbstractLongAssert<*>..AbstractLongAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'dealStateCountConsumed' @ [946:24] ==> val dealStateCountConsumed: Long defined in net.corda.node.services.vault.VaultQueryTests.`aggregate functions count by contract type and state status`.<anonymous>[LocalVariableDescriptor]

'isEqualTo' @ [946:48] ==> public open fun isEqualTo(p0: Long): (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractLongAssert[JavaMethodDescriptor]

'now' @ [950:35] ==> public open fun now(): (LocalDate..LocalDate?) defined in java.time.LocalDate[JavaMethodDescriptor]

'atStartOfDay' @ [950:41] ==> public open fun atStartOfDay(): (LocalDateTime..LocalDateTime?) defined in java.time.LocalDate[JavaMethodDescriptor]

'toInstant' @ [950:56] ==> public open fun toInstant(p0: (ZoneOffset..ZoneOffset?)): (Instant..Instant?) defined in java.time.LocalDateTime[JavaMethodDescriptor]

'UTC' @ [950:77] ==> public final val UTC: (ZoneOffset..ZoneOffset?) defined in java.time.ZoneOffset[JavaPropertyDescriptor]

'Test' @ [952:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [954:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [954:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [955:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [955:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [955:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [955:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'CASH_NOTARY' @ [955:72] ==> public final val CASH_NOTARY: Party defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'Random' @ [955:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [957:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [957:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Unit): Unit defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Unit

'TODAY' @ [959:25] ==> private final val TODAY: (Instant..Instant?) defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'TODAY' @ [960:23] ==> private final val TODAY: (Instant..Instant?) defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'plus' @ [960:29] ==> public open fun plus(p0: Long, p1: (TemporalUnit..TemporalUnit?)): (Instant..Instant?) defined in java.time.Instant[JavaMethodDescriptor]

'DAYS' @ [960:49] ==> enum entry DAYS defined in java.time.temporal.ChronoUnit[FakeCallableDescriptorForObject]

'TimeCondition' @ [961:45] ==> public constructor TimeCondition(type: QueryCriteria.TimeInstantType, predicate: ColumnPredicate<Instant>) defined in net.corda.core.node.services.vault.QueryCriteria.TimeCondition[DeserializedClassConstructorDescriptor]

'RECORDED' @ [962:51] ==> enum entry RECORDED defined in net.corda.core.node.services.vault.QueryCriteria.TimeInstantType[FakeCallableDescriptorForObject]

'Between' @ [963:37] ==> public constructor Between<C : Comparable<(Instant..Instant?)>>(rightFromLiteral: (Instant..Instant?), rightToLiteral: (Instant..Instant?)) defined in net.corda.core.node.services.vault.ColumnPredicate.Between[DeserializedClassConstructorDescriptor]
Inferred types:
    <C : Comparable<C>> -> (java.time.Instant..java.time.Instant?)

'start' @ [963:45] ==> val start: (Instant..Instant?) defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states recorded between two time intervals`.<anonymous>[LocalVariableDescriptor]

'end' @ [963:52] ==> val end: (Instant..Instant?) defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states recorded between two time intervals`.<anonymous>[LocalVariableDescriptor]

'VaultQueryCriteria' @ [964:28] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'recordedBetweenExpression' @ [964:63] ==> val recordedBetweenExpression: QueryCriteria.TimeCondition defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states recorded between two time intervals`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [965:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [965:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteria' @ [965:64] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states recorded between two time intervals`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [967:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'results' @ [967:24] ==> val results: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states recorded between two time intervals`.<anonymous>[LocalVariableDescriptor]

'states' @ [967:32] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [967:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'TODAY' @ [970:31] ==> private final val TODAY: (Instant..Instant?) defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'plus' @ [970:37] ==> public open fun plus(p0: Long, p1: (TemporalUnit..TemporalUnit?)): (Instant..Instant?) defined in java.time.Instant[JavaMethodDescriptor]

'DAYS' @ [970:56] ==> enum entry DAYS defined in java.time.temporal.ChronoUnit[FakeCallableDescriptorForObject]

'TimeCondition' @ [971:51] ==> public constructor TimeCondition(type: QueryCriteria.TimeInstantType, predicate: ColumnPredicate<Instant>) defined in net.corda.core.node.services.vault.QueryCriteria.TimeCondition[DeserializedClassConstructorDescriptor]

'RECORDED' @ [972:51] ==> enum entry RECORDED defined in net.corda.core.node.services.vault.QueryCriteria.TimeInstantType[FakeCallableDescriptorForObject]

'Between' @ [972:77] ==> public constructor Between<C : Comparable<(Instant..Instant?)>>(rightFromLiteral: (Instant..Instant?), rightToLiteral: (Instant..Instant?)) defined in net.corda.core.node.services.vault.ColumnPredicate.Between[DeserializedClassConstructorDescriptor]
Inferred types:
    <C : Comparable<C>> -> (java.time.Instant..java.time.Instant?)

'startFuture' @ [972:85] ==> val startFuture: (Instant..Instant?) defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states recorded between two time intervals`.<anonymous>[LocalVariableDescriptor]

'end' @ [972:98] ==> val end: (Instant..Instant?) defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states recorded between two time intervals`.<anonymous>[LocalVariableDescriptor]

'VaultQueryCriteria' @ [973:34] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'recordedBetweenExpressionFuture' @ [973:69] ==> val recordedBetweenExpressionFuture: QueryCriteria.TimeCondition defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states recorded between two time intervals`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [974:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'vaultQuerySvc' @ [974:24] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [974:38] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteriaFuture' @ [974:61] ==> val criteriaFuture: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed states recorded between two time intervals`.<anonymous>[LocalVariableDescriptor]

'states' @ [974:77] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEmpty' @ [974:85] ==> public open fun isEmpty(): Unit defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [978:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [980:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [980:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<DealState>): Vault<DealState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<DealState>

'services' @ [981:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [981:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [981:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [981:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [981:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [981:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [982:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [982:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [983:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [983:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [983:44] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'database' @ [985:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [985:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault.Update<ContractState>): Vault.Update<ContractState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Update<ContractState>

'services' @ [986:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeCash' @ [986:22] ==> @JvmOverloads public fun ServiceHub.consumeCash(amount: Amount<Currency>, to: Party = ..., notary: Party): Vault.Update<ContractState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [986:38] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [986:56] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'database' @ [988:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [988:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>?)>?)

'TODAY' @ [989:32] ==> private final val TODAY: (Instant..Instant?) defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'TimeCondition' @ [990:43] ==> public constructor TimeCondition(type: QueryCriteria.TimeInstantType, predicate: ColumnPredicate<Instant>) defined in net.corda.core.node.services.vault.QueryCriteria.TimeCondition[DeserializedClassConstructorDescriptor]

'CONSUMED' @ [991:51] ==> enum entry CONSUMED defined in net.corda.core.node.services.vault.QueryCriteria.TimeInstantType[FakeCallableDescriptorForObject]

'BinaryComparison' @ [991:77] ==> public constructor BinaryComparison<C : Comparable<(Instant..Instant?)>>(operator: BinaryComparisonOperator, rightLiteral: (Instant..Instant?)) defined in net.corda.core.node.services.vault.ColumnPredicate.BinaryComparison[DeserializedClassConstructorDescriptor]
Inferred types:
    <C : Comparable<C>> -> (java.time.Instant..java.time.Instant?)

'GREATER_THAN_OR_EQUAL' @ [991:119] ==> enum entry GREATER_THAN_OR_EQUAL defined in net.corda.core.node.services.vault.BinaryComparisonOperator[FakeCallableDescriptorForObject]

'asOfDateTime' @ [991:142] ==> val asOfDateTime: (Instant..Instant?) defined in net.corda.node.services.vault.VaultQueryTests.`states consumed after time`.<anonymous>[LocalVariableDescriptor]

'VaultQueryCriteria' @ [992:28] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Vault' @ [992:56] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'CONSUMED' @ [992:74] ==> enum entry CONSUMED defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'consumedAfterExpression' @ [993:37] ==> val consumedAfterExpression: QueryCriteria.TimeCondition defined in net.corda.node.services.vault.VaultQueryTests.`states consumed after time`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [994:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [994:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteria' @ [994:64] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`states consumed after time`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [996:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'results' @ [996:24] ==> val results: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`states consumed after time`.<anonymous>[LocalVariableDescriptor]

'states' @ [996:32] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [996:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1001:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1003:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1003:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [1004:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1004:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1004:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1004:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1004:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1004:96] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [1006:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1006:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?)>): AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>?)>?)>

'PageSpecification' @ [1008:30] ==> public constructor PageSpecification(pageNumber: Int = ..., pageSize: Int = ...) defined in net.corda.core.node.services.vault.PageSpecification[DeserializedClassConstructorDescriptor]

'DEFAULT_PAGE_NUM' @ [1008:48] ==> public const val DEFAULT_PAGE_NUM: Int defined in net.corda.core.node.services.vault[DeserializedPropertyDescriptor]

'VaultQueryCriteria' @ [1009:28] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Vault' @ [1009:56] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'ALL' @ [1009:74] ==> enum entry ALL defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [1010:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1010:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria, paging: PageSpecification): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteria' @ [1010:64] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`all states with paging specification - first page`.<anonymous>[LocalVariableDescriptor]

'pagingSpec' @ [1010:83] ==> val pagingSpec: PageSpecification defined in net.corda.node.services.vault.VaultQueryTests.`all states with paging specification - first page`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1012:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'results' @ [1012:24] ==> val results: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`all states with paging specification - first page`.<anonymous>[LocalVariableDescriptor]

'states' @ [1012:32] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1012:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [1013:13] ==> @CheckReturnValue public open fun assertThat(p0: Long): (AbstractLongAssert<*>..AbstractLongAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'results' @ [1013:24] ==> val results: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`all states with paging specification - first page`.<anonymous>[LocalVariableDescriptor]

'totalStatesAvailable' @ [1013:32] ==> public final val totalStatesAvailable: Long defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [1013:54] ==> public open fun isEqualTo(p0: Long): (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractLongAssert[JavaMethodDescriptor]

'Test' @ [1018:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1020:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1020:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [1021:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1021:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1021:46] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1021:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1021:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1021:93] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [1023:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1023:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?)>): AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>..org.assertj.core.api.AbstractLongAssert<out (org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>..org.assertj.core.api.AbstractLongAssert<out kotlin.Any?>?)>?)>?)>?)>?)>

'PageSpecification' @ [1026:30] ==> public constructor PageSpecification(pageNumber: Int = ..., pageSize: Int = ...) defined in net.corda.core.node.services.vault.PageSpecification[DeserializedClassConstructorDescriptor]

'VaultQueryCriteria' @ [1028:28] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Vault' @ [1028:56] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'ALL' @ [1028:74] ==> enum entry ALL defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [1029:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1029:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria, paging: PageSpecification): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteria' @ [1029:64] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`all states with paging specification  - last`.<anonymous>[LocalVariableDescriptor]

'pagingSpec' @ [1029:83] ==> val pagingSpec: PageSpecification defined in net.corda.node.services.vault.VaultQueryTests.`all states with paging specification  - last`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1030:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'results' @ [1030:24] ==> val results: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`all states with paging specification  - last`.<anonymous>[LocalVariableDescriptor]

'states' @ [1030:32] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1030:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [1031:13] ==> @CheckReturnValue public open fun assertThat(p0: Long): (AbstractLongAssert<*>..AbstractLongAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'results' @ [1031:24] ==> val results: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`all states with paging specification  - last`.<anonymous>[LocalVariableDescriptor]

'totalStatesAvailable' @ [1031:32] ==> public final val totalStatesAvailable: Long defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [1031:54] ==> public open fun isEqualTo(p0: Long): (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>..AbstractLongAssert<out (AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>..AbstractLongAssert<out (AbstractLongAssert<out Any?>..AbstractLongAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractLongAssert[JavaMethodDescriptor]

'Test' @ [1036:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'expectedEx' @ [1038:9] ==> public final val expectedEx: ExpectedException defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'expect' @ [1038:20] ==> public open fun expect(p0: (Class<out (Throwable..Throwable?)>..Class<out (Throwable..Throwable?)>?)): Unit defined in org.junit.rules.ExpectedException[JavaMethodDescriptor]

'VaultQueryException' @ [1038:27] ==> public constructor VaultQueryException(description: String) defined in net.corda.core.node.services.VaultQueryException[DeserializedClassConstructorDescriptor]

'java' @ [1038:54] ==> public val <T> KClass<VaultQueryException>.java: Class<VaultQueryException> defined in kotlin.jvm[DeserializedPropertyDescriptor]
Inferred types:
    <T> -> VaultQueryException

'expectedEx' @ [1039:9] ==> public final val expectedEx: ExpectedException defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'expectMessage' @ [1039:20] ==> public open fun expectMessage(p0: (String..String?)): Unit defined in org.junit.rules.ExpectedException[JavaMethodDescriptor]

'database' @ [1041:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1041:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [1042:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1042:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1042:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1042:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1042:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1042:96] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [1044:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1044:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault.Page<ContractState>): Vault.Page<ContractState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Page<ContractState>

'PageSpecification' @ [1045:30] ==> public constructor PageSpecification(pageNumber: Int = ..., pageSize: Int = ...) defined in net.corda.core.node.services.vault.PageSpecification[DeserializedClassConstructorDescriptor]

'VaultQueryCriteria' @ [1047:28] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Vault' @ [1047:56] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'ALL' @ [1047:74] ==> enum entry ALL defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [1048:13] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1048:27] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria, paging: PageSpecification): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteria' @ [1048:50] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`invalid page number`.<anonymous>[LocalVariableDescriptor]

'pagingSpec' @ [1048:69] ==> val pagingSpec: PageSpecification defined in net.corda.node.services.vault.VaultQueryTests.`invalid page number`.<anonymous>[LocalVariableDescriptor]

'Test' @ [1053:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'expectedEx' @ [1055:9] ==> public final val expectedEx: ExpectedException defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'expect' @ [1055:20] ==> public open fun expect(p0: (Class<out (Throwable..Throwable?)>..Class<out (Throwable..Throwable?)>?)): Unit defined in org.junit.rules.ExpectedException[JavaMethodDescriptor]

'VaultQueryException' @ [1055:27] ==> public constructor VaultQueryException(description: String) defined in net.corda.core.node.services.VaultQueryException[DeserializedClassConstructorDescriptor]

'java' @ [1055:54] ==> public val <T> KClass<VaultQueryException>.java: Class<VaultQueryException> defined in kotlin.jvm[DeserializedPropertyDescriptor]
Inferred types:
    <T> -> VaultQueryException

'expectedEx' @ [1056:9] ==> public final val expectedEx: ExpectedException defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'expectMessage' @ [1056:20] ==> public open fun expectMessage(p0: (String..String?)): Unit defined in org.junit.rules.ExpectedException[JavaMethodDescriptor]

'database' @ [1058:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1058:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [1059:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1059:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1059:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1059:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1059:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1059:96] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [1061:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1061:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault.Page<ContractState>): Vault.Page<ContractState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Page<ContractState>

'Suppress' @ [1062:13] ==> public constructor Suppress(vararg names: String) defined in kotlin.Suppress[DeserializedClassConstructorDescriptor]

'PageSpecification' @ [1063:30] ==> public constructor PageSpecification(pageNumber: Int = ..., pageSize: Int = ...) defined in net.corda.core.node.services.vault.PageSpecification[DeserializedClassConstructorDescriptor]

'DEFAULT_PAGE_NUM' @ [1063:48] ==> public const val DEFAULT_PAGE_NUM: Int defined in net.corda.core.node.services.vault[DeserializedPropertyDescriptor]

'MAX_PAGE_SIZE' @ [1063:66] ==> public const val MAX_PAGE_SIZE: Int defined in net.corda.core.node.services.vault[DeserializedPropertyDescriptor]

'VaultQueryCriteria' @ [1064:28] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Vault' @ [1064:56] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'ALL' @ [1064:74] ==> enum entry ALL defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [1065:13] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1065:27] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria, paging: PageSpecification): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteria' @ [1065:50] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`invalid page size`.<anonymous>[LocalVariableDescriptor]

'pagingSpec' @ [1065:69] ==> val pagingSpec: PageSpecification defined in net.corda.node.services.vault.VaultQueryTests.`invalid page size`.<anonymous>[LocalVariableDescriptor]

'Test' @ [1070:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'expectedEx' @ [1072:9] ==> public final val expectedEx: ExpectedException defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'expect' @ [1072:20] ==> public open fun expect(p0: (Class<out (Throwable..Throwable?)>..Class<out (Throwable..Throwable?)>?)): Unit defined in org.junit.rules.ExpectedException[JavaMethodDescriptor]

'VaultQueryException' @ [1072:27] ==> public constructor VaultQueryException(description: String) defined in net.corda.core.node.services.VaultQueryException[DeserializedClassConstructorDescriptor]

'java' @ [1072:54] ==> public val <T> KClass<VaultQueryException>.java: Class<VaultQueryException> defined in kotlin.jvm[DeserializedPropertyDescriptor]
Inferred types:
    <T> -> VaultQueryException

'expectedEx' @ [1073:9] ==> public final val expectedEx: ExpectedException defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'expectMessage' @ [1073:20] ==> public open fun expectMessage(p0: (String..String?)): Unit defined in org.junit.rules.ExpectedException[JavaMethodDescriptor]

'database' @ [1075:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1075:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [1076:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1076:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1076:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1076:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1076:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1076:96] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [1078:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1078:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault.Page<ContractState>): Vault.Page<ContractState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Page<ContractState>

'VaultQueryCriteria' @ [1079:28] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Vault' @ [1079:56] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'ALL' @ [1079:74] ==> enum entry ALL defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [1080:13] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1080:27] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteria' @ [1080:50] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`pagination not specified but more than default results available`.<anonymous>[LocalVariableDescriptor]

'Test' @ [1085:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'setUpDb' @ [1088:9] ==> private final fun setUpDb(_database: CordaPersistence, delay: Long = ...): Unit defined in net.corda.node.services.vault.VaultQueryTests[SimpleFunctionDescriptorImpl]

'database' @ [1088:17] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'database' @ [1090:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1090:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>): AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>..org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>..org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>..org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>..org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>..org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>..org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>..org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>..org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>..org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>..org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>..org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>..org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>..org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>..org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>..org.assertj.core.api.AbstractComparableAssert<out (org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractComparableAssert<out kotlin.Any?, out kotlin.Any?>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>?), (net.corda.core.node.services.Vault.StateStatus..net.corda.core.node.services.Vault.StateStatus?)>

'SortColumn' @ [1092:33] ==> public constructor SortColumn(sortAttribute: SortAttribute, direction: Sort.Direction = ...) defined in net.corda.core.node.services.vault.Sort.SortColumn[DeserializedClassConstructorDescriptor]

'Standard' @ [1092:58] ==> public constructor Standard(attribute: Sort.Attribute) defined in net.corda.core.node.services.vault.SortAttribute.Standard[DeserializedClassConstructorDescriptor]

'CONTRACT_TYPE' @ [1092:92] ==> enum entry CONTRACT_TYPE defined in net.corda.core.node.services.vault.Sort.VaultStateAttribute[FakeCallableDescriptorForObject]

'DESC' @ [1092:123] ==> enum entry DESC defined in net.corda.core.node.services.vault.Sort.Direction[FakeCallableDescriptorForObject]

'SortColumn' @ [1093:33] ==> public constructor SortColumn(sortAttribute: SortAttribute, direction: Sort.Direction = ...) defined in net.corda.core.node.services.vault.Sort.SortColumn[DeserializedClassConstructorDescriptor]

'Standard' @ [1093:58] ==> public constructor Standard(attribute: Sort.Attribute) defined in net.corda.core.node.services.vault.SortAttribute.Standard[DeserializedClassConstructorDescriptor]

'STATE_STATUS' @ [1093:92] ==> enum entry STATE_STATUS defined in net.corda.core.node.services.vault.Sort.VaultStateAttribute[FakeCallableDescriptorForObject]

'ASC' @ [1093:122] ==> enum entry ASC defined in net.corda.core.node.services.vault.Sort.Direction[FakeCallableDescriptorForObject]

'SortColumn' @ [1094:33] ==> public constructor SortColumn(sortAttribute: SortAttribute, direction: Sort.Direction = ...) defined in net.corda.core.node.services.vault.Sort.SortColumn[DeserializedClassConstructorDescriptor]

'Standard' @ [1094:58] ==> public constructor Standard(attribute: Sort.Attribute) defined in net.corda.core.node.services.vault.SortAttribute.Standard[DeserializedClassConstructorDescriptor]

'CONSUMED_TIME' @ [1094:92] ==> enum entry CONSUMED_TIME defined in net.corda.core.node.services.vault.Sort.VaultStateAttribute[FakeCallableDescriptorForObject]

'DESC' @ [1094:123] ==> enum entry DESC defined in net.corda.core.node.services.vault.Sort.Direction[FakeCallableDescriptorForObject]

'Sort' @ [1095:27] ==> public constructor Sort(columns: Collection<Sort.SortColumn>) defined in net.corda.core.node.services.vault.Sort[DeserializedClassConstructorDescriptor]

'setOf' @ [1095:32] ==> public fun <T> setOf(vararg elements: Sort.SortColumn): Set<Sort.SortColumn> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> SortColumn

'sortCol1' @ [1095:38] ==> val sortCol1: Sort.SortColumn defined in net.corda.node.services.vault.VaultQueryTests.`sorting - all states sorted by contract type, state status, consumed time`.<anonymous>[LocalVariableDescriptor]

'sortCol2' @ [1095:48] ==> val sortCol2: Sort.SortColumn defined in net.corda.node.services.vault.VaultQueryTests.`sorting - all states sorted by contract type, state status, consumed time`.<anonymous>[LocalVariableDescriptor]

'sortCol3' @ [1095:58] ==> val sortCol3: Sort.SortColumn defined in net.corda.node.services.vault.VaultQueryTests.`sorting - all states sorted by contract type, state status, consumed time`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [1096:26] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1096:40] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria, sorting: Sort): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'VaultQueryCriteria' @ [1096:63] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Vault' @ [1096:91] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'ALL' @ [1096:109] ==> enum entry ALL defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'sorting' @ [1096:125] ==> val sorting: Sort defined in net.corda.node.services.vault.VaultQueryTests.`sorting - all states sorted by contract type, state status, consumed time`.<anonymous>[LocalVariableDescriptor]

'result' @ [1098:26] ==> val result: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`sorting - all states sorted by contract type, state status, consumed time`.<anonymous>[LocalVariableDescriptor]

'states' @ [1098:33] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'result' @ [1099:28] ==> val result: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`sorting - all states sorted by contract type, state status, consumed time`.<anonymous>[LocalVariableDescriptor]

'statesMetadata' @ [1099:35] ==> public final val statesMetadata: List<Vault.StateMetadata> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'..' @ [1101:23] ==> public final operator fun rangeTo(other: Int): IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor]

'states' @ [1101:26] ==> val states: List<StateAndRef<ContractState>> defined in net.corda.node.services.vault.VaultQueryTests.`sorting - all states sorted by contract type, state status, consumed time`.<anonymous>[LocalVariableDescriptor]

'size' @ [1101:33] ==> public abstract val size: Int defined in kotlin.collections.List[DeserializedPropertyDescriptor]

'println' @ [1102:17] ==> @InlineOnly public inline fun println(message: Any?): Unit defined in kotlin.io[DeserializedSimpleFunctionDescriptor]

'states' @ [1102:28] ==> val states: List<StateAndRef<ContractState>> defined in net.corda.node.services.vault.VaultQueryTests.`sorting - all states sorted by contract type, state status, consumed time`.<anonymous>[LocalVariableDescriptor]

'i' @ [1102:35] ==> val i: Int defined in net.corda.node.services.vault.VaultQueryTests.`sorting - all states sorted by contract type, state status, consumed time`.<anonymous>[LocalVariableDescriptor]

'ref' @ [1102:38] ==> public final val ref: StateRef defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'metadata' @ [1102:47] ==> val metadata: List<Vault.StateMetadata> defined in net.corda.node.services.vault.VaultQueryTests.`sorting - all states sorted by contract type, state status, consumed time`.<anonymous>[LocalVariableDescriptor]

'i' @ [1102:56] ==> val i: Int defined in net.corda.node.services.vault.VaultQueryTests.`sorting - all states sorted by contract type, state status, consumed time`.<anonymous>[LocalVariableDescriptor]

'contractStateClassName' @ [1102:59] ==> public final val contractStateClassName: String defined in net.corda.core.node.services.Vault.StateMetadata[DeserializedPropertyDescriptor]

'metadata' @ [1102:86] ==> val metadata: List<Vault.StateMetadata> defined in net.corda.node.services.vault.VaultQueryTests.`sorting - all states sorted by contract type, state status, consumed time`.<anonymous>[LocalVariableDescriptor]

'i' @ [1102:95] ==> val i: Int defined in net.corda.node.services.vault.VaultQueryTests.`sorting - all states sorted by contract type, state status, consumed time`.<anonymous>[LocalVariableDescriptor]

'status' @ [1102:98] ==> public final val status: Vault.StateStatus defined in net.corda.core.node.services.Vault.StateMetadata[DeserializedPropertyDescriptor]

'metadata' @ [1102:109] ==> val metadata: List<Vault.StateMetadata> defined in net.corda.node.services.vault.VaultQueryTests.`sorting - all states sorted by contract type, state status, consumed time`.<anonymous>[LocalVariableDescriptor]

'i' @ [1102:118] ==> val i: Int defined in net.corda.node.services.vault.VaultQueryTests.`sorting - all states sorted by contract type, state status, consumed time`.<anonymous>[LocalVariableDescriptor]

'consumedTime' @ [1102:121] ==> public final val consumedTime: Instant? defined in net.corda.core.node.services.Vault.StateMetadata[DeserializedPropertyDescriptor]

'assertThat' @ [1105:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'states' @ [1105:24] ==> val states: List<StateAndRef<ContractState>> defined in net.corda.node.services.vault.VaultQueryTests.`sorting - all states sorted by contract type, state status, consumed time`.<anonymous>[LocalVariableDescriptor]

'hasSize' @ [1105:32] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [1106:13] ==> @CheckReturnValue public open fun assertThat(p0: (String..String?)): (AbstractCharSequenceAssert<*, (String..String?)>..AbstractCharSequenceAssert<*, (String..String?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'metadata' @ [1106:24] ==> val metadata: List<Vault.StateMetadata> defined in net.corda.node.services.vault.VaultQueryTests.`sorting - all states sorted by contract type, state status, consumed time`.<anonymous>[LocalVariableDescriptor]

'first' @ [1106:33] ==> public fun <T> List<Vault.StateMetadata>.first(): Vault.StateMetadata defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateMetadata

'contractStateClassName' @ [1106:41] ==> public final val contractStateClassName: String defined in net.corda.core.node.services.Vault.StateMetadata[DeserializedPropertyDescriptor]

'isEqualTo' @ [1106:65] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>?), (String..String?)>?) defined in org.assertj.core.api.AbstractCharSequenceAssert[JavaMethodDescriptor]

'assertThat' @ [1107:13] ==> @CheckReturnValue public open fun <T : (Comparable<(Vault.StateStatus..Vault.StateStatus?)>..Comparable<(Vault.StateStatus..Vault.StateStatus?)>?)> assertThat(p0: (Vault.StateStatus..Vault.StateStatus?)): (AbstractComparableAssert<*, (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<*, (Vault.StateStatus..Vault.StateStatus?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Comparable<(T..T?)>..Comparable<(T..T?)>?)> -> StateStatus

'metadata' @ [1107:24] ==> val metadata: List<Vault.StateMetadata> defined in net.corda.node.services.vault.VaultQueryTests.`sorting - all states sorted by contract type, state status, consumed time`.<anonymous>[LocalVariableDescriptor]

'first' @ [1107:33] ==> public fun <T> List<Vault.StateMetadata>.first(): Vault.StateMetadata defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateMetadata

'status' @ [1107:41] ==> public final val status: Vault.StateStatus defined in net.corda.core.node.services.Vault.StateMetadata[DeserializedPropertyDescriptor]

'isEqualTo' @ [1107:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?) defined in org.assertj.core.api.AbstractComparableAssert[JavaMethodDescriptor]

'Vault' @ [1107:59] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'UNCONSUMED' @ [1107:77] ==> enum entry UNCONSUMED defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'assertThat' @ [1108:13] ==> @CheckReturnValue public open fun assertThat(p0: (String..String?)): (AbstractCharSequenceAssert<*, (String..String?)>..AbstractCharSequenceAssert<*, (String..String?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'metadata' @ [1108:24] ==> val metadata: List<Vault.StateMetadata> defined in net.corda.node.services.vault.VaultQueryTests.`sorting - all states sorted by contract type, state status, consumed time`.<anonymous>[LocalVariableDescriptor]

'last' @ [1108:33] ==> public fun <T> List<Vault.StateMetadata>.last(): Vault.StateMetadata defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateMetadata

'contractStateClassName' @ [1108:40] ==> public final val contractStateClassName: String defined in net.corda.core.node.services.Vault.StateMetadata[DeserializedPropertyDescriptor]

'isEqualTo' @ [1108:64] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>?), (String..String?)>?) defined in org.assertj.core.api.AbstractCharSequenceAssert[JavaMethodDescriptor]

'assertThat' @ [1109:13] ==> @CheckReturnValue public open fun <T : (Comparable<(Vault.StateStatus..Vault.StateStatus?)>..Comparable<(Vault.StateStatus..Vault.StateStatus?)>?)> assertThat(p0: (Vault.StateStatus..Vault.StateStatus?)): (AbstractComparableAssert<*, (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<*, (Vault.StateStatus..Vault.StateStatus?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Comparable<(T..T?)>..Comparable<(T..T?)>?)> -> StateStatus

'metadata' @ [1109:24] ==> val metadata: List<Vault.StateMetadata> defined in net.corda.node.services.vault.VaultQueryTests.`sorting - all states sorted by contract type, state status, consumed time`.<anonymous>[LocalVariableDescriptor]

'last' @ [1109:33] ==> public fun <T> List<Vault.StateMetadata>.last(): Vault.StateMetadata defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateMetadata

'status' @ [1109:40] ==> public final val status: Vault.StateStatus defined in net.corda.core.node.services.Vault.StateMetadata[DeserializedPropertyDescriptor]

'isEqualTo' @ [1109:48] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?), (Vault.StateStatus..Vault.StateStatus?)>?) defined in org.assertj.core.api.AbstractComparableAssert[JavaMethodDescriptor]

'Vault' @ [1109:58] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'CONSUMED' @ [1109:76] ==> enum entry CONSUMED defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'Test' @ [1113:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1115:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1115:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<LinearState>): Vault<LinearState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<LinearState>

'services' @ [1116:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1116:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1116:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1116:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1116:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1116:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1117:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCommodity' @ [1117:22] ==> public fun ServiceHub.fillWithSomeTestCommodity(amount: Amount<Commodity>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<CommodityContract.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'Amount' @ [1117:48] ==> public constructor Amount<T : Any>(tokenQuantity: Long, token: Commodity) defined in net.corda.core.contracts.Amount[DeserializedClassConstructorDescriptor]
Inferred types:
    <T : Any> -> Commodity

'Commodity' @ [1117:60] ==> public companion object defined in net.corda.finance.contracts.Commodity[FakeCallableDescriptorForObject]

'getInstance' @ [1117:70] ==> public final fun getInstance(commodityCode: String): Commodity? defined in net.corda.finance.contracts.Commodity.Companion[DeserializedSimpleFunctionDescriptor]

'notaryServices' @ [1117:94] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'services' @ [1118:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1118:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'database' @ [1120:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1120:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?)): (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>?)>?)

'vaultQuerySvc' @ [1121:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1121:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(): Vault.Page<FungibleAsset<*>> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> FungibleAsset<*>

'assertThat' @ [1122:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..List<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?)): (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<FungibleAsset<*>>

'results' @ [1122:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets`.<anonymous>[LocalVariableDescriptor]

'states' @ [1122:32] ==> public final val states: List<StateAndRef<FungibleAsset<*>>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1122:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1126:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1128:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1128:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [1129:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1129:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1129:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1129:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1129:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1129:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [1131:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1131:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault.Update<ContractState>): Vault.Update<ContractState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Update<ContractState>

'services' @ [1132:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeCash' @ [1132:22] ==> @JvmOverloads public fun ServiceHub.consumeCash(amount: Amount<Currency>, to: Party = ..., notary: Party): Vault.Update<ContractState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1132:37] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [1132:55] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'database' @ [1134:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1134:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<LinearState>): Vault<LinearState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<LinearState>

'services' @ [1135:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCommodity' @ [1135:22] ==> public fun ServiceHub.fillWithSomeTestCommodity(amount: Amount<Commodity>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<CommodityContract.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'Amount' @ [1135:48] ==> public constructor Amount<T : Any>(tokenQuantity: Long, token: Commodity) defined in net.corda.core.contracts.Amount[DeserializedClassConstructorDescriptor]
Inferred types:
    <T : Any> -> Commodity

'Commodity' @ [1135:60] ==> public companion object defined in net.corda.finance.contracts.Commodity[FakeCallableDescriptorForObject]

'getInstance' @ [1135:70] ==> public final fun getInstance(commodityCode: String): Commodity? defined in net.corda.finance.contracts.Commodity.Companion[DeserializedSimpleFunctionDescriptor]

'notaryServices' @ [1135:94] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'services' @ [1136:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1136:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'database' @ [1138:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1138:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?)): (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>?)>?)

'VaultQueryCriteria' @ [1139:28] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Vault' @ [1139:56] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'CONSUMED' @ [1139:74] ==> enum entry CONSUMED defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [1140:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1140:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<FungibleAsset<*>> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> FungibleAsset<*>

'criteria' @ [1140:67] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`consumed fungible assets`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1141:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..List<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?)): (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<FungibleAsset<*>>

'results' @ [1141:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`consumed fungible assets`.<anonymous>[LocalVariableDescriptor]

'states' @ [1141:32] ==> public final val states: List<StateAndRef<FungibleAsset<*>>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1141:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1145:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1147:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1147:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<LinearState>): Vault<LinearState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<LinearState>

'services' @ [1148:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1148:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1148:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1148:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1148:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1148:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1149:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1149:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'database' @ [1151:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1151:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>?)

'vaultQuerySvc' @ [1152:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1152:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(): Vault.Page<Cash.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'assertThat' @ [1153:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..List<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [1153:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash fungible assets`.<anonymous>[LocalVariableDescriptor]

'states' @ [1153:32] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1153:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1157:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1159:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1159:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [1160:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1160:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1160:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1160:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1160:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1160:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [1162:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1162:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault.Update<ContractState>): Vault.Update<ContractState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Update<ContractState>

'services' @ [1163:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeCash' @ [1163:22] ==> @JvmOverloads public fun ServiceHub.consumeCash(amount: Amount<Currency>, to: Party = ..., notary: Party): Vault.Update<ContractState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1163:37] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [1163:55] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'database' @ [1166:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1166:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>?)

'vaultQuerySvc' @ [1167:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1167:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<Cash.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'FungibleAssetQueryCriteria' @ [1167:61] ==> @JvmOverloads public constructor FungibleAssetQueryCriteria(participants: List<AbstractParty>? = ..., owner: List<AbstractParty>? = ..., quantity: ColumnPredicate<Long>? = ..., issuer: List<AbstractParty>? = ..., issuerRef: List<OpaqueBytes>? = ..., status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria[DeserializedClassConstructorDescriptor]

'assertThat' @ [1168:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (Vault.StateMetadata..Vault.StateMetadata?)>..List<(Vault.StateMetadata..Vault.StateMetadata?)>?)): (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateMetadata

'results' @ [1168:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash fungible assets after spending`.<anonymous>[LocalVariableDescriptor]

'statesMetadata' @ [1168:32] ==> public final val statesMetadata: List<Vault.StateMetadata> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1168:48] ==> public open fun hasSize(p0: Int): (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [1169:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..List<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [1169:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash fungible assets after spending`.<anonymous>[LocalVariableDescriptor]

'states' @ [1169:32] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1169:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1173:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1175:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1175:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [1176:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1176:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1176:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1176:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1176:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1176:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [1178:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1178:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault.Update<ContractState>): Vault.Update<ContractState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Update<ContractState>

'services' @ [1179:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeCash' @ [1179:22] ==> @JvmOverloads public fun ServiceHub.consumeCash(amount: Amount<Currency>, to: Party = ..., notary: Party): Vault.Update<ContractState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1179:37] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [1179:55] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'database' @ [1182:17] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1182:26] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<LinearState>): Vault<LinearState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<LinearState>

'services' @ [1183:21] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1183:30] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'database' @ [1185:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1185:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Unit): Unit defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Unit

'services' @ [1186:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeLinearStates' @ [1186:22] ==> public fun ServiceHub.consumeLinearStates(linearStates: List<StateAndRef<LinearState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'linearStates' @ [1186:42] ==> val linearStates: Vault<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`consumed cash fungible assets`[LocalVariableDescriptor]

'states' @ [1186:55] ==> public final val states: Iterable<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'toList' @ [1186:62] ==> public fun <T> Iterable<StateAndRef<LinearState>>.toList(): List<StateAndRef<LinearState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>

'DUMMY_NOTARY' @ [1186:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'database' @ [1188:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1188:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>?)

'VaultQueryCriteria' @ [1189:28] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Vault' @ [1189:56] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'CONSUMED' @ [1189:74] ==> enum entry CONSUMED defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [1190:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1190:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<Cash.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'criteria' @ [1190:61] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`consumed cash fungible assets`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1191:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..List<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [1191:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`consumed cash fungible assets`.<anonymous>[LocalVariableDescriptor]

'states' @ [1191:32] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1191:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1195:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1197:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1197:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<DealState>): Vault<DealState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<DealState>

'services' @ [1198:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1198:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1198:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1198:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1198:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1198:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1199:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1199:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [1200:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [1200:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [1200:44] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'database' @ [1202:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1202:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>?)

'vaultQuerySvc' @ [1203:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1203:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(): Vault.Page<LinearState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> LinearState

'assertThat' @ [1204:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<LinearState>..StateAndRef<LinearState>?)>..List<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<LinearState>

'results' @ [1204:24] ==> val results: Vault.Page<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads`.<anonymous>[LocalVariableDescriptor]

'states' @ [1204:32] ==> public final val states: List<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1204:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1208:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1210:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1210:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault.Update<ContractState>): Vault.Update<ContractState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Update<ContractState>

'services' @ [1211:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1211:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1211:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1211:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1211:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1211:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1212:32] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1212:41] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [1213:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1213:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [1214:30] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [1214:39] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [1214:61] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'services' @ [1216:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeLinearStates' @ [1216:22] ==> public fun ServiceHub.consumeLinearStates(linearStates: List<StateAndRef<LinearState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'linearStates' @ [1216:42] ==> val linearStates: Vault<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`consumed linear heads`.<anonymous>[LocalVariableDescriptor]

'states' @ [1216:55] ==> public final val states: Iterable<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'toList' @ [1216:62] ==> public fun <T> Iterable<StateAndRef<LinearState>>.toList(): List<StateAndRef<LinearState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>

'DUMMY_NOTARY' @ [1216:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [1217:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeDeals' @ [1217:22] ==> public fun ServiceHub.consumeDeals(dealStates: List<StateAndRef<DealState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'dealStates' @ [1217:35] ==> val dealStates: Vault<DealState> defined in net.corda.node.services.vault.VaultQueryTests.`consumed linear heads`.<anonymous>[LocalVariableDescriptor]

'states' @ [1217:46] ==> public final val states: Iterable<StateAndRef<DealState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'filter' @ [1217:53] ==> public inline fun <T> Iterable<StateAndRef<DealState>>.filter(predicate: (StateAndRef<DealState>) -> Boolean): List<StateAndRef<DealState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<DealState>

'it' @ [1217:62] ==> value-parameter it: StateAndRef<DealState> defined in net.corda.node.services.vault.VaultQueryTests.`consumed linear heads`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'state' @ [1217:65] ==> public final val state: TransactionState<DealState> defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'data' @ [1217:71] ==> public final val data: DealState defined in net.corda.core.contracts.TransactionState[DeserializedPropertyDescriptor]

'linearId' @ [1217:76] ==> public abstract val linearId: UniqueIdentifier defined in net.corda.finance.contracts.DealState[DeserializedPropertyDescriptor]

'externalId' @ [1217:85] ==> public final val externalId: String? defined in net.corda.core.contracts.UniqueIdentifier[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [1217:108] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [1218:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeCash' @ [1218:22] ==> @JvmOverloads public fun ServiceHub.consumeCash(amount: Amount<Currency>, to: Party = ..., notary: Party): Vault.Update<ContractState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1218:37] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [1218:55] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'database' @ [1220:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1220:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>?)

'VaultQueryCriteria' @ [1221:28] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Vault' @ [1221:56] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'CONSUMED' @ [1221:74] ==> enum entry CONSUMED defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [1222:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1222:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<LinearState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> LinearState

'criteria' @ [1222:62] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`consumed linear heads`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1223:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<LinearState>..StateAndRef<LinearState>?)>..List<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<LinearState>

'results' @ [1223:24] ==> val results: Vault.Page<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`consumed linear heads`.<anonymous>[LocalVariableDescriptor]

'states' @ [1223:32] ==> public final val states: List<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1223:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1229:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1232:13] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1232:22] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<LinearState>): Vault<LinearState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<LinearState>

'services' @ [1233:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1233:26] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'database' @ [1235:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1235:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>?)

'issuedStates' @ [1237:29] ==> val issuedStates: Vault<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId without external Id`[LocalVariableDescriptor]

'states' @ [1237:42] ==> public final val states: Iterable<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'map' @ [1237:49] ==> public inline fun <T, R> Iterable<StateAndRef<LinearState>>.map(transform: (StateAndRef<LinearState>) -> UUID): List<UUID> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>
    <R> -> UUID

'it' @ [1237:55] ==> value-parameter it: StateAndRef<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId without external Id`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'state' @ [1237:58] ==> public final val state: TransactionState<LinearState> defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'data' @ [1237:64] ==> public final val data: LinearState defined in net.corda.core.contracts.TransactionState[DeserializedPropertyDescriptor]

'linearId' @ [1237:69] ==> public abstract val linearId: UniqueIdentifier defined in net.corda.core.contracts.LinearState[DeserializedPropertyDescriptor]

'id' @ [1237:78] ==> public final val id: UUID defined in net.corda.core.contracts.UniqueIdentifier[DeserializedPropertyDescriptor]

'toList' @ [1237:83] ==> public fun <T> Iterable<UUID>.toList(): List<UUID> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> UUID

'LinearStateQueryCriteria' @ [1238:28] ==> @JvmOverloads public constructor LinearStateQueryCriteria(participants: List<AbstractParty>? = ..., uuid: List<UUID>? = ..., externalId: List<String>? = ..., status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria[DeserializedClassConstructorDescriptor]

'listOf' @ [1238:60] ==> public fun <T> listOf(vararg elements: UUID): List<UUID> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> UUID

'linearIds' @ [1238:67] ==> val linearIds: List<UUID> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId without external Id`.<anonymous>[LocalVariableDescriptor]

'first' @ [1238:77] ==> public fun <T> List<UUID>.first(): UUID defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> UUID

'linearIds' @ [1238:86] ==> val linearIds: List<UUID> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId without external Id`.<anonymous>[LocalVariableDescriptor]

'last' @ [1238:96] ==> public fun <T> List<UUID>.last(): UUID defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> UUID

'vaultQuerySvc' @ [1239:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1239:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<LinearState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> LinearState

'criteria' @ [1239:62] ==> val criteria: QueryCriteria.LinearStateQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId without external Id`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1241:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<LinearState>..StateAndRef<LinearState>?)>..List<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<LinearState>

'results' @ [1241:24] ==> val results: Vault.Page<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId without external Id`.<anonymous>[LocalVariableDescriptor]

'states' @ [1241:32] ==> public final val states: List<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1241:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1245:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'component1' @ [1247:14] ==> public final operator fun component1(): Vault<LinearState> defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor]

'component2' @ [1247:28] ==> public final operator fun component2(): Vault<LinearState> defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor]

'database' @ [1248:13] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1248:22] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Pair<Vault<LinearState>, Vault<LinearState>>): Pair<Vault<LinearState>, Vault<LinearState>> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Pair<Vault<LinearState>, Vault<LinearState>>

'services' @ [1249:36] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1249:45] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [1250:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1250:26] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [1251:36] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1251:45] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'Pair' @ [1252:17] ==> public constructor Pair<out A, out B>(first: Vault<LinearState>, second: Vault<LinearState>) defined in kotlin.Pair[DeserializedClassConstructorDescriptor]
Inferred types:
    <out A> -> Vault<LinearState>
    <out B> -> Vault<LinearState>

'linearState1' @ [1252:22] ==> val linearState1: Vault<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId with external Id`.<anonymous>[LocalVariableDescriptor]

'linearState3' @ [1252:36] ==> val linearState3: Vault<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId with external Id`.<anonymous>[LocalVariableDescriptor]

'database' @ [1254:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1254:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>?)

'listOf' @ [1255:29] ==> public fun <T> listOf(vararg elements: UUID): List<UUID> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> UUID

'linearState1' @ [1255:36] ==> val linearState1: Vault<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId with external Id`[LocalVariableDescriptor]

'states' @ [1255:49] ==> public final val states: Iterable<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'first' @ [1255:56] ==> public fun <T> Iterable<StateAndRef<LinearState>>.first(): StateAndRef<LinearState> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>

'state' @ [1255:64] ==> public final val state: TransactionState<LinearState> defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'data' @ [1255:70] ==> public final val data: LinearState defined in net.corda.core.contracts.TransactionState[DeserializedPropertyDescriptor]

'linearId' @ [1255:75] ==> public abstract val linearId: UniqueIdentifier defined in net.corda.core.contracts.LinearState[DeserializedPropertyDescriptor]

'id' @ [1255:84] ==> public final val id: UUID defined in net.corda.core.contracts.UniqueIdentifier[DeserializedPropertyDescriptor]

'linearState3' @ [1255:88] ==> val linearState3: Vault<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId with external Id`[LocalVariableDescriptor]

'states' @ [1255:101] ==> public final val states: Iterable<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'first' @ [1255:108] ==> public fun <T> Iterable<StateAndRef<LinearState>>.first(): StateAndRef<LinearState> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>

'state' @ [1255:116] ==> public final val state: TransactionState<LinearState> defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'data' @ [1255:122] ==> public final val data: LinearState defined in net.corda.core.contracts.TransactionState[DeserializedPropertyDescriptor]

'linearId' @ [1255:127] ==> public abstract val linearId: UniqueIdentifier defined in net.corda.core.contracts.LinearState[DeserializedPropertyDescriptor]

'id' @ [1255:136] ==> public final val id: UUID defined in net.corda.core.contracts.UniqueIdentifier[DeserializedPropertyDescriptor]

'LinearStateQueryCriteria' @ [1256:28] ==> @JvmOverloads public constructor LinearStateQueryCriteria(participants: List<AbstractParty>? = ..., uuid: List<UUID>? = ..., externalId: List<String>? = ..., status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria[DeserializedClassConstructorDescriptor]

'linearIds' @ [1256:60] ==> val linearIds: List<UUID> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId with external Id`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [1257:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1257:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<LinearState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> LinearState

'criteria' @ [1257:62] ==> val criteria: QueryCriteria.LinearStateQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId with external Id`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1258:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<LinearState>..StateAndRef<LinearState>?)>..List<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<LinearState>

'results' @ [1258:24] ==> val results: Vault.Page<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId with external Id`.<anonymous>[LocalVariableDescriptor]

'states' @ [1258:32] ==> public final val states: List<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1258:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1262:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1265:13] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1265:22] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> UniqueIdentifier): UniqueIdentifier defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> UniqueIdentifier

'services' @ [1266:28] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1266:37] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'txns' @ [1267:35] ==> val txns: Vault<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`all linear states for a given id`.<anonymous>[LocalVariableDescriptor]

'states' @ [1267:40] ==> public final val states: Iterable<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'first' @ [1267:47] ==> public fun <T> Iterable<StateAndRef<LinearState>>.first(): StateAndRef<LinearState> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>

'services' @ [1268:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'evolveLinearState' @ [1268:26] ==> public fun ServiceHub.evolveLinearState(linearState: StateAndRef<LinearState>, notary: Party): StateAndRef<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'linearState' @ [1268:44] ==> val linearState: StateAndRef<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`all linear states for a given id`.<anonymous>[LocalVariableDescriptor]

'DUMMY_NOTARY' @ [1268:57] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [1269:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'evolveLinearState' @ [1269:26] ==> public fun ServiceHub.evolveLinearState(linearState: StateAndRef<LinearState>, notary: Party): StateAndRef<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'linearState' @ [1269:44] ==> val linearState: StateAndRef<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`all linear states for a given id`.<anonymous>[LocalVariableDescriptor]

'DUMMY_NOTARY' @ [1269:57] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [1270:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'evolveLinearState' @ [1270:26] ==> public fun ServiceHub.evolveLinearState(linearState: StateAndRef<LinearState>, notary: Party): StateAndRef<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'linearState' @ [1270:44] ==> val linearState: StateAndRef<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`all linear states for a given id`.<anonymous>[LocalVariableDescriptor]

'DUMMY_NOTARY' @ [1270:57] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'linearState' @ [1271:17] ==> val linearState: StateAndRef<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`all linear states for a given id`.<anonymous>[LocalVariableDescriptor]

'state' @ [1271:29] ==> public final val state: TransactionState<LinearState> defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'data' @ [1271:35] ==> public final val data: LinearState defined in net.corda.core.contracts.TransactionState[DeserializedPropertyDescriptor]

'linearId' @ [1271:40] ==> public abstract val linearId: UniqueIdentifier defined in net.corda.core.contracts.LinearState[DeserializedPropertyDescriptor]

'database' @ [1273:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1273:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>?)

'LinearStateQueryCriteria' @ [1276:39] ==> @JvmOverloads public constructor LinearStateQueryCriteria(participants: List<AbstractParty>? = ..., uuid: List<UUID>? = ..., externalId: List<String>? = ..., status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria[DeserializedClassConstructorDescriptor]

'listOf' @ [1276:71] ==> public fun <T> listOf(element: UUID): List<UUID> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> UUID

'linearId' @ [1276:78] ==> val linearId: UniqueIdentifier defined in net.corda.node.services.vault.VaultQueryTests.`all linear states for a given id`[LocalVariableDescriptor]

'id' @ [1276:87] ==> public final val id: UUID defined in net.corda.core.contracts.UniqueIdentifier[DeserializedPropertyDescriptor]

'Vault' @ [1276:101] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'ALL' @ [1276:119] ==> enum entry ALL defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'VaultQueryCriteria' @ [1277:33] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Vault' @ [1277:61] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'ALL' @ [1277:79] ==> enum entry ALL defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [1278:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1278:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<LinearState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> LinearState

'linearStateCriteria' @ [1278:62] ==> val linearStateCriteria: QueryCriteria.LinearStateQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`all linear states for a given id`.<anonymous>[LocalVariableDescriptor]

'vaultCriteria' @ [1278:86] ==> val vaultCriteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`all linear states for a given id`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1280:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<LinearState>..StateAndRef<LinearState>?)>..List<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<LinearState>

'results' @ [1280:24] ==> val results: Vault.Page<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`all linear states for a given id`.<anonymous>[LocalVariableDescriptor]

'states' @ [1280:32] ==> public final val states: List<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1280:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1284:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1287:13] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1287:22] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> List<StateAndRef<LinearState>>): List<StateAndRef<LinearState>> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> List<StateAndRef<LinearState>>

'services' @ [1288:28] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1288:37] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'txns' @ [1289:36] ==> val txns: Vault<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`all linear states for a given id sorted by uuid`.<anonymous>[LocalVariableDescriptor]

'states' @ [1289:41] ==> public final val states: Iterable<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'toList' @ [1289:48] ==> public fun <T> Iterable<StateAndRef<LinearState>>.toList(): List<StateAndRef<LinearState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>

'services' @ [1290:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'evolveLinearStates' @ [1290:26] ==> public fun ServiceHub.evolveLinearStates(linearStates: List<StateAndRef<LinearState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'linearStates' @ [1290:45] ==> val linearStates: List<StateAndRef<LinearState>> defined in net.corda.node.services.vault.VaultQueryTests.`all linear states for a given id sorted by uuid`.<anonymous>[LocalVariableDescriptor]

'DUMMY_NOTARY' @ [1290:59] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [1291:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'evolveLinearStates' @ [1291:26] ==> public fun ServiceHub.evolveLinearStates(linearStates: List<StateAndRef<LinearState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'linearStates' @ [1291:45] ==> val linearStates: List<StateAndRef<LinearState>> defined in net.corda.node.services.vault.VaultQueryTests.`all linear states for a given id sorted by uuid`.<anonymous>[LocalVariableDescriptor]

'DUMMY_NOTARY' @ [1291:59] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [1292:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'evolveLinearStates' @ [1292:26] ==> public fun ServiceHub.evolveLinearStates(linearStates: List<StateAndRef<LinearState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'linearStates' @ [1292:45] ==> val linearStates: List<StateAndRef<LinearState>> defined in net.corda.node.services.vault.VaultQueryTests.`all linear states for a given id sorted by uuid`.<anonymous>[LocalVariableDescriptor]

'DUMMY_NOTARY' @ [1292:59] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'linearStates' @ [1293:17] ==> val linearStates: List<StateAndRef<LinearState>> defined in net.corda.node.services.vault.VaultQueryTests.`all linear states for a given id sorted by uuid`.<anonymous>[LocalVariableDescriptor]

'database' @ [1295:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1295:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>?)

'LinearStateQueryCriteria' @ [1297:39] ==> @JvmOverloads public constructor LinearStateQueryCriteria(participants: List<AbstractParty>? = ..., uuid: List<UUID>? = ..., externalId: List<String>? = ..., status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria[DeserializedClassConstructorDescriptor]

'linearStates' @ [1297:71] ==> val linearStates: List<StateAndRef<LinearState>> defined in net.corda.node.services.vault.VaultQueryTests.`all linear states for a given id sorted by uuid`[LocalVariableDescriptor]

'map' @ [1297:84] ==> public inline fun <T, R> Iterable<StateAndRef<LinearState>>.map(transform: (StateAndRef<LinearState>) -> UUID): List<UUID> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>
    <R> -> UUID

'it' @ [1297:90] ==> value-parameter it: StateAndRef<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`all linear states for a given id sorted by uuid`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'state' @ [1297:93] ==> public final val state: TransactionState<LinearState> defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'data' @ [1297:99] ==> public final val data: LinearState defined in net.corda.core.contracts.TransactionState[DeserializedPropertyDescriptor]

'linearId' @ [1297:104] ==> public abstract val linearId: UniqueIdentifier defined in net.corda.core.contracts.LinearState[DeserializedPropertyDescriptor]

'id' @ [1297:113] ==> public final val id: UUID defined in net.corda.core.contracts.UniqueIdentifier[DeserializedPropertyDescriptor]

'Vault' @ [1297:128] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'ALL' @ [1297:146] ==> enum entry ALL defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'VaultQueryCriteria' @ [1298:33] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Vault' @ [1298:61] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'ALL' @ [1298:79] ==> enum entry ALL defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'Sort' @ [1299:27] ==> public constructor Sort(columns: Collection<Sort.SortColumn>) defined in net.corda.core.node.services.vault.Sort[DeserializedClassConstructorDescriptor]

'setOf' @ [1299:32] ==> public fun <T> setOf(element: Sort.SortColumn): Set<Sort.SortColumn> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> SortColumn

'SortColumn' @ [1299:43] ==> public constructor SortColumn(sortAttribute: SortAttribute, direction: Sort.Direction = ...) defined in net.corda.core.node.services.vault.Sort.SortColumn[DeserializedClassConstructorDescriptor]

'Standard' @ [1299:68] ==> public constructor Standard(attribute: Sort.Attribute) defined in net.corda.core.node.services.vault.SortAttribute.Standard[DeserializedClassConstructorDescriptor]

'UUID' @ [1299:103] ==> enum entry UUID defined in net.corda.core.node.services.vault.Sort.LinearStateAttribute[FakeCallableDescriptorForObject]

'DESC' @ [1299:125] ==> enum entry DESC defined in net.corda.core.node.services.vault.Sort.Direction[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [1301:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1301:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria, sorting: Sort): Vault.Page<LinearState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> LinearState

'linearStateCriteria' @ [1301:62] ==> val linearStateCriteria: QueryCriteria.LinearStateQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`all linear states for a given id sorted by uuid`.<anonymous>[LocalVariableDescriptor]

'and' @ [1301:82] ==> public final fun and(criteria: QueryCriteria): QueryCriteria defined in net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria[DeserializedSimpleFunctionDescriptor]

'vaultCriteria' @ [1301:86] ==> val vaultCriteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`all linear states for a given id sorted by uuid`.<anonymous>[LocalVariableDescriptor]

'sorting' @ [1301:112] ==> val sorting: Sort defined in net.corda.node.services.vault.VaultQueryTests.`all linear states for a given id sorted by uuid`.<anonymous>[LocalVariableDescriptor]

'results' @ [1302:13] ==> val results: Vault.Page<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`all linear states for a given id sorted by uuid`.<anonymous>[LocalVariableDescriptor]

'states' @ [1302:21] ==> public final val states: List<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'forEach' @ [1302:28] ==> @HidesMembers public inline fun <T> Iterable<StateAndRef<LinearState>>.forEach(action: (StateAndRef<LinearState>) -> Unit): Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>

'println' @ [1302:38] ==> @InlineOnly public inline fun println(message: Any?): Unit defined in kotlin.io[DeserializedSimpleFunctionDescriptor]

'it' @ [1302:49] ==> value-parameter it: StateAndRef<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`all linear states for a given id sorted by uuid`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'state' @ [1302:52] ==> public final val state: TransactionState<LinearState> defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'data' @ [1302:58] ==> public final val data: LinearState defined in net.corda.core.contracts.TransactionState[DeserializedPropertyDescriptor]

'linearId' @ [1302:63] ==> public abstract val linearId: UniqueIdentifier defined in net.corda.core.contracts.LinearState[DeserializedPropertyDescriptor]

'id' @ [1302:72] ==> public final val id: UUID defined in net.corda.core.contracts.UniqueIdentifier[DeserializedPropertyDescriptor]

'assertThat' @ [1303:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<LinearState>..StateAndRef<LinearState>?)>..List<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<LinearState>

'results' @ [1303:24] ==> val results: Vault.Page<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`all linear states for a given id sorted by uuid`.<anonymous>[LocalVariableDescriptor]

'states' @ [1303:32] ==> public final val states: List<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1303:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1307:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1309:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1309:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<LinearState>): Vault<LinearState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<LinearState>

'services' @ [1310:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1310:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [1311:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1311:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [1312:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1312:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'database' @ [1314:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1314:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>..ListAssert<(StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>?)): (ListAssert<(StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>..ListAssert<(StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.testing.contracts.DummyLinearContract.State>..net.corda.core.contracts.StateAndRef<net.corda.testing.contracts.DummyLinearContract.State>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.testing.contracts.DummyLinearContract.State>..net.corda.core.contracts.StateAndRef<net.corda.testing.contracts.DummyLinearContract.State>?)>?)

'VaultQueryCriteria' @ [1315:33] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Sort' @ [1316:27] ==> public constructor Sort(columns: Collection<Sort.SortColumn>) defined in net.corda.core.node.services.vault.Sort[DeserializedClassConstructorDescriptor]

'setOf' @ [1316:32] ==> public fun <T> setOf(element: Sort.SortColumn): Set<Sort.SortColumn> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> SortColumn

'SortColumn' @ [1316:43] ==> public constructor SortColumn(sortAttribute: SortAttribute, direction: Sort.Direction = ...) defined in net.corda.core.node.services.vault.Sort.SortColumn[DeserializedClassConstructorDescriptor]

'Standard' @ [1316:68] ==> public constructor Standard(attribute: Sort.Attribute) defined in net.corda.core.node.services.vault.SortAttribute.Standard[DeserializedClassConstructorDescriptor]

'EXTERNAL_ID' @ [1316:103] ==> enum entry EXTERNAL_ID defined in net.corda.core.node.services.vault.Sort.LinearStateAttribute[FakeCallableDescriptorForObject]

'DESC' @ [1316:132] ==> enum entry DESC defined in net.corda.core.node.services.vault.Sort.Direction[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [1318:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1318:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria, sorting: Sort): Vault.Page<DummyLinearContract.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'vaultCriteria' @ [1318:77] ==> val vaultCriteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear states sorted by linear state attribute`.<anonymous>[LocalVariableDescriptor]

'sorting' @ [1318:103] ==> val sorting: Sort defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear states sorted by linear state attribute`.<anonymous>[LocalVariableDescriptor]

'results' @ [1319:13] ==> val results: Vault.Page<DummyLinearContract.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear states sorted by linear state attribute`.<anonymous>[LocalVariableDescriptor]

'states' @ [1319:21] ==> public final val states: List<StateAndRef<DummyLinearContract.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'forEach' @ [1319:28] ==> @HidesMembers public inline fun <T> Iterable<StateAndRef<DummyLinearContract.State>>.forEach(action: (StateAndRef<DummyLinearContract.State>) -> Unit): Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<State>

'println' @ [1319:38] ==> @InlineOnly public inline fun println(message: Any?): Unit defined in kotlin.io[DeserializedSimpleFunctionDescriptor]

'it' @ [1319:46] ==> value-parameter it: StateAndRef<DummyLinearContract.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear states sorted by linear state attribute`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'state' @ [1319:49] ==> public final val state: TransactionState<DummyLinearContract.State> defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'data' @ [1319:55] ==> public final val data: DummyLinearContract.State defined in net.corda.core.contracts.TransactionState[DeserializedPropertyDescriptor]

'linearString' @ [1319:60] ==> public final val linearString: String defined in net.corda.testing.contracts.DummyLinearContract.State[DeserializedPropertyDescriptor]

'assertThat' @ [1320:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>..List<(StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>?)): (ListAssert<(StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>..ListAssert<(StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [1320:24] ==> val results: Vault.Page<DummyLinearContract.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear states sorted by linear state attribute`.<anonymous>[LocalVariableDescriptor]

'states' @ [1320:32] ==> public final val states: List<StateAndRef<DummyLinearContract.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1320:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>..ListAssert<(StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1324:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1327:13] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1327:22] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> UUID): UUID defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> UUID

'services' @ [1328:36] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1328:45] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [1329:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [1329:26] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [1329:48] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'linearStates' @ [1330:17] ==> val linearStates: Vault<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed deal states sorted`.<anonymous>[LocalVariableDescriptor]

'states' @ [1330:30] ==> public final val states: Iterable<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'first' @ [1330:37] ==> public fun <T> Iterable<StateAndRef<LinearState>>.first(): StateAndRef<LinearState> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>

'state' @ [1330:45] ==> public final val state: TransactionState<LinearState> defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'data' @ [1330:51] ==> public final val data: LinearState defined in net.corda.core.contracts.TransactionState[DeserializedPropertyDescriptor]

'linearId' @ [1330:56] ==> public abstract val linearId: UniqueIdentifier defined in net.corda.core.contracts.LinearState[DeserializedPropertyDescriptor]

'id' @ [1330:65] ==> public final val id: UUID defined in net.corda.core.contracts.UniqueIdentifier[DeserializedPropertyDescriptor]

'database' @ [1332:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1332:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>?)

'LinearStateQueryCriteria' @ [1333:39] ==> @JvmOverloads public constructor LinearStateQueryCriteria(participants: List<AbstractParty>? = ..., uuid: List<UUID>? = ..., externalId: List<String>? = ..., status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria[DeserializedClassConstructorDescriptor]

'listOf' @ [1333:71] ==> public fun <T> listOf(element: UUID): List<UUID> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> UUID

'uid' @ [1333:78] ==> val uid: UUID defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed deal states sorted`[LocalVariableDescriptor]

'LinearStateQueryCriteria' @ [1334:37] ==> @JvmOverloads public constructor LinearStateQueryCriteria(participants: List<AbstractParty>? = ..., uuid: List<UUID>? = ..., externalId: List<String>? = ..., status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria[DeserializedClassConstructorDescriptor]

'listOf' @ [1334:75] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'linearStateCriteria' @ [1335:37] ==> val linearStateCriteria: QueryCriteria.LinearStateQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed deal states sorted`.<anonymous>[LocalVariableDescriptor]

'dealStateCriteria' @ [1335:60] ==> val dealStateCriteria: QueryCriteria.LinearStateQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed deal states sorted`.<anonymous>[LocalVariableDescriptor]

'Sort' @ [1337:27] ==> public constructor Sort(columns: Collection<Sort.SortColumn>) defined in net.corda.core.node.services.vault.Sort[DeserializedClassConstructorDescriptor]

'setOf' @ [1337:32] ==> public fun <T> setOf(element: Sort.SortColumn): Set<Sort.SortColumn> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> SortColumn

'SortColumn' @ [1337:43] ==> public constructor SortColumn(sortAttribute: SortAttribute, direction: Sort.Direction = ...) defined in net.corda.core.node.services.vault.Sort.SortColumn[DeserializedClassConstructorDescriptor]

'Standard' @ [1337:68] ==> public constructor Standard(attribute: Sort.Attribute) defined in net.corda.core.node.services.vault.SortAttribute.Standard[DeserializedClassConstructorDescriptor]

'EXTERNAL_ID' @ [1337:103] ==> enum entry EXTERNAL_ID defined in net.corda.core.node.services.vault.Sort.LinearStateAttribute[FakeCallableDescriptorForObject]

'DESC' @ [1337:132] ==> enum entry DESC defined in net.corda.core.node.services.vault.Sort.Direction[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [1339:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1339:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria, sorting: Sort): Vault.Page<LinearState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> LinearState

'compositeCriteria' @ [1339:62] ==> val compositeCriteria: QueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed deal states sorted`.<anonymous>[LocalVariableDescriptor]

'sorting' @ [1339:91] ==> val sorting: Sort defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed deal states sorted`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1340:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (Vault.StateMetadata..Vault.StateMetadata?)>..List<(Vault.StateMetadata..Vault.StateMetadata?)>?)): (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateMetadata

'results' @ [1340:24] ==> val results: Vault.Page<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed deal states sorted`.<anonymous>[LocalVariableDescriptor]

'statesMetadata' @ [1340:32] ==> public final val statesMetadata: List<Vault.StateMetadata> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1340:48] ==> public open fun hasSize(p0: Int): (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [1341:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<LinearState>..StateAndRef<LinearState>?)>..List<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<LinearState>

'results' @ [1341:24] ==> val results: Vault.Page<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed deal states sorted`.<anonymous>[LocalVariableDescriptor]

'states' @ [1341:32] ==> public final val states: List<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1341:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1345:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1347:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1347:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<LinearState>): Vault<LinearState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<LinearState>

'services' @ [1348:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1348:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [1349:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1349:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [1350:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1350:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'database' @ [1352:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1352:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>..ListAssert<(StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>?)): (ListAssert<(StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>..ListAssert<(StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.testing.contracts.DummyLinearContract.State>..net.corda.core.contracts.StateAndRef<net.corda.testing.contracts.DummyLinearContract.State>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.testing.contracts.DummyLinearContract.State>..net.corda.core.contracts.StateAndRef<net.corda.testing.contracts.DummyLinearContract.State>?)>?)

'VaultQueryCriteria' @ [1353:33] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Sort' @ [1354:27] ==> public constructor Sort(columns: Collection<Sort.SortColumn>) defined in net.corda.core.node.services.vault.Sort[DeserializedClassConstructorDescriptor]

'setOf' @ [1354:32] ==> public fun <T> setOf(element: Sort.SortColumn): Set<Sort.SortColumn> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> SortColumn

'SortColumn' @ [1354:43] ==> public constructor SortColumn(sortAttribute: SortAttribute, direction: Sort.Direction = ...) defined in net.corda.core.node.services.vault.Sort.SortColumn[DeserializedClassConstructorDescriptor]

'Custom' @ [1354:68] ==> public constructor Custom(entityStateClass: Class<out PersistentState>, entityStateColumnName: String) defined in net.corda.core.node.services.vault.SortAttribute.Custom[DeserializedClassConstructorDescriptor]

'DummyLinearStateSchemaV1' @ [1354:75] ==> public object DummyLinearStateSchemaV1 : MappedSchema defined in net.corda.testing.schemas[FakeCallableDescriptorForObject]

'PersistentDummyLinearState' @ [1354:100] ==> public constructor PersistentDummyLinearState(participants: MutableSet<AbstractParty>, externalId: String?, uuid: UUID, linearString: String, linearNumber: Long, linearTimestamp: Instant, linearBoolean: Boolean) defined in net.corda.testing.schemas.DummyLinearStateSchemaV1.PersistentDummyLinearState[DeserializedClassConstructorDescriptor]

'java' @ [1354:134] ==> public val <T> KClass<DummyLinearStateSchemaV1.PersistentDummyLinearState>.java: Class<DummyLinearStateSchemaV1.PersistentDummyLinearState> defined in kotlin.jvm[DeserializedPropertyDescriptor]
Inferred types:
    <T> -> PersistentDummyLinearState

'DESC' @ [1354:172] ==> enum entry DESC defined in net.corda.core.node.services.vault.Sort.Direction[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [1356:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1356:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria, sorting: Sort): Vault.Page<DummyLinearContract.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'vaultCriteria' @ [1356:77] ==> val vaultCriteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear states sorted by custom attribute`.<anonymous>[LocalVariableDescriptor]

'sorting' @ [1356:103] ==> val sorting: Sort defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear states sorted by custom attribute`.<anonymous>[LocalVariableDescriptor]

'results' @ [1357:13] ==> val results: Vault.Page<DummyLinearContract.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear states sorted by custom attribute`.<anonymous>[LocalVariableDescriptor]

'states' @ [1357:21] ==> public final val states: List<StateAndRef<DummyLinearContract.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'forEach' @ [1357:28] ==> @HidesMembers public inline fun <T> Iterable<StateAndRef<DummyLinearContract.State>>.forEach(action: (StateAndRef<DummyLinearContract.State>) -> Unit): Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<State>

'println' @ [1357:38] ==> @InlineOnly public inline fun println(message: Any?): Unit defined in kotlin.io[DeserializedSimpleFunctionDescriptor]

'it' @ [1357:46] ==> value-parameter it: StateAndRef<DummyLinearContract.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear states sorted by custom attribute`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'state' @ [1357:49] ==> public final val state: TransactionState<DummyLinearContract.State> defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'data' @ [1357:55] ==> public final val data: DummyLinearContract.State defined in net.corda.core.contracts.TransactionState[DeserializedPropertyDescriptor]

'linearString' @ [1357:60] ==> public final val linearString: String defined in net.corda.testing.contracts.DummyLinearContract.State[DeserializedPropertyDescriptor]

'assertThat' @ [1358:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>..List<(StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>?)): (ListAssert<(StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>..ListAssert<(StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [1358:24] ==> val results: Vault.Page<DummyLinearContract.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear states sorted by custom attribute`.<anonymous>[LocalVariableDescriptor]

'states' @ [1358:32] ==> public final val states: List<StateAndRef<DummyLinearContract.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1358:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>..ListAssert<(StateAndRef<DummyLinearContract.State>..StateAndRef<DummyLinearContract.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1362:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1365:13] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1365:22] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<LinearState>): Vault<LinearState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<LinearState>

'services' @ [1366:28] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1366:37] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'txns' @ [1367:35] ==> val txns: Vault<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`return consumed linear states for a given id`.<anonymous>[LocalVariableDescriptor]

'states' @ [1367:40] ==> public final val states: Iterable<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'first' @ [1367:47] ==> public fun <T> Iterable<StateAndRef<LinearState>>.first(): StateAndRef<LinearState> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>

'services' @ [1368:36] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'evolveLinearState' @ [1368:45] ==> public fun ServiceHub.evolveLinearState(linearState: StateAndRef<LinearState>, notary: Party): StateAndRef<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'linearState' @ [1368:63] ==> val linearState: StateAndRef<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`return consumed linear states for a given id`.<anonymous>[LocalVariableDescriptor]

'DUMMY_NOTARY' @ [1368:76] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [1369:36] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'evolveLinearState' @ [1369:45] ==> public fun ServiceHub.evolveLinearState(linearState: StateAndRef<LinearState>, notary: Party): StateAndRef<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'linearState2' @ [1369:63] ==> val linearState2: StateAndRef<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`return consumed linear states for a given id`.<anonymous>[LocalVariableDescriptor]

'DUMMY_NOTARY' @ [1369:77] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [1370:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'evolveLinearState' @ [1370:26] ==> public fun ServiceHub.evolveLinearState(linearState: StateAndRef<LinearState>, notary: Party): StateAndRef<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'linearState3' @ [1370:44] ==> val linearState3: StateAndRef<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`return consumed linear states for a given id`.<anonymous>[LocalVariableDescriptor]

'DUMMY_NOTARY' @ [1370:58] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'txns' @ [1371:17] ==> val txns: Vault<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`return consumed linear states for a given id`.<anonymous>[LocalVariableDescriptor]

'database' @ [1373:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1373:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>?)

'LinearStateQueryCriteria' @ [1375:39] ==> @JvmOverloads public constructor LinearStateQueryCriteria(participants: List<AbstractParty>? = ..., uuid: List<UUID>? = ..., externalId: List<String>? = ..., status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria[DeserializedClassConstructorDescriptor]

'txns' @ [1375:71] ==> val txns: Vault<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`return consumed linear states for a given id`[LocalVariableDescriptor]

'states' @ [1375:76] ==> public final val states: Iterable<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'map' @ [1375:83] ==> public inline fun <T, R> Iterable<StateAndRef<LinearState>>.map(transform: (StateAndRef<LinearState>) -> UUID): List<UUID> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>
    <R> -> UUID

'it' @ [1375:89] ==> value-parameter it: StateAndRef<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`return consumed linear states for a given id`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'state' @ [1375:92] ==> public final val state: TransactionState<LinearState> defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'data' @ [1375:98] ==> public final val data: LinearState defined in net.corda.core.contracts.TransactionState[DeserializedPropertyDescriptor]

'linearId' @ [1375:103] ==> public abstract val linearId: UniqueIdentifier defined in net.corda.core.contracts.LinearState[DeserializedPropertyDescriptor]

'id' @ [1375:112] ==> public final val id: UUID defined in net.corda.core.contracts.UniqueIdentifier[DeserializedPropertyDescriptor]

'Vault' @ [1375:127] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'CONSUMED' @ [1375:145] ==> enum entry CONSUMED defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'VaultQueryCriteria' @ [1376:33] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Vault' @ [1376:61] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'CONSUMED' @ [1376:79] ==> enum entry CONSUMED defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'Sort' @ [1377:27] ==> public constructor Sort(columns: Collection<Sort.SortColumn>) defined in net.corda.core.node.services.vault.Sort[DeserializedClassConstructorDescriptor]

'setOf' @ [1377:32] ==> public fun <T> setOf(element: Sort.SortColumn): Set<Sort.SortColumn> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> SortColumn

'SortColumn' @ [1377:43] ==> public constructor SortColumn(sortAttribute: SortAttribute, direction: Sort.Direction = ...) defined in net.corda.core.node.services.vault.Sort.SortColumn[DeserializedClassConstructorDescriptor]

'Standard' @ [1377:68] ==> public constructor Standard(attribute: Sort.Attribute) defined in net.corda.core.node.services.vault.SortAttribute.Standard[DeserializedClassConstructorDescriptor]

'UUID' @ [1377:103] ==> enum entry UUID defined in net.corda.core.node.services.vault.Sort.LinearStateAttribute[FakeCallableDescriptorForObject]

'DESC' @ [1377:125] ==> enum entry DESC defined in net.corda.core.node.services.vault.Sort.Direction[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [1378:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1378:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria, sorting: Sort): Vault.Page<LinearState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> LinearState

'linearStateCriteria' @ [1378:62] ==> val linearStateCriteria: QueryCriteria.LinearStateQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`return consumed linear states for a given id`.<anonymous>[LocalVariableDescriptor]

'and' @ [1378:82] ==> public final fun and(criteria: QueryCriteria): QueryCriteria defined in net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria[DeserializedSimpleFunctionDescriptor]

'vaultCriteria' @ [1378:86] ==> val vaultCriteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`return consumed linear states for a given id`.<anonymous>[LocalVariableDescriptor]

'sorting' @ [1378:112] ==> val sorting: Sort defined in net.corda.node.services.vault.VaultQueryTests.`return consumed linear states for a given id`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1379:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<LinearState>..StateAndRef<LinearState>?)>..List<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<LinearState>

'results' @ [1379:24] ==> val results: Vault.Page<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`return consumed linear states for a given id`.<anonymous>[LocalVariableDescriptor]

'states' @ [1379:32] ==> public final val states: List<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1379:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1386:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1388:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1388:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<DealState>): Vault<DealState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<DealState>

'services' @ [1389:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [1389:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [1389:44] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'database' @ [1391:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1391:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>..ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>?)): (ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>..ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.DealState>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.DealState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.DealState>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.DealState>?)>?)

'vaultQuerySvc' @ [1392:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1392:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(): Vault.Page<DealState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> DealState

'assertThat' @ [1393:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<DealState>..StateAndRef<DealState>?)>..List<(StateAndRef<DealState>..StateAndRef<DealState>?)>?)): (ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>..ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<DealState>

'results' @ [1393:24] ==> val results: Vault.Page<DealState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed deals`.<anonymous>[LocalVariableDescriptor]

'states' @ [1393:32] ==> public final val states: List<StateAndRef<DealState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1393:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>..ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1397:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1399:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1399:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<DealState>): Vault<DealState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<DealState>

'services' @ [1400:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [1400:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [1400:44] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'database' @ [1402:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1402:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>..ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>?)): (ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>..ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.DealState>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.DealState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.DealState>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.DealState>?)>?)

'LinearStateQueryCriteria' @ [1404:28] ==> @JvmOverloads public constructor LinearStateQueryCriteria(participants: List<AbstractParty>? = ..., uuid: List<UUID>? = ..., externalId: List<String>? = ..., status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria[DeserializedClassConstructorDescriptor]

'listOf' @ [1404:66] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'vaultQuerySvc' @ [1405:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1405:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<DealState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> DealState

'criteria' @ [1405:60] ==> val criteria: QueryCriteria.LinearStateQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed deals for ref`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1408:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<DealState>..StateAndRef<DealState>?)>..List<(StateAndRef<DealState>..StateAndRef<DealState>?)>?)): (ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>..ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<DealState>

'results' @ [1408:24] ==> val results: Vault.Page<DealState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed deals for ref`.<anonymous>[LocalVariableDescriptor]

'states' @ [1408:32] ==> public final val states: List<StateAndRef<DealState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1408:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>..ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1412:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1414:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1414:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<DealState>): Vault<DealState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<DealState>

'services' @ [1415:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1415:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [1416:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [1416:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [1416:44] ==> public fun <T> listOf(element: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'services' @ [1417:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [1417:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [1417:44] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'database' @ [1419:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1419:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>..ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>?)): (ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>..ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.DealState>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.DealState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.DealState>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.DealState>?)>?)

'vaultQuerySvc' @ [1420:23] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1420:37] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(): Vault.Page<DealState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> DealState

'all' @ [1421:13] ==> val all: Vault.Page<DealState> defined in net.corda.node.services.vault.VaultQueryTests.`latest unconsumed deals for ref`.<anonymous>[LocalVariableDescriptor]

'states' @ [1421:17] ==> public final val states: List<StateAndRef<DealState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'forEach' @ [1421:24] ==> @HidesMembers public inline fun <T> Iterable<StateAndRef<DealState>>.forEach(action: (StateAndRef<DealState>) -> Unit): Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<DealState>

'println' @ [1421:34] ==> @InlineOnly public inline fun println(message: Any?): Unit defined in kotlin.io[DeserializedSimpleFunctionDescriptor]

'it' @ [1421:42] ==> value-parameter it: StateAndRef<DealState> defined in net.corda.node.services.vault.VaultQueryTests.`latest unconsumed deals for ref`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'state' @ [1421:45] ==> public final val state: TransactionState<DealState> defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'LinearStateQueryCriteria' @ [1423:28] ==> @JvmOverloads public constructor LinearStateQueryCriteria(participants: List<AbstractParty>? = ..., uuid: List<UUID>? = ..., externalId: List<String>? = ..., status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria[DeserializedClassConstructorDescriptor]

'listOf' @ [1423:66] ==> public fun <T> listOf(element: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'vaultQuerySvc' @ [1424:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1424:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<DealState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> DealState

'criteria' @ [1424:60] ==> val criteria: QueryCriteria.LinearStateQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`latest unconsumed deals for ref`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1425:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<DealState>..StateAndRef<DealState>?)>..List<(StateAndRef<DealState>..StateAndRef<DealState>?)>?)): (ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>..ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<DealState>

'results' @ [1425:24] ==> val results: Vault.Page<DealState> defined in net.corda.node.services.vault.VaultQueryTests.`latest unconsumed deals for ref`.<anonymous>[LocalVariableDescriptor]

'states' @ [1425:32] ==> public final val states: List<StateAndRef<DealState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1425:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>..ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1429:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'listOf' @ [1431:23] ==> public fun <T> listOf(element: Party): List<Party> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Party

'MINI_CORP' @ [1431:30] ==> public val MINI_CORP: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'database' @ [1432:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1432:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<DealState>): Vault<DealState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<DealState>

'services' @ [1433:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1433:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [1434:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [1434:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [1434:44] ==> public fun <T> listOf(element: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'parties' @ [1434:59] ==> val parties: List<Party> defined in net.corda.node.services.vault.VaultQueryTests.`latest unconsumed deals with party`[LocalVariableDescriptor]

'services' @ [1435:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [1435:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [1435:44] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'database' @ [1437:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1437:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>..ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>?)): (ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>..ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.DealState>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.DealState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.DealState>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.DealState>?)>?)

'LinearStateQueryCriteria' @ [1439:28] ==> @JvmOverloads public constructor LinearStateQueryCriteria(participants: List<AbstractParty>? = ..., uuid: List<UUID>? = ..., externalId: List<String>? = ..., status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria[DeserializedClassConstructorDescriptor]

'parties' @ [1439:68] ==> val parties: List<Party> defined in net.corda.node.services.vault.VaultQueryTests.`latest unconsumed deals with party`[LocalVariableDescriptor]

'vaultQuerySvc' @ [1440:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1440:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<DealState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> DealState

'criteria' @ [1440:60] ==> val criteria: QueryCriteria.LinearStateQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`latest unconsumed deals with party`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1443:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<DealState>..StateAndRef<DealState>?)>..List<(StateAndRef<DealState>..StateAndRef<DealState>?)>?)): (ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>..ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<DealState>

'results' @ [1443:24] ==> val results: Vault.Page<DealState> defined in net.corda.node.services.vault.VaultQueryTests.`latest unconsumed deals with party`.<anonymous>[LocalVariableDescriptor]

'states' @ [1443:32] ==> public final val states: List<StateAndRef<DealState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1443:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>..ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1449:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1451:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1451:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'identitySvc' @ [1452:13] ==> public final val identitySvc: IdentityService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'verifyAndRegisterIdentity' @ [1452:25] ==> public abstract fun verifyAndRegisterIdentity(identity: PartyAndCertificate): PartyAndCertificate? defined in net.corda.core.node.services.IdentityService[DeserializedSimpleFunctionDescriptor]

'BOC_IDENTITY' @ [1452:51] ==> public val BOC_IDENTITY: PartyAndCertificate defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [1454:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1454:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1454:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1454:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1454:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1454:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'DUMMY_CASH_ISSUER' @ [1454:116] ==> public val DUMMY_CASH_ISSUER: PartyAndReference defined in net.corda.finance.contracts.asset[DeserializedPropertyDescriptor]

'services' @ [1455:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1455:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1455:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1455:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1455:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1455:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'BOC' @ [1455:116] ==> public val BOC: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'ref' @ [1455:120] ==> public final fun ref(vararg bytes: Byte): PartyAndReference defined in net.corda.core.identity.Party[DeserializedSimpleFunctionDescriptor]

'OpaqueBytes' @ [1455:135] ==> public companion object defined in net.corda.core.utilities.OpaqueBytes[FakeCallableDescriptorForObject]

'of' @ [1455:147] ==> @JvmStatic public final fun of(vararg b: Byte): OpaqueBytes defined in net.corda.core.utilities.OpaqueBytes.Companion[DeserializedSimpleFunctionDescriptor]

'services' @ [1456:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1456:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1456:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1456:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1456:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1456:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'BOC' @ [1456:116] ==> public val BOC: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'ref' @ [1456:120] ==> public final fun ref(vararg bytes: Byte): PartyAndReference defined in net.corda.core.identity.Party[DeserializedSimpleFunctionDescriptor]

'OpaqueBytes' @ [1456:135] ==> public companion object defined in net.corda.core.utilities.OpaqueBytes[FakeCallableDescriptorForObject]

'of' @ [1456:147] ==> @JvmStatic public final fun of(vararg b: Byte): OpaqueBytes defined in net.corda.core.utilities.OpaqueBytes.Companion[DeserializedSimpleFunctionDescriptor]

'services' @ [1457:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1457:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1457:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1457:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1457:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1457:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'BOC' @ [1457:116] ==> public val BOC: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'ref' @ [1457:120] ==> public final fun ref(vararg bytes: Byte): PartyAndReference defined in net.corda.core.identity.Party[DeserializedSimpleFunctionDescriptor]

'OpaqueBytes' @ [1457:135] ==> public companion object defined in net.corda.core.utilities.OpaqueBytes[FakeCallableDescriptorForObject]

'of' @ [1457:147] ==> @JvmStatic public final fun of(vararg b: Byte): OpaqueBytes defined in net.corda.core.utilities.OpaqueBytes.Companion[DeserializedSimpleFunctionDescriptor]

'database' @ [1459:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1459:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?)): (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>?)>?)

'FungibleAssetQueryCriteria' @ [1460:28] ==> @JvmOverloads public constructor FungibleAssetQueryCriteria(participants: List<AbstractParty>? = ..., owner: List<AbstractParty>? = ..., quantity: ColumnPredicate<Long>? = ..., issuer: List<AbstractParty>? = ..., issuerRef: List<OpaqueBytes>? = ..., status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria[DeserializedClassConstructorDescriptor]

'listOf' @ [1460:64] ==> public fun <T> listOf(element: Party): List<Party> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Party

'BOC' @ [1460:71] ==> public val BOC: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'listOf' @ [1461:33] ==> public fun <T> listOf(vararg elements: OpaqueBytes): List<OpaqueBytes> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> OpaqueBytes

'BOC' @ [1461:40] ==> public val BOC: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'ref' @ [1461:44] ==> public final fun ref(vararg bytes: Byte): PartyAndReference defined in net.corda.core.identity.Party[DeserializedSimpleFunctionDescriptor]

'reference' @ [1461:51] ==> public final val reference: OpaqueBytes defined in net.corda.core.contracts.PartyAndReference[DeserializedPropertyDescriptor]

'BOC' @ [1461:62] ==> public val BOC: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'ref' @ [1461:66] ==> public final fun ref(vararg bytes: Byte): PartyAndReference defined in net.corda.core.identity.Party[DeserializedSimpleFunctionDescriptor]

'reference' @ [1461:73] ==> public final val reference: OpaqueBytes defined in net.corda.core.contracts.PartyAndReference[DeserializedPropertyDescriptor]

'vaultQuerySvc' @ [1462:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1462:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<FungibleAsset<*>> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> FungibleAsset<*>

'criteria' @ [1462:67] ==> val criteria: QueryCriteria.FungibleAssetQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for specific issuer party and refs`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1463:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..List<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?)): (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<FungibleAsset<*>>

'results' @ [1463:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for specific issuer party and refs`.<anonymous>[LocalVariableDescriptor]

'states' @ [1463:32] ==> public final val states: List<StateAndRef<FungibleAsset<*>>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1463:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1467:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'entropyToKeyPair' @ [1470:32] ==> public fun entropyToKeyPair(entropy: BigInteger): KeyPair defined in net.corda.core.crypto[DeserializedSimpleFunctionDescriptor]

'valueOf' @ [1470:60] ==> public open fun valueOf(p0: Long): (BigInteger..BigInteger?) defined in java.math.BigInteger[JavaMethodDescriptor]

'Party' @ [1471:29] ==> public constructor Party(name: X500Name, owningKey: PublicKey) defined in net.corda.core.identity.Party[DeserializedClassConstructorDescriptor]

'X500Name' @ [1471:35] ==> public constructor X500Name(p0: (String..String?)) defined in org.bouncycastle.asn1.x500.X500Name[JavaClassConstructorDescriptor]

'gbpCashIssuerKey' @ [1471:106] ==> val gbpCashIssuerKey: KeyPair defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for selected issuer parties`[LocalVariableDescriptor]

'public' @ [1471:123] ==> public final val KeyPair.public: (PublicKey..PublicKey?)[MyPropertyDescriptor]

'ref' @ [1471:131] ==> public final fun ref(vararg bytes: Byte): PartyAndReference defined in net.corda.core.identity.Party[DeserializedSimpleFunctionDescriptor]

'MockServices' @ [1472:37] ==> public constructor MockServices(vararg keys: KeyPair) defined in net.corda.testing.node.MockServices[DeserializedClassConstructorDescriptor]

'gbpCashIssuerKey' @ [1472:50] ==> val gbpCashIssuerKey: KeyPair defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for selected issuer parties`[LocalVariableDescriptor]

'entropyToKeyPair' @ [1474:32] ==> public fun entropyToKeyPair(entropy: BigInteger): KeyPair defined in net.corda.core.crypto[DeserializedSimpleFunctionDescriptor]

'valueOf' @ [1474:60] ==> public open fun valueOf(p0: Long): (BigInteger..BigInteger?) defined in java.math.BigInteger[JavaMethodDescriptor]

'Party' @ [1475:29] ==> public constructor Party(name: X500Name, owningKey: PublicKey) defined in net.corda.core.identity.Party[DeserializedClassConstructorDescriptor]

'X500Name' @ [1475:35] ==> public constructor X500Name(p0: (String..String?)) defined in org.bouncycastle.asn1.x500.X500Name[JavaClassConstructorDescriptor]

'usdCashIssuerKey' @ [1475:104] ==> val usdCashIssuerKey: KeyPair defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for selected issuer parties`[LocalVariableDescriptor]

'public' @ [1475:121] ==> public final val KeyPair.public: (PublicKey..PublicKey?)[MyPropertyDescriptor]

'ref' @ [1475:129] ==> public final fun ref(vararg bytes: Byte): PartyAndReference defined in net.corda.core.identity.Party[DeserializedSimpleFunctionDescriptor]

'MockServices' @ [1476:37] ==> public constructor MockServices(vararg keys: KeyPair) defined in net.corda.testing.node.MockServices[DeserializedClassConstructorDescriptor]

'usdCashIssuerKey' @ [1476:50] ==> val usdCashIssuerKey: KeyPair defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for selected issuer parties`[LocalVariableDescriptor]

'entropyToKeyPair' @ [1478:32] ==> public fun entropyToKeyPair(entropy: BigInteger): KeyPair defined in net.corda.core.crypto[DeserializedSimpleFunctionDescriptor]

'valueOf' @ [1478:60] ==> public open fun valueOf(p0: Long): (BigInteger..BigInteger?) defined in java.math.BigInteger[JavaMethodDescriptor]

'Party' @ [1479:29] ==> public constructor Party(name: X500Name, owningKey: PublicKey) defined in net.corda.core.identity.Party[DeserializedClassConstructorDescriptor]

'X500Name' @ [1479:35] ==> public constructor X500Name(p0: (String..String?)) defined in org.bouncycastle.asn1.x500.X500Name[JavaClassConstructorDescriptor]

'chfCashIssuerKey' @ [1479:104] ==> val chfCashIssuerKey: KeyPair defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for selected issuer parties`[LocalVariableDescriptor]

'public' @ [1479:121] ==> public final val KeyPair.public: (PublicKey..PublicKey?)[MyPropertyDescriptor]

'ref' @ [1479:129] ==> public final fun ref(vararg bytes: Byte): PartyAndReference defined in net.corda.core.identity.Party[DeserializedSimpleFunctionDescriptor]

'MockServices' @ [1480:37] ==> public constructor MockServices(vararg keys: KeyPair) defined in net.corda.testing.node.MockServices[DeserializedClassConstructorDescriptor]

'chfCashIssuerKey' @ [1480:50] ==> val chfCashIssuerKey: KeyPair defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for selected issuer parties`[LocalVariableDescriptor]

'database' @ [1482:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1482:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [1484:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1484:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [1484:47] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'gbpCashIssuerServices' @ [1484:55] ==> val gbpCashIssuerServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for selected issuer parties`[LocalVariableDescriptor]

'DUMMY_NOTARY' @ [1484:78] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1484:98] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'gbpCashIssuer' @ [1484:122] ==> val gbpCashIssuer: PartyAndReference defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for selected issuer parties`[LocalVariableDescriptor]

'services' @ [1485:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1485:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1485:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'usdCashIssuerServices' @ [1485:56] ==> val usdCashIssuerServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for selected issuer parties`[LocalVariableDescriptor]

'DUMMY_NOTARY' @ [1485:79] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1485:99] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'usdCashIssuer' @ [1485:123] ==> val usdCashIssuer: PartyAndReference defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for selected issuer parties`[LocalVariableDescriptor]

'services' @ [1486:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1486:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'SWISS_FRANCS' @ [1486:47] ==> public val Int.SWISS_FRANCS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'chfCashIssuerServices' @ [1486:61] ==> val chfCashIssuerServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for selected issuer parties`[LocalVariableDescriptor]

'DUMMY_NOTARY' @ [1486:84] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1486:104] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'chfCashIssuer' @ [1486:128] ==> val chfCashIssuer: PartyAndReference defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for selected issuer parties`[LocalVariableDescriptor]

'database' @ [1488:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1488:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?)): (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>?)>?)

'FungibleAssetQueryCriteria' @ [1489:28] ==> @JvmOverloads public constructor FungibleAssetQueryCriteria(participants: List<AbstractParty>? = ..., owner: List<AbstractParty>? = ..., quantity: ColumnPredicate<Long>? = ..., issuer: List<AbstractParty>? = ..., issuerRef: List<OpaqueBytes>? = ..., status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria[DeserializedClassConstructorDescriptor]

'listOf' @ [1489:64] ==> public fun <T> listOf(vararg elements: AbstractParty): List<AbstractParty> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractParty

'gbpCashIssuer' @ [1489:71] ==> val gbpCashIssuer: PartyAndReference defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for selected issuer parties`[LocalVariableDescriptor]

'party' @ [1489:85] ==> public final val party: AbstractParty defined in net.corda.core.contracts.PartyAndReference[DeserializedPropertyDescriptor]

'usdCashIssuer' @ [1489:92] ==> val usdCashIssuer: PartyAndReference defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for selected issuer parties`[LocalVariableDescriptor]

'party' @ [1489:106] ==> public final val party: AbstractParty defined in net.corda.core.contracts.PartyAndReference[DeserializedPropertyDescriptor]

'vaultQuerySvc' @ [1490:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1490:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<FungibleAsset<*>> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> FungibleAsset<*>

'criteria' @ [1490:67] ==> val criteria: QueryCriteria.FungibleAssetQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for selected issuer parties`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1491:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..List<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?)): (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<FungibleAsset<*>>

'results' @ [1491:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for selected issuer parties`.<anonymous>[LocalVariableDescriptor]

'states' @ [1491:32] ==> public final val states: List<StateAndRef<FungibleAsset<*>>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1491:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1495:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1497:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1497:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [1498:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1498:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1498:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1498:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1498:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1498:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'BOC' @ [1498:115] ==> public val BOC: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'ref' @ [1498:119] ==> public final fun ref(vararg bytes: Byte): PartyAndReference defined in net.corda.core.identity.Party[DeserializedSimpleFunctionDescriptor]

'services' @ [1499:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1499:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1499:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1499:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1499:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1499:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'MEGA_CORP' @ [1500:32] ==> public val MEGA_CORP: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'ref' @ [1500:42] ==> public final fun ref(vararg bytes: Byte): PartyAndReference defined in net.corda.core.identity.Party[DeserializedSimpleFunctionDescriptor]

'MINI_CORP' @ [1500:61] ==> public val MINI_CORP: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'database' @ [1502:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1502:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?)): (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>?)>?)

'FungibleAssetQueryCriteria' @ [1503:28] ==> @JvmOverloads public constructor FungibleAssetQueryCriteria(participants: List<AbstractParty>? = ..., owner: List<AbstractParty>? = ..., quantity: ColumnPredicate<Long>? = ..., issuer: List<AbstractParty>? = ..., issuerRef: List<OpaqueBytes>? = ..., status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria[DeserializedClassConstructorDescriptor]

'listOf' @ [1503:63] ==> public fun <T> listOf(element: Party): List<Party> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Party

'MEGA_CORP' @ [1503:70] ==> public val MEGA_CORP: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'vaultQuerySvc' @ [1504:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1504:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<FungibleAsset<*>> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> FungibleAsset<*>

'criteria' @ [1504:67] ==> val criteria: QueryCriteria.FungibleAssetQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets by owner`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1505:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..List<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?)): (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<FungibleAsset<*>>

'results' @ [1505:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets by owner`.<anonymous>[LocalVariableDescriptor]

'states' @ [1505:32] ==> public final val states: List<StateAndRef<FungibleAsset<*>>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1505:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1509:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1511:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1511:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [1512:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1512:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1512:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1512:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'CASH_NOTARY' @ [1512:72] ==> public final val CASH_NOTARY: Party defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'Random' @ [1512:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1513:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1513:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1513:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1513:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1513:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1513:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'MEGA_CORP' @ [1514:32] ==> public val MEGA_CORP: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'ref' @ [1514:42] ==> public final fun ref(vararg bytes: Byte): PartyAndReference defined in net.corda.core.identity.Party[DeserializedSimpleFunctionDescriptor]

'MEGA_CORP' @ [1514:61] ==> public val MEGA_CORP: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [1515:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1515:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1515:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1515:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1515:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1515:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'BOC' @ [1516:32] ==> public val BOC: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'ref' @ [1516:36] ==> public final fun ref(vararg bytes: Byte): PartyAndReference defined in net.corda.core.identity.Party[DeserializedSimpleFunctionDescriptor]

'MINI_CORP' @ [1516:55] ==> public val MINI_CORP: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'database' @ [1518:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1518:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>?)>?)

'FungibleAssetQueryCriteria' @ [1520:28] ==> @JvmOverloads public constructor FungibleAssetQueryCriteria(participants: List<AbstractParty>? = ..., owner: List<AbstractParty>? = ..., quantity: ColumnPredicate<Long>? = ..., issuer: List<AbstractParty>? = ..., issuerRef: List<OpaqueBytes>? = ..., status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria[DeserializedClassConstructorDescriptor]

'listOf' @ [1520:63] ==> public fun <T> listOf(vararg elements: Party): List<Party> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Party

'MEGA_CORP' @ [1520:70] ==> public val MEGA_CORP: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'BOC' @ [1520:81] ==> public val BOC: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'vaultQuerySvc' @ [1521:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1521:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<ContractState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> ContractState

'criteria' @ [1521:64] ==> val criteria: QueryCriteria.FungibleAssetQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible states for owners`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1524:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<ContractState>..StateAndRef<ContractState>?)>..List<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?)): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<ContractState>

'results' @ [1524:24] ==> val results: Vault.Page<ContractState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible states for owners`.<anonymous>[LocalVariableDescriptor]

'states' @ [1524:32] ==> public final val states: List<StateAndRef<ContractState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1524:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>..ListAssert<(StateAndRef<ContractState>..StateAndRef<ContractState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1529:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1531:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1531:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [1532:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1532:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [1533:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1533:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1533:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1533:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1533:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1533:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1534:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1534:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [1534:47] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1534:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1534:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1534:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1535:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1535:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'SWISS_FRANCS' @ [1535:47] ==> public val Int.SWISS_FRANCS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1535:61] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1535:77] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1535:97] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [1537:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1537:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?)): (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>?)>?)

'builder' @ [1539:28] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String?>): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String?> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> ColumnPredicateExpression<PersistentCashState, String?>

'CashSchemaV1' @ [1539:38] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [1539:51] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'currency' @ [1539:72] ==> @field:Column public final var currency: String defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'equal' @ [1539:81] ==> public final fun <O, R> KProperty1<CashSchemaV1.PersistentCashState, String?>.equal(value: (String..String?)): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String?> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R> -> (kotlin.String..kotlin.String?)

'USD' @ [1539:87] ==> @field:JvmField public val USD: Currency defined in net.corda.finance[DeserializedPropertyDescriptor]

'currencyCode' @ [1539:91] ==> public final val Currency.currencyCode: (String..String?)[MyPropertyDescriptor]

'VaultCustomQueryCriteria' @ [1540:28] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CashSchemaV1.PersistentCashState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCashState

'ccyIndex' @ [1540:53] ==> val ccyIndex: CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String?> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for single currency`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [1541:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1541:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<FungibleAsset<*>> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> FungibleAsset<*>

'criteria' @ [1541:67] ==> val criteria: QueryCriteria.VaultCustomQueryCriteria<CashSchemaV1.PersistentCashState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for single currency`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1544:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..List<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?)): (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<FungibleAsset<*>>

'results' @ [1544:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for single currency`.<anonymous>[LocalVariableDescriptor]

'states' @ [1544:32] ==> public final val states: List<StateAndRef<FungibleAsset<*>>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1544:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1548:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1550:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1550:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [1551:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1551:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1551:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1551:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1551:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1551:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1552:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1552:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1552:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1552:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1552:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1552:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [1554:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1554:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>): AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>

'builder' @ [1555:23] ==> public inline fun <A> builder(block: Builder.() -> Nothing): Nothing defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> Nothing

'CashSchemaV1' @ [1555:33] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [1555:46] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'pennies' @ [1555:67] ==> @field:Column public final var pennies: Long defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'sum' @ [1555:75] ==> public final fun <O, R> KProperty1<CashSchemaV1.PersistentCashState, {Comparable<{Long & String}> & java.io.Serializable}?>.sum(groupByColumns: List<KProperty1<CashSchemaV1.PersistentCashState, {Comparable<{Long & String}> & java.io.Serializable}>>? = ..., orderBy: Sort.Direction? = ...): CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, {Comparable<{Long & String}> & java.io.Serializable}> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R> -> {Comparable<{Long & String}> & java.io.Serializable}

'listOf' @ [1555:96] ==> public fun <T> listOf(element: KMutableProperty1<CashSchemaV1.PersistentCashState, String>): List<KMutableProperty1<CashSchemaV1.PersistentCashState, String>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> KMutableProperty1<PersistentCashState, String>

'CashSchemaV1' @ [1555:103] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [1555:116] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'VaultCustomQueryCriteria' @ [1556:31] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<PersistentState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentState

'sum' @ [1556:56] ==> val sum: Nothing defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash balance for single currency`.<anonymous>[LocalVariableDescriptor]

'builder' @ [1558:28] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String?>): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String?> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> ColumnPredicateExpression<PersistentCashState, String?>

'CashSchemaV1' @ [1558:38] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [1558:51] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'currency' @ [1558:72] ==> @field:Column public final var currency: String defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'equal' @ [1558:81] ==> public final fun <O, R> KProperty1<CashSchemaV1.PersistentCashState, String?>.equal(value: (String..String?)): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String?> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R> -> (kotlin.String..kotlin.String?)

'USD' @ [1558:87] ==> @field:JvmField public val USD: Currency defined in net.corda.finance[DeserializedPropertyDescriptor]

'currencyCode' @ [1558:91] ==> public final val Currency.currencyCode: (String..String?)[MyPropertyDescriptor]

'VaultCustomQueryCriteria' @ [1559:31] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CashSchemaV1.PersistentCashState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCashState

'ccyIndex' @ [1559:56] ==> val ccyIndex: CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String?> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash balance for single currency`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [1561:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1561:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<FungibleAsset<*>> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> FungibleAsset<*>

'sumCriteria' @ [1561:67] ==> val sumCriteria: QueryCriteria.VaultCustomQueryCriteria<PersistentState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash balance for single currency`.<anonymous>[LocalVariableDescriptor]

'and' @ [1561:79] ==> public final fun and(criteria: QueryCriteria): QueryCriteria defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedSimpleFunctionDescriptor]

'ccyCriteria' @ [1561:83] ==> val ccyCriteria: QueryCriteria.VaultCustomQueryCriteria<CashSchemaV1.PersistentCashState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash balance for single currency`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1563:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (Any..Any?)>..List<(Any..Any?)>?)): (ListAssert<(Any..Any?)>..ListAssert<(Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> Any

'results' @ [1563:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash balance for single currency`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [1563:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1563:46] ==> public open fun hasSize(p0: Int): (ListAssert<(Any..Any?)>..ListAssert<(Any..Any?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [1564:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [1564:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash balance for single currency`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [1564:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [1564:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [1565:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [1565:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash balance for single currency`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [1565:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [1565:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'Test' @ [1569:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1571:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1571:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [1572:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1572:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1572:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1572:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1572:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1572:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1573:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1573:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1573:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1573:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1573:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1573:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1574:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1574:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [1574:47] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1574:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1574:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1574:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1575:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1575:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [1575:47] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1575:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1575:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1575:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1576:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1576:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'SWISS_FRANCS' @ [1576:47] ==> public val Int.SWISS_FRANCS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1576:61] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1576:77] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1576:97] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1577:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1577:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'SWISS_FRANCS' @ [1577:47] ==> public val Int.SWISS_FRANCS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1577:61] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1577:77] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1577:97] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [1579:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1579:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>): AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>..org.assertj.core.api.AbstractObjectAssert<out (org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractObjectAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>?), (kotlin.Any..kotlin.Any?)>

'builder' @ [1580:28] ==> public inline fun <A> builder(block: Builder.() -> Nothing): Nothing defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> Nothing

'CashSchemaV1' @ [1580:38] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [1580:51] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'pennies' @ [1580:72] ==> @field:Column public final var pennies: Long defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'sum' @ [1580:80] ==> public final fun <O, R> KProperty1<CashSchemaV1.PersistentCashState, {Comparable<{Long & String}> & java.io.Serializable}?>.sum(groupByColumns: List<KProperty1<CashSchemaV1.PersistentCashState, {Comparable<{Long & String}> & java.io.Serializable}>>? = ..., orderBy: Sort.Direction? = ...): CriteriaExpression.AggregateFunctionExpression<CashSchemaV1.PersistentCashState, {Comparable<{Long & String}> & java.io.Serializable}> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R> -> {Comparable<{Long & String}> & java.io.Serializable}

'listOf' @ [1580:101] ==> public fun <T> listOf(element: KMutableProperty1<CashSchemaV1.PersistentCashState, String>): List<KMutableProperty1<CashSchemaV1.PersistentCashState, String>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> KMutableProperty1<PersistentCashState, String>

'CashSchemaV1' @ [1580:108] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [1580:121] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'VaultCustomQueryCriteria' @ [1581:28] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<PersistentState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentState

'ccyIndex' @ [1581:53] ==> val ccyIndex: Nothing defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash balances for all currencies`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [1582:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1582:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<FungibleAsset<*>> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> FungibleAsset<*>

'criteria' @ [1582:67] ==> val criteria: QueryCriteria.VaultCustomQueryCriteria<PersistentState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash balances for all currencies`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1584:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (Any..Any?)>..List<(Any..Any?)>?)): (ListAssert<(Any..Any?)>..ListAssert<(Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> Any

'results' @ [1584:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash balances for all currencies`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [1584:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1584:46] ==> public open fun hasSize(p0: Int): (ListAssert<(Any..Any?)>..ListAssert<(Any..Any?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [1585:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [1585:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash balances for all currencies`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [1585:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [1585:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [1586:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [1586:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash balances for all currencies`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [1586:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [1586:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [1587:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [1587:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash balances for all currencies`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [1587:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [1587:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [1588:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [1588:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash balances for all currencies`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [1588:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [1588:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [1589:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [1589:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash balances for all currencies`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [1589:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [1589:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'assertThat' @ [1590:13] ==> @CheckReturnValue public open fun <T : (Any..Any?)> assertThat(p0: (Any..Any?)): (AbstractObjectAssert<*, (Any..Any?)>..AbstractObjectAssert<*, (Any..Any?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Any..Any?)> -> Any

'results' @ [1590:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed cash balances for all currencies`.<anonymous>[LocalVariableDescriptor]

'otherResults' @ [1590:32] ==> public final val otherResults: List<Any> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'isEqualTo' @ [1590:49] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>..AbstractObjectAssert<out (AbstractObjectAssert<out Any?, out Any?>..AbstractObjectAssert<out Any?, out Any?>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?), (Any..Any?)>?) defined in org.assertj.core.api.AbstractObjectAssert[JavaMethodDescriptor]

'Test' @ [1594:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1596:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1596:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [1597:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1597:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1597:46] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1597:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1597:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1597:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1598:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1598:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [1598:46] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1598:54] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1598:70] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1598:90] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1599:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1599:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [1599:46] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1599:54] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1599:70] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1599:90] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1600:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1600:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'SWISS_FRANCS' @ [1600:47] ==> public val Int.SWISS_FRANCS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1600:61] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1600:77] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1600:97] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [1602:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1602:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>?)

'FungibleAssetQueryCriteria' @ [1604:41] ==> @JvmOverloads public constructor FungibleAssetQueryCriteria(participants: List<AbstractParty>? = ..., owner: List<AbstractParty>? = ..., quantity: ColumnPredicate<Long>? = ..., issuer: List<AbstractParty>? = ..., issuerRef: List<OpaqueBytes>? = ..., status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria[DeserializedClassConstructorDescriptor]

'builder' @ [1604:79] ==> public inline fun <A> builder(block: Builder.() -> ColumnPredicate.BinaryComparison<Long>): ColumnPredicate.BinaryComparison<Long> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> BinaryComparison<Long>

'greaterThan' @ [1604:89] ==> public final fun <R : Comparable<Long>> greaterThan(value: Long): ColumnPredicate.BinaryComparison<Long> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <R : Comparable<R>> -> Long

'vaultQuerySvc' @ [1605:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1605:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<Cash.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'fungibleAssetCriteria' @ [1605:61] ==> val fungibleAssetCriteria: QueryCriteria.FungibleAssetQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for quantity greater than`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1608:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..List<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [1608:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for quantity greater than`.<anonymous>[LocalVariableDescriptor]

'states' @ [1608:32] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1608:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1612:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1614:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1614:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'identitySvc' @ [1615:13] ==> public final val identitySvc: IdentityService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'verifyAndRegisterIdentity' @ [1615:25] ==> public abstract fun verifyAndRegisterIdentity(identity: PartyAndCertificate): PartyAndCertificate? defined in net.corda.core.node.services.IdentityService[DeserializedSimpleFunctionDescriptor]

'BOC_IDENTITY' @ [1615:51] ==> public val BOC_IDENTITY: PartyAndCertificate defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [1617:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1617:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1617:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1617:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1617:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1617:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'DUMMY_CASH_ISSUER' @ [1617:116] ==> public val DUMMY_CASH_ISSUER: PartyAndReference defined in net.corda.finance.contracts.asset[DeserializedPropertyDescriptor]

'services' @ [1618:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1618:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1618:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1618:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1618:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1618:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'BOC' @ [1618:116] ==> public val BOC: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'ref' @ [1618:120] ==> public final fun ref(vararg bytes: Byte): PartyAndReference defined in net.corda.core.identity.Party[DeserializedSimpleFunctionDescriptor]

'database' @ [1620:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1620:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?)): (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>?)>?)

'FungibleAssetQueryCriteria' @ [1622:28] ==> @JvmOverloads public constructor FungibleAssetQueryCriteria(participants: List<AbstractParty>? = ..., owner: List<AbstractParty>? = ..., quantity: ColumnPredicate<Long>? = ..., issuer: List<AbstractParty>? = ..., issuerRef: List<OpaqueBytes>? = ..., status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria[DeserializedClassConstructorDescriptor]

'listOf' @ [1622:64] ==> public fun <T> listOf(element: Party): List<Party> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Party

'BOC' @ [1622:71] ==> public val BOC: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'vaultQuerySvc' @ [1623:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1623:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<FungibleAsset<*>> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> FungibleAsset<*>

'criteria' @ [1623:67] ==> val criteria: QueryCriteria.FungibleAssetQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for issuer party`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1626:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..List<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?)): (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<FungibleAsset<*>>

'results' @ [1626:24] ==> val results: Vault.Page<FungibleAsset<*>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for issuer party`.<anonymous>[LocalVariableDescriptor]

'states' @ [1626:32] ==> public final val states: List<StateAndRef<FungibleAsset<*>>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1626:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1630:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1632:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1632:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [1633:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1633:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1633:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1633:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1633:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1633:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1634:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1634:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [1634:47] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1634:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1634:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1634:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1635:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1635:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [1635:46] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1635:54] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1635:70] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1635:90] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1636:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1636:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'SWISS_FRANCS' @ [1636:47] ==> public val Int.SWISS_FRANCS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1636:61] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1636:77] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1636:97] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [1638:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1638:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>?)

'builder' @ [1639:28] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String?>): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String?> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> ColumnPredicateExpression<PersistentCashState, String?>

'CashSchemaV1' @ [1639:38] ==> @CordaSerializable public object CashSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [1639:51] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'currency' @ [1639:72] ==> @field:Column public final var currency: String defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'equal' @ [1639:81] ==> public final fun <O, R> KProperty1<CashSchemaV1.PersistentCashState, String?>.equal(value: (String..String?)): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String?> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R> -> (kotlin.String..kotlin.String?)

'GBP' @ [1639:87] ==> @field:JvmField public val GBP: Currency defined in net.corda.finance[DeserializedPropertyDescriptor]

'currencyCode' @ [1639:91] ==> public final val Currency.currencyCode: (String..String?)[MyPropertyDescriptor]

'VaultCustomQueryCriteria' @ [1640:34] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CashSchemaV1.PersistentCashState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCashState

'ccyIndex' @ [1640:59] ==> val ccyIndex: CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String?> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for single currency and quantity greater than`.<anonymous>[LocalVariableDescriptor]

'FungibleAssetQueryCriteria' @ [1641:41] ==> @JvmOverloads public constructor FungibleAssetQueryCriteria(participants: List<AbstractParty>? = ..., owner: List<AbstractParty>? = ..., quantity: ColumnPredicate<Long>? = ..., issuer: List<AbstractParty>? = ..., issuerRef: List<OpaqueBytes>? = ..., status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria[DeserializedClassConstructorDescriptor]

'builder' @ [1641:79] ==> public inline fun <A> builder(block: Builder.() -> ColumnPredicate.BinaryComparison<Long>): ColumnPredicate.BinaryComparison<Long> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> BinaryComparison<Long>

'greaterThan' @ [1641:89] ==> public final fun <R : Comparable<Long>> greaterThan(value: Long): ColumnPredicate.BinaryComparison<Long> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <R : Comparable<R>> -> Long

'vaultQuerySvc' @ [1642:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1642:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<Cash.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'fungibleAssetCriteria' @ [1642:61] ==> val fungibleAssetCriteria: QueryCriteria.FungibleAssetQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for single currency and quantity greater than`.<anonymous>[LocalVariableDescriptor]

'and' @ [1642:83] ==> public final fun and(criteria: QueryCriteria): QueryCriteria defined in net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria[DeserializedSimpleFunctionDescriptor]

'customCriteria' @ [1642:87] ==> val customCriteria: QueryCriteria.VaultCustomQueryCriteria<CashSchemaV1.PersistentCashState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for single currency and quantity greater than`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1644:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..List<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [1644:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed fungible assets for single currency and quantity greater than`.<anonymous>[LocalVariableDescriptor]

'states' @ [1644:32] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1644:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1651:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1653:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1653:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Unit): Unit defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Unit

'MEGA_CORP' @ [1654:28] ==> public val MEGA_CORP: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'ref' @ [1654:38] ==> public final fun ref(vararg bytes: Byte): PartyAndReference defined in net.corda.core.identity.Party[DeserializedSimpleFunctionDescriptor]

'`issued by`' @ [1657:29] ==> public infix fun Amount<Currency>.`issued by`(deposit: PartyAndReference): Amount<Issued<Currency>> defined in net.corda.finance[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1657:35] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_CASH_ISSUER' @ [1657:55] ==> public val DUMMY_CASH_ISSUER: PartyAndReference defined in net.corda.finance.contracts.asset[DeserializedPropertyDescriptor]

'CommercialPaper' @ [1659:21] ==> public constructor CommercialPaper() defined in net.corda.finance.contracts.CommercialPaper[DeserializedClassConstructorDescriptor]

'generateIssue' @ [1659:39] ==> public final fun generateIssue(issuance: PartyAndReference, faceValue: Amount<Issued<Currency>>, maturityDate: Instant, notary: Party): TransactionBuilder defined in net.corda.finance.contracts.CommercialPaper[DeserializedSimpleFunctionDescriptor]

'issuance' @ [1659:53] ==> val issuance: PartyAndReference defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 single attribute`.<anonymous>[LocalVariableDescriptor]

'faceValue' @ [1659:63] ==> val faceValue: Amount<Issued<Currency>> defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 single attribute`.<anonymous>[LocalVariableDescriptor]

'TEST_TX_TIME' @ [1659:74] ==> public val TEST_TX_TIME: Instant defined in net.corda.testing[DeserializedPropertyDescriptor]

'days' @ [1659:92] ==> public val Int.days: Duration defined in net.corda.core.utilities[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [1659:98] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'let' @ [1659:112] ==> @InlineOnly public inline fun <T, R> TransactionBuilder.let(block: (TransactionBuilder) -> SignedTransaction): SignedTransaction defined in kotlin[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> TransactionBuilder
    <R> -> SignedTransaction

'builder' @ [1660:25] ==> value-parameter builder: TransactionBuilder defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 single attribute`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'setTimeWindow' @ [1660:33] ==> public final fun setTimeWindow(time: Instant, timeTolerance: Duration): TransactionBuilder defined in net.corda.core.transactions.TransactionBuilder[DeserializedSimpleFunctionDescriptor]

'TEST_TX_TIME' @ [1660:47] ==> public val TEST_TX_TIME: Instant defined in net.corda.testing[DeserializedPropertyDescriptor]

'seconds' @ [1660:64] ==> public val Int.seconds: Duration defined in net.corda.core.utilities[DeserializedPropertyDescriptor]

'services' @ [1661:35] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'signInitialTransaction' @ [1661:44] ==> public open fun signInitialTransaction(builder: TransactionBuilder, publicKey: PublicKey): SignedTransaction defined in net.corda.testing.node.MockServices[DeserializedSimpleFunctionDescriptor]

'builder' @ [1661:67] ==> value-parameter builder: TransactionBuilder defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 single attribute`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'MEGA_CORP_PUBKEY' @ [1661:76] ==> public val MEGA_CORP_PUBKEY: PublicKey defined in net.corda.testing[DeserializedPropertyDescriptor]

'notaryServices' @ [1662:25] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'addSignature' @ [1662:40] ==> public open fun addSignature(signedTransaction: SignedTransaction, publicKey: PublicKey): SignedTransaction defined in net.corda.testing.node.MockServices[DeserializedSimpleFunctionDescriptor]

'stx' @ [1662:53] ==> val stx: SignedTransaction defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 single attribute`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'DUMMY_NOTARY_KEY' @ [1662:58] ==> public val DUMMY_NOTARY_KEY: KeyPair defined in net.corda.testing[DeserializedPropertyDescriptor]

'public' @ [1662:75] ==> public final val KeyPair.public: (PublicKey..PublicKey?)[MyPropertyDescriptor]

'services' @ [1665:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'recordTransactions' @ [1665:22] ==> public open fun recordTransactions(first: SignedTransaction, vararg remaining: SignedTransaction): Unit defined in net.corda.testing.node.MockServices[DeserializedSimpleFunctionDescriptor]

'commercialPaper' @ [1665:41] ==> val commercialPaper: SignedTransaction defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 single attribute`.<anonymous>[LocalVariableDescriptor]

'`issued by`' @ [1668:30] ==> public infix fun Amount<Currency>.`issued by`(deposit: PartyAndReference): Amount<Issued<Currency>> defined in net.corda.finance[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [1668:36] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_CASH_ISSUER' @ [1668:55] ==> public val DUMMY_CASH_ISSUER: PartyAndReference defined in net.corda.finance.contracts.asset[DeserializedPropertyDescriptor]

'CommercialPaper' @ [1670:21] ==> public constructor CommercialPaper() defined in net.corda.finance.contracts.CommercialPaper[DeserializedClassConstructorDescriptor]

'generateIssue' @ [1670:39] ==> public final fun generateIssue(issuance: PartyAndReference, faceValue: Amount<Issued<Currency>>, maturityDate: Instant, notary: Party): TransactionBuilder defined in net.corda.finance.contracts.CommercialPaper[DeserializedSimpleFunctionDescriptor]

'issuance' @ [1670:53] ==> val issuance: PartyAndReference defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 single attribute`.<anonymous>[LocalVariableDescriptor]

'faceValue2' @ [1670:63] ==> val faceValue2: Amount<Issued<Currency>> defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 single attribute`.<anonymous>[LocalVariableDescriptor]

'TEST_TX_TIME' @ [1670:75] ==> public val TEST_TX_TIME: Instant defined in net.corda.testing[DeserializedPropertyDescriptor]

'days' @ [1670:93] ==> public val Int.days: Duration defined in net.corda.core.utilities[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [1670:99] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'let' @ [1670:113] ==> @InlineOnly public inline fun <T, R> TransactionBuilder.let(block: (TransactionBuilder) -> SignedTransaction): SignedTransaction defined in kotlin[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> TransactionBuilder
    <R> -> SignedTransaction

'builder' @ [1671:25] ==> value-parameter builder: TransactionBuilder defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 single attribute`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'setTimeWindow' @ [1671:33] ==> public final fun setTimeWindow(time: Instant, timeTolerance: Duration): TransactionBuilder defined in net.corda.core.transactions.TransactionBuilder[DeserializedSimpleFunctionDescriptor]

'TEST_TX_TIME' @ [1671:47] ==> public val TEST_TX_TIME: Instant defined in net.corda.testing[DeserializedPropertyDescriptor]

'seconds' @ [1671:64] ==> public val Int.seconds: Duration defined in net.corda.core.utilities[DeserializedPropertyDescriptor]

'services' @ [1672:35] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'signInitialTransaction' @ [1672:44] ==> public open fun signInitialTransaction(builder: TransactionBuilder, publicKey: PublicKey): SignedTransaction defined in net.corda.testing.node.MockServices[DeserializedSimpleFunctionDescriptor]

'builder' @ [1672:67] ==> value-parameter builder: TransactionBuilder defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 single attribute`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'MEGA_CORP_PUBKEY' @ [1672:76] ==> public val MEGA_CORP_PUBKEY: PublicKey defined in net.corda.testing[DeserializedPropertyDescriptor]

'notaryServices' @ [1673:25] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'addSignature' @ [1673:40] ==> public open fun addSignature(signedTransaction: SignedTransaction, publicKey: PublicKey): SignedTransaction defined in net.corda.testing.node.MockServices[DeserializedSimpleFunctionDescriptor]

'stx' @ [1673:53] ==> val stx: SignedTransaction defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 single attribute`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'DUMMY_NOTARY_KEY' @ [1673:58] ==> public val DUMMY_NOTARY_KEY: KeyPair defined in net.corda.testing[DeserializedPropertyDescriptor]

'public' @ [1673:75] ==> public final val KeyPair.public: (PublicKey..PublicKey?)[MyPropertyDescriptor]

'services' @ [1675:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'recordTransactions' @ [1675:22] ==> public open fun recordTransactions(first: SignedTransaction, vararg remaining: SignedTransaction): Unit defined in net.corda.testing.node.MockServices[DeserializedSimpleFunctionDescriptor]

'commercialPaper2' @ [1675:41] ==> val commercialPaper2: SignedTransaction defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 single attribute`.<anonymous>[LocalVariableDescriptor]

'database' @ [1677:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1677:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?)): (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.node.services.Vault.StateMetadata..net.corda.core.node.services.Vault.StateMetadata?)>..org.assertj.core.api.ListAssert<(net.corda.core.node.services.Vault.StateMetadata..net.corda.core.node.services.Vault.StateMetadata?)>?)

'builder' @ [1678:28] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.ColumnPredicateExpression<CommercialPaperSchemaV1.PersistentCommercialPaperState, String?>): CriteriaExpression.ColumnPredicateExpression<CommercialPaperSchemaV1.PersistentCommercialPaperState, String?> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> ColumnPredicateExpression<PersistentCommercialPaperState, String?>

'CommercialPaperSchemaV1' @ [1678:38] ==> @CordaSerializable public object CommercialPaperSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCommercialPaperState' @ [1678:62] ==> public constructor PersistentCommercialPaperState(issuanceParty: String, issuanceRef: ByteArray, owner: String, maturity: Instant, faceValue: Long, currency: String, faceValueIssuerParty: String, faceValueIssuerRef: ByteArray) defined in net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState[DeserializedClassConstructorDescriptor]

'currency' @ [1678:94] ==> @field:Column public final var currency: String defined in net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState[DeserializedPropertyDescriptor]

'equal' @ [1678:103] ==> public final fun <O, R> KProperty1<CommercialPaperSchemaV1.PersistentCommercialPaperState, String?>.equal(value: (String..String?)): CriteriaExpression.ColumnPredicateExpression<CommercialPaperSchemaV1.PersistentCommercialPaperState, String?> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCommercialPaperState
    <R> -> (kotlin.String..kotlin.String?)

'USD' @ [1678:109] ==> @field:JvmField public val USD: Currency defined in net.corda.finance[DeserializedPropertyDescriptor]

'currencyCode' @ [1678:113] ==> public final val Currency.currencyCode: (String..String?)[MyPropertyDescriptor]

'VaultCustomQueryCriteria' @ [1679:43] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CommercialPaperSchemaV1.PersistentCommercialPaperState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCommercialPaperState

'ccyIndex' @ [1679:68] ==> val ccyIndex: CriteriaExpression.ColumnPredicateExpression<CommercialPaperSchemaV1.PersistentCommercialPaperState, String?> defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 single attribute`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [1681:26] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1681:40] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<CommercialPaper.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'criteria1' @ [1681:71] ==> val criteria1: QueryCriteria.VaultCustomQueryCriteria<CommercialPaperSchemaV1.PersistentCommercialPaperState> defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 single attribute`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1683:24] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<CommercialPaper.State>..StateAndRef<CommercialPaper.State>?)>..List<(StateAndRef<CommercialPaper.State>..StateAndRef<CommercialPaper.State>?)>?)): (ListAssert<(StateAndRef<CommercialPaper.State>..StateAndRef<CommercialPaper.State>?)>..ListAssert<(StateAndRef<CommercialPaper.State>..StateAndRef<CommercialPaper.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'result' @ [1683:35] ==> val result: Vault.Page<CommercialPaper.State> defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 single attribute`.<anonymous>[LocalVariableDescriptor]

'states' @ [1683:42] ==> public final val states: List<StateAndRef<CommercialPaper.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1683:50] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<CommercialPaper.State>..StateAndRef<CommercialPaper.State>?)>..ListAssert<(StateAndRef<CommercialPaper.State>..StateAndRef<CommercialPaper.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [1684:24] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (Vault.StateMetadata..Vault.StateMetadata?)>..List<(Vault.StateMetadata..Vault.StateMetadata?)>?)): (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateMetadata

'result' @ [1684:35] ==> val result: Vault.Page<CommercialPaper.State> defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 single attribute`.<anonymous>[LocalVariableDescriptor]

'statesMetadata' @ [1684:42] ==> public final val statesMetadata: List<Vault.StateMetadata> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1684:58] ==> public open fun hasSize(p0: Int): (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1689:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1691:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1691:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Unit): Unit defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Unit

'MEGA_CORP' @ [1692:28] ==> public val MEGA_CORP: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'ref' @ [1692:38] ==> public final fun ref(vararg bytes: Byte): PartyAndReference defined in net.corda.core.identity.Party[DeserializedSimpleFunctionDescriptor]

'`issued by`' @ [1695:29] ==> public infix fun Amount<Currency>.`issued by`(deposit: PartyAndReference): Amount<Issued<Currency>> defined in net.corda.finance[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1695:35] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_CASH_ISSUER' @ [1695:55] ==> public val DUMMY_CASH_ISSUER: PartyAndReference defined in net.corda.finance.contracts.asset[DeserializedPropertyDescriptor]

'CommercialPaper' @ [1697:21] ==> public constructor CommercialPaper() defined in net.corda.finance.contracts.CommercialPaper[DeserializedClassConstructorDescriptor]

'generateIssue' @ [1697:39] ==> public final fun generateIssue(issuance: PartyAndReference, faceValue: Amount<Issued<Currency>>, maturityDate: Instant, notary: Party): TransactionBuilder defined in net.corda.finance.contracts.CommercialPaper[DeserializedSimpleFunctionDescriptor]

'issuance' @ [1697:53] ==> val issuance: PartyAndReference defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 - multiple attributes`.<anonymous>[LocalVariableDescriptor]

'faceValue' @ [1697:63] ==> val faceValue: Amount<Issued<Currency>> defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 - multiple attributes`.<anonymous>[LocalVariableDescriptor]

'TEST_TX_TIME' @ [1697:74] ==> public val TEST_TX_TIME: Instant defined in net.corda.testing[DeserializedPropertyDescriptor]

'days' @ [1697:92] ==> public val Int.days: Duration defined in net.corda.core.utilities[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [1697:98] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'let' @ [1697:112] ==> @InlineOnly public inline fun <T, R> TransactionBuilder.let(block: (TransactionBuilder) -> SignedTransaction): SignedTransaction defined in kotlin[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> TransactionBuilder
    <R> -> SignedTransaction

'builder' @ [1698:25] ==> value-parameter builder: TransactionBuilder defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 - multiple attributes`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'setTimeWindow' @ [1698:33] ==> public final fun setTimeWindow(time: Instant, timeTolerance: Duration): TransactionBuilder defined in net.corda.core.transactions.TransactionBuilder[DeserializedSimpleFunctionDescriptor]

'TEST_TX_TIME' @ [1698:47] ==> public val TEST_TX_TIME: Instant defined in net.corda.testing[DeserializedPropertyDescriptor]

'seconds' @ [1698:64] ==> public val Int.seconds: Duration defined in net.corda.core.utilities[DeserializedPropertyDescriptor]

'services' @ [1699:35] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'signInitialTransaction' @ [1699:44] ==> public open fun signInitialTransaction(builder: TransactionBuilder, publicKey: PublicKey): SignedTransaction defined in net.corda.testing.node.MockServices[DeserializedSimpleFunctionDescriptor]

'builder' @ [1699:67] ==> value-parameter builder: TransactionBuilder defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 - multiple attributes`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'MEGA_CORP_PUBKEY' @ [1699:76] ==> public val MEGA_CORP_PUBKEY: PublicKey defined in net.corda.testing[DeserializedPropertyDescriptor]

'notaryServices' @ [1700:25] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'addSignature' @ [1700:40] ==> public open fun addSignature(signedTransaction: SignedTransaction, publicKey: PublicKey): SignedTransaction defined in net.corda.testing.node.MockServices[DeserializedSimpleFunctionDescriptor]

'stx' @ [1700:53] ==> val stx: SignedTransaction defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 - multiple attributes`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'DUMMY_NOTARY_KEY' @ [1700:58] ==> public val DUMMY_NOTARY_KEY: KeyPair defined in net.corda.testing[DeserializedPropertyDescriptor]

'public' @ [1700:75] ==> public final val KeyPair.public: (PublicKey..PublicKey?)[MyPropertyDescriptor]

'commercialPaper' @ [1702:13] ==> val commercialPaper: SignedTransaction defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 - multiple attributes`.<anonymous>[LocalVariableDescriptor]

'verifyRequiredSignatures' @ [1702:29] ==> public open fun verifyRequiredSignatures(): Unit defined in net.corda.core.transactions.SignedTransaction[DeserializedSimpleFunctionDescriptor]

'services' @ [1703:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'recordTransactions' @ [1703:22] ==> public open fun recordTransactions(first: SignedTransaction, vararg remaining: SignedTransaction): Unit defined in net.corda.testing.node.MockServices[DeserializedSimpleFunctionDescriptor]

'commercialPaper' @ [1703:41] ==> val commercialPaper: SignedTransaction defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 - multiple attributes`.<anonymous>[LocalVariableDescriptor]

'`issued by`' @ [1706:30] ==> public infix fun Amount<Currency>.`issued by`(deposit: PartyAndReference): Amount<Issued<Currency>> defined in net.corda.finance[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [1706:35] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_CASH_ISSUER' @ [1706:54] ==> public val DUMMY_CASH_ISSUER: PartyAndReference defined in net.corda.finance.contracts.asset[DeserializedPropertyDescriptor]

'CommercialPaper' @ [1708:21] ==> public constructor CommercialPaper() defined in net.corda.finance.contracts.CommercialPaper[DeserializedClassConstructorDescriptor]

'generateIssue' @ [1708:39] ==> public final fun generateIssue(issuance: PartyAndReference, faceValue: Amount<Issued<Currency>>, maturityDate: Instant, notary: Party): TransactionBuilder defined in net.corda.finance.contracts.CommercialPaper[DeserializedSimpleFunctionDescriptor]

'issuance' @ [1708:53] ==> val issuance: PartyAndReference defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 - multiple attributes`.<anonymous>[LocalVariableDescriptor]

'faceValue2' @ [1708:63] ==> val faceValue2: Amount<Issued<Currency>> defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 - multiple attributes`.<anonymous>[LocalVariableDescriptor]

'TEST_TX_TIME' @ [1708:75] ==> public val TEST_TX_TIME: Instant defined in net.corda.testing[DeserializedPropertyDescriptor]

'days' @ [1708:93] ==> public val Int.days: Duration defined in net.corda.core.utilities[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [1708:99] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'let' @ [1708:113] ==> @InlineOnly public inline fun <T, R> TransactionBuilder.let(block: (TransactionBuilder) -> SignedTransaction): SignedTransaction defined in kotlin[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> TransactionBuilder
    <R> -> SignedTransaction

'builder' @ [1709:25] ==> value-parameter builder: TransactionBuilder defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 - multiple attributes`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'setTimeWindow' @ [1709:33] ==> public final fun setTimeWindow(time: Instant, timeTolerance: Duration): TransactionBuilder defined in net.corda.core.transactions.TransactionBuilder[DeserializedSimpleFunctionDescriptor]

'TEST_TX_TIME' @ [1709:47] ==> public val TEST_TX_TIME: Instant defined in net.corda.testing[DeserializedPropertyDescriptor]

'seconds' @ [1709:64] ==> public val Int.seconds: Duration defined in net.corda.core.utilities[DeserializedPropertyDescriptor]

'services' @ [1710:35] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'signInitialTransaction' @ [1710:44] ==> public open fun signInitialTransaction(builder: TransactionBuilder, publicKey: PublicKey): SignedTransaction defined in net.corda.testing.node.MockServices[DeserializedSimpleFunctionDescriptor]

'builder' @ [1710:67] ==> value-parameter builder: TransactionBuilder defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 - multiple attributes`.<anonymous>.<anonymous>[ValueParameterDescriptorImpl]

'MEGA_CORP_PUBKEY' @ [1710:76] ==> public val MEGA_CORP_PUBKEY: PublicKey defined in net.corda.testing[DeserializedPropertyDescriptor]

'notaryServices' @ [1711:25] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'addSignature' @ [1711:40] ==> public open fun addSignature(signedTransaction: SignedTransaction, publicKey: PublicKey): SignedTransaction defined in net.corda.testing.node.MockServices[DeserializedSimpleFunctionDescriptor]

'stx' @ [1711:53] ==> val stx: SignedTransaction defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 - multiple attributes`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'DUMMY_NOTARY_KEY' @ [1711:58] ==> public val DUMMY_NOTARY_KEY: KeyPair defined in net.corda.testing[DeserializedPropertyDescriptor]

'public' @ [1711:75] ==> public final val KeyPair.public: (PublicKey..PublicKey?)[MyPropertyDescriptor]

'commercialPaper2' @ [1713:13] ==> val commercialPaper2: SignedTransaction defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 - multiple attributes`.<anonymous>[LocalVariableDescriptor]

'verifyRequiredSignatures' @ [1713:30] ==> public open fun verifyRequiredSignatures(): Unit defined in net.corda.core.transactions.SignedTransaction[DeserializedSimpleFunctionDescriptor]

'services' @ [1714:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'recordTransactions' @ [1714:22] ==> public open fun recordTransactions(first: SignedTransaction, vararg remaining: SignedTransaction): Unit defined in net.corda.testing.node.MockServices[DeserializedSimpleFunctionDescriptor]

'commercialPaper2' @ [1714:41] ==> val commercialPaper2: SignedTransaction defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 - multiple attributes`.<anonymous>[LocalVariableDescriptor]

'database' @ [1716:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1716:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?)): (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.node.services.Vault.StateMetadata..net.corda.core.node.services.Vault.StateMetadata?)>..org.assertj.core.api.ListAssert<(net.corda.core.node.services.Vault.StateMetadata..net.corda.core.node.services.Vault.StateMetadata?)>?)

'builder' @ [1717:26] ==> public inline fun <A> builder(block: Builder.() -> Vault.Page<CommercialPaper.State>): Vault.Page<CommercialPaper.State> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> Page<State>

'CommercialPaperSchemaV1' @ [1719:32] ==> @CordaSerializable public object CommercialPaperSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCommercialPaperState' @ [1719:56] ==> public constructor PersistentCommercialPaperState(issuanceParty: String, issuanceRef: ByteArray, owner: String, maturity: Instant, faceValue: Long, currency: String, faceValueIssuerParty: String, faceValueIssuerRef: ByteArray) defined in net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState[DeserializedClassConstructorDescriptor]

'currency' @ [1719:88] ==> @field:Column public final var currency: String defined in net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState[DeserializedPropertyDescriptor]

'equal' @ [1719:97] ==> public final fun <O, R> KProperty1<CommercialPaperSchemaV1.PersistentCommercialPaperState, String?>.equal(value: (String..String?)): CriteriaExpression.ColumnPredicateExpression<CommercialPaperSchemaV1.PersistentCommercialPaperState, String?> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCommercialPaperState
    <R> -> (kotlin.String..kotlin.String?)

'USD' @ [1719:103] ==> @field:JvmField public val USD: Currency defined in net.corda.finance[DeserializedPropertyDescriptor]

'currencyCode' @ [1719:107] ==> public final val Currency.currencyCode: (String..String?)[MyPropertyDescriptor]

'CommercialPaperSchemaV1' @ [1720:37] ==> @CordaSerializable public object CommercialPaperSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCommercialPaperState' @ [1720:61] ==> public constructor PersistentCommercialPaperState(issuanceParty: String, issuanceRef: ByteArray, owner: String, maturity: Instant, faceValue: Long, currency: String, faceValueIssuerParty: String, faceValueIssuerRef: ByteArray) defined in net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState[DeserializedClassConstructorDescriptor]

'maturity' @ [1720:93] ==> @field:Column public final var maturity: Instant defined in net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState[DeserializedPropertyDescriptor]

'greaterThanOrEqual' @ [1720:102] ==> public final fun <O, R : Comparable<(Instant..Instant?)>> KProperty1<CommercialPaperSchemaV1.PersistentCommercialPaperState, Instant?>.greaterThanOrEqual(value: (Instant..Instant?)): CriteriaExpression.ColumnPredicateExpression<CommercialPaperSchemaV1.PersistentCommercialPaperState, (Instant..Instant?)> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCommercialPaperState
    <R : Comparable<R>> -> (java.time.Instant..java.time.Instant?)

'TEST_TX_TIME' @ [1720:121] ==> public val TEST_TX_TIME: Instant defined in net.corda.testing[DeserializedPropertyDescriptor]

'days' @ [1720:139] ==> public val Int.days: Duration defined in net.corda.core.utilities[DeserializedPropertyDescriptor]

'CommercialPaperSchemaV1' @ [1721:38] ==> @CordaSerializable public object CommercialPaperSchemaV1 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCommercialPaperState' @ [1721:62] ==> public constructor PersistentCommercialPaperState(issuanceParty: String, issuanceRef: ByteArray, owner: String, maturity: Instant, faceValue: Long, currency: String, faceValueIssuerParty: String, faceValueIssuerRef: ByteArray) defined in net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState[DeserializedClassConstructorDescriptor]

'faceValue' @ [1721:94] ==> @field:Column public final var faceValue: Long defined in net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState[DeserializedPropertyDescriptor]

'greaterThanOrEqual' @ [1721:104] ==> public final fun <O, R : Comparable<Long>> KProperty1<CommercialPaperSchemaV1.PersistentCommercialPaperState, Long?>.greaterThanOrEqual(value: Long): CriteriaExpression.ColumnPredicateExpression<CommercialPaperSchemaV1.PersistentCommercialPaperState, Long> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCommercialPaperState
    <R : Comparable<R>> -> Long

'VaultCustomQueryCriteria' @ [1723:47] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CommercialPaperSchemaV1.PersistentCommercialPaperState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCommercialPaperState

'ccyIndex' @ [1723:72] ==> val ccyIndex: CriteriaExpression.ColumnPredicateExpression<CommercialPaperSchemaV1.PersistentCommercialPaperState, String?> defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 - multiple attributes`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'VaultCustomQueryCriteria' @ [1724:47] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CommercialPaperSchemaV1.PersistentCommercialPaperState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCommercialPaperState

'maturityIndex' @ [1724:72] ==> val maturityIndex: CriteriaExpression.ColumnPredicateExpression<CommercialPaperSchemaV1.PersistentCommercialPaperState, (Instant..Instant?)> defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 - multiple attributes`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'VaultCustomQueryCriteria' @ [1725:47] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CommercialPaperSchemaV1.PersistentCommercialPaperState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCommercialPaperState

'faceValueIndex' @ [1725:72] ==> val faceValueIndex: CriteriaExpression.ColumnPredicateExpression<CommercialPaperSchemaV1.PersistentCommercialPaperState, Long> defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 - multiple attributes`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [1727:17] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1727:31] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<CommercialPaper.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'criteria1' @ [1727:62] ==> val criteria1: QueryCriteria.VaultCustomQueryCriteria<CommercialPaperSchemaV1.PersistentCommercialPaperState> defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 - multiple attributes`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'and' @ [1727:72] ==> public final fun and(criteria: QueryCriteria): QueryCriteria defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedSimpleFunctionDescriptor]

'criteria3' @ [1727:76] ==> val criteria3: QueryCriteria.VaultCustomQueryCriteria<CommercialPaperSchemaV1.PersistentCommercialPaperState> defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 - multiple attributes`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'and' @ [1727:87] ==> public final infix fun and(criteria: QueryCriteria): QueryCriteria defined in net.corda.core.node.services.vault.QueryCriteria[DeserializedSimpleFunctionDescriptor]

'criteria2' @ [1727:91] ==> val criteria2: QueryCriteria.VaultCustomQueryCriteria<CommercialPaperSchemaV1.PersistentCommercialPaperState> defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 - multiple attributes`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1729:24] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<CommercialPaper.State>..StateAndRef<CommercialPaper.State>?)>..List<(StateAndRef<CommercialPaper.State>..StateAndRef<CommercialPaper.State>?)>?)): (ListAssert<(StateAndRef<CommercialPaper.State>..StateAndRef<CommercialPaper.State>?)>..ListAssert<(StateAndRef<CommercialPaper.State>..StateAndRef<CommercialPaper.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'result' @ [1729:35] ==> val result: Vault.Page<CommercialPaper.State> defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 - multiple attributes`.<anonymous>[LocalVariableDescriptor]

'states' @ [1729:42] ==> public final val states: List<StateAndRef<CommercialPaper.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1729:50] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<CommercialPaper.State>..StateAndRef<CommercialPaper.State>?)>..ListAssert<(StateAndRef<CommercialPaper.State>..StateAndRef<CommercialPaper.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [1730:24] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (Vault.StateMetadata..Vault.StateMetadata?)>..List<(Vault.StateMetadata..Vault.StateMetadata?)>?)): (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateMetadata

'result' @ [1730:35] ==> val result: Vault.Page<CommercialPaper.State> defined in net.corda.node.services.vault.VaultQueryTests.`custom query using JPA - commercial paper schema V1 - multiple attributes`.<anonymous>[LocalVariableDescriptor]

'statesMetadata' @ [1730:42] ==> public final val statesMetadata: List<Vault.StateMetadata> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1730:58] ==> public open fun hasSize(p0: Int): (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1734:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1736:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1736:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [1737:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1737:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1737:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1737:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1737:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1737:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1738:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1738:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [1738:47] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1738:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1738:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1738:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1739:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1739:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'SWISS_FRANCS' @ [1739:47] ==> public val Int.SWISS_FRANCS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1739:61] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1739:77] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1739:97] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [1741:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1741:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>): AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>?), out (kotlin.Throwable..kotlin.Throwable?)>..org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>?), out (kotlin.Throwable..kotlin.Throwable?)>?), out (kotlin.Throwable..kotlin.Throwable?)>..org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>?), out (kotlin.Throwable..kotlin.Throwable?)>..org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>?), out (kotlin.Throwable..kotlin.Throwable?)>?), out (kotlin.Throwable..kotlin.Throwable?)>?), out (kotlin.Throwable..kotlin.Throwable?)>..org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>?), out (kotlin.Throwable..kotlin.Throwable?)>..org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>?), out (kotlin.Throwable..kotlin.Throwable?)>?), out (kotlin.Throwable..kotlin.Throwable?)>..org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>?), out (kotlin.Throwable..kotlin.Throwable?)>..org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>?), out (kotlin.Throwable..kotlin.Throwable?)>?), out (kotlin.Throwable..kotlin.Throwable?)>?), out (kotlin.Throwable..kotlin.Throwable?)>?), out (kotlin.Throwable..kotlin.Throwable?)>..org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>?), out (kotlin.Throwable..kotlin.Throwable?)>..org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>?), out (kotlin.Throwable..kotlin.Throwable?)>?), out (kotlin.Throwable..kotlin.Throwable?)>..org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>?), out (kotlin.Throwable..kotlin.Throwable?)>..org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>?), out (kotlin.Throwable..kotlin.Throwable?)>?), out (kotlin.Throwable..kotlin.Throwable?)>?), out (kotlin.Throwable..kotlin.Throwable?)>..org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>?), out (kotlin.Throwable..kotlin.Throwable?)>..org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>?), out (kotlin.Throwable..kotlin.Throwable?)>?), out (kotlin.Throwable..kotlin.Throwable?)>..org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>?), out (kotlin.Throwable..kotlin.Throwable?)>..org.assertj.core.api.AbstractThrowableAssert<out (org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractThrowableAssert<out kotlin.Any?, out kotlin.Any?>?), out (kotlin.Throwable..kotlin.Throwable?)>?), out (kotlin.Throwable..kotlin.Throwable?)>?), out (kotlin.Throwable..kotlin.Throwable?)>?), out (kotlin.Throwable..kotlin.Throwable?)>?), out (kotlin.Throwable..kotlin.Throwable?)>

'builder' @ [1743:37] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.ColumnPredicateExpression<SampleCashSchemaV3.PersistentCashState, String?>): CriteriaExpression.ColumnPredicateExpression<SampleCashSchemaV3.PersistentCashState, String?> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> ColumnPredicateExpression<PersistentCashState, String?>

'SampleCashSchemaV3' @ [1743:47] ==> public object SampleCashSchemaV3 : MappedSchema defined in net.corda.finance.schemas[FakeCallableDescriptorForObject]

'PersistentCashState' @ [1743:66] ==> public constructor PersistentCashState(participants: MutableSet<AbstractParty>? = ..., owner: AbstractParty, pennies: Long, currency: String, issuer: AbstractParty, issuerRef: ByteArray) defined in net.corda.finance.schemas.SampleCashSchemaV3.PersistentCashState[DeserializedClassConstructorDescriptor]

'currency' @ [1743:87] ==> @field:Column public final var currency: String defined in net.corda.finance.schemas.SampleCashSchemaV3.PersistentCashState[DeserializedPropertyDescriptor]

'equal' @ [1743:96] ==> public final fun <O, R> KProperty1<SampleCashSchemaV3.PersistentCashState, String?>.equal(value: (String..String?)): CriteriaExpression.ColumnPredicateExpression<SampleCashSchemaV3.PersistentCashState, String?> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R> -> (kotlin.String..kotlin.String?)

'GBP' @ [1743:102] ==> @field:JvmField public val GBP: Currency defined in net.corda.finance[DeserializedPropertyDescriptor]

'currencyCode' @ [1743:106] ==> public final val Currency.currencyCode: (String..String?)[MyPropertyDescriptor]

'VaultCustomQueryCriteria' @ [1744:28] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<SampleCashSchemaV3.PersistentCashState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCashState

'logicalExpression' @ [1744:53] ==> val logicalExpression: CriteriaExpression.ColumnPredicateExpression<SampleCashSchemaV3.PersistentCashState, String?> defined in net.corda.node.services.vault.VaultQueryTests.`query attempting to use unregistered schema`.<anonymous>[LocalVariableDescriptor]

'assertThatThrownBy' @ [1746:13] ==> @CheckReturnValue public final fun assertThatThrownBy(p0: (() -> Unit..(() -> Unit)?)): (AbstractThrowableAssert<*, out (Throwable..Throwable?)>..AbstractThrowableAssert<*, out (Throwable..Throwable?)>?) defined in org.assertj.core.api.Assertions[SamAdapterFunctionDescriptor]

'vaultQuerySvc' @ [1747:17] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1747:31] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<Cash.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'criteria' @ [1747:51] ==> val criteria: QueryCriteria.VaultCustomQueryCriteria<SampleCashSchemaV3.PersistentCashState> defined in net.corda.node.services.vault.VaultQueryTests.`query attempting to use unregistered schema`.<anonymous>[LocalVariableDescriptor]

'isInstanceOf' @ [1748:15] ==> public open fun isInstanceOf(p0: (Class<*>..Class<*>?)): (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?) defined in org.assertj.core.api.AbstractThrowableAssert[JavaMethodDescriptor]

'VaultQueryException' @ [1748:28] ==> public constructor VaultQueryException(description: String) defined in net.corda.core.node.services.VaultQueryException[DeserializedClassConstructorDescriptor]

'java' @ [1748:55] ==> public val <T> KClass<VaultQueryException>.java: Class<VaultQueryException> defined in kotlin.jvm[DeserializedPropertyDescriptor]
Inferred types:
    <T> -> VaultQueryException

'hasMessageContaining' @ [1748:61] ==> public open fun hasMessageContaining(p0: (String..String?)): (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>..AbstractThrowableAssert<out (AbstractThrowableAssert<out Any?, out Any?>..AbstractThrowableAssert<out Any?, out Any?>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?), out (Throwable..Throwable?)>?) defined in org.assertj.core.api.AbstractThrowableAssert[JavaMethodDescriptor]

'Test' @ [1755:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1757:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1757:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<Cash.State>): Vault<Cash.State> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<State>

'services' @ [1758:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1758:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [1758:47] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1758:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1758:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1758:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1759:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1759:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1759:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1759:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1759:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1759:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1760:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1760:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1760:46] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1760:55] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1760:71] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1760:91] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1761:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1761:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1761:45] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1761:54] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1761:70] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1761:90] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'database' @ [1763:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1763:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>..net.corda.core.contracts.StateAndRef<net.corda.finance.contracts.asset.Cash.State>?)>?)

'VaultQueryCriteria' @ [1765:35] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Vault' @ [1765:54] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'ALL' @ [1765:72] ==> enum entry ALL defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'builder' @ [1767:27] ==> public inline fun <A> builder(block: Builder.() -> Vault.Page<Cash.State>): Vault.Page<Cash.State> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> Page<State>

'PersistentCashState' @ [1768:37] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'currency' @ [1768:58] ==> @field:Column public final var currency: String defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'equal' @ [1768:67] ==> public final fun <O, R> KProperty1<CashSchemaV1.PersistentCashState, String?>.equal(value: (String..String?)): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String?> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R> -> (kotlin.String..kotlin.String?)

'USD' @ [1768:73] ==> @field:JvmField public val USD: Currency defined in net.corda.finance[DeserializedPropertyDescriptor]

'currencyCode' @ [1768:77] ==> public final val Currency.currencyCode: (String..String?)[MyPropertyDescriptor]

'PersistentCashState' @ [1769:37] ==> public constructor PersistentCashState(owner: AbstractParty, pennies: Long, currency: String, issuerParty: String, issuerRef: ByteArray) defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedClassConstructorDescriptor]

'pennies' @ [1769:58] ==> @field:Column public final var pennies: Long defined in net.corda.finance.schemas.CashSchemaV1.PersistentCashState[DeserializedPropertyDescriptor]

'greaterThanOrEqual' @ [1769:66] ==> public final fun <O, R : Comparable<Long>> KProperty1<CashSchemaV1.PersistentCashState, Long?>.greaterThanOrEqual(value: Long): CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> PersistentCashState
    <R : Comparable<R>> -> Long

'VaultCustomQueryCriteria' @ [1771:39] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CashSchemaV1.PersistentCashState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCashState

'currencyIndex' @ [1771:64] ==> val currencyIndex: CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, String?> defined in net.corda.node.services.vault.VaultQueryTests.`custom - all cash states with amount of currency greater or equal than`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'VaultCustomQueryCriteria' @ [1772:39] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<CashSchemaV1.PersistentCashState, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> PersistentCashState

'quantityIndex' @ [1772:64] ==> val quantityIndex: CriteriaExpression.ColumnPredicateExpression<CashSchemaV1.PersistentCashState, Long> defined in net.corda.node.services.vault.VaultQueryTests.`custom - all cash states with amount of currency greater or equal than`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'generalCriteria' @ [1774:32] ==> val generalCriteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`custom - all cash states with amount of currency greater or equal than`.<anonymous>[LocalVariableDescriptor]

'and' @ [1774:48] ==> public final fun and(criteria: QueryCriteria): QueryCriteria defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedSimpleFunctionDescriptor]

'customCriteria1' @ [1774:52] ==> val customCriteria1: QueryCriteria.VaultCustomQueryCriteria<CashSchemaV1.PersistentCashState> defined in net.corda.node.services.vault.VaultQueryTests.`custom - all cash states with amount of currency greater or equal than`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'and' @ [1774:68] ==> public final fun and(criteria: QueryCriteria): QueryCriteria defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedSimpleFunctionDescriptor]

'customCriteria2' @ [1774:72] ==> val customCriteria2: QueryCriteria.VaultCustomQueryCriteria<CashSchemaV1.PersistentCashState> defined in net.corda.node.services.vault.VaultQueryTests.`custom - all cash states with amount of currency greater or equal than`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [1775:17] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1775:31] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<Cash.State> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'criteria' @ [1775:51] ==> val criteria: QueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`custom - all cash states with amount of currency greater or equal than`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1779:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..List<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?)): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<State>

'results' @ [1779:24] ==> val results: Vault.Page<Cash.State> defined in net.corda.node.services.vault.VaultQueryTests.`custom - all cash states with amount of currency greater or equal than`.<anonymous>[LocalVariableDescriptor]

'states' @ [1779:32] ==> public final val states: List<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1779:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>..ListAssert<(StateAndRef<Cash.State>..StateAndRef<Cash.State>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1784:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'now' @ [1786:29] ==> public open fun now(): (Instant..Instant?) defined in java.time.Instant[JavaMethodDescriptor]

'start' @ [1787:19] ==> val start: (Instant..Instant?) defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId between two timestamps`[LocalVariableDescriptor]

'plus' @ [1787:25] ==> public open fun plus(p0: Long, p1: (TemporalUnit..TemporalUnit?)): (Instant..Instant?) defined in java.time.Instant[JavaMethodDescriptor]

'SECONDS' @ [1787:44] ==> enum entry SECONDS defined in java.time.temporal.ChronoUnit[FakeCallableDescriptorForObject]

'database' @ [1789:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1789:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<LinearState>): Vault<LinearState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<LinearState>

'services' @ [1790:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1790:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'sleep' @ [1791:13] ==> public open fun sleep(p0: Long): Unit defined in java.lang.Thread[JavaMethodDescriptor]

'services' @ [1792:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1792:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'database' @ [1796:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1796:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>?)

'TimeCondition' @ [1797:45] ==> public constructor TimeCondition(type: QueryCriteria.TimeInstantType, predicate: ColumnPredicate<Instant>) defined in net.corda.core.node.services.vault.QueryCriteria.TimeCondition[DeserializedClassConstructorDescriptor]

'RECORDED' @ [1797:75] ==> enum entry RECORDED defined in net.corda.core.node.services.vault.QueryCriteria.TimeInstantType[FakeCallableDescriptorForObject]

'builder' @ [1797:85] ==> public inline fun <A> builder(block: Builder.() -> ColumnPredicate.Between<(Instant..Instant?)>): ColumnPredicate.Between<(Instant..Instant?)> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> Between<(java.time.Instant..java.time.Instant?)>

'between' @ [1797:95] ==> public final fun <R : Comparable<(Instant..Instant?)>> between(from: (Instant..Instant?), to: (Instant..Instant?)): ColumnPredicate.Between<(Instant..Instant?)> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <R : Comparable<R>> -> (java.time.Instant..java.time.Instant?)

'start' @ [1797:103] ==> val start: (Instant..Instant?) defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId between two timestamps`[LocalVariableDescriptor]

'end' @ [1797:110] ==> val end: (Instant..Instant?) defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId between two timestamps`[LocalVariableDescriptor]

'VaultQueryCriteria' @ [1798:33] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'recordedBetweenExpression' @ [1798:68] ==> val recordedBetweenExpression: QueryCriteria.TimeCondition defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId between two timestamps`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [1800:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1800:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<LinearState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> LinearState

'basicCriteria' @ [1800:62] ==> val basicCriteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId between two timestamps`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1802:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<LinearState>..StateAndRef<LinearState>?)>..List<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<LinearState>

'results' @ [1802:24] ==> val results: Vault.Page<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId between two timestamps`.<anonymous>[LocalVariableDescriptor]

'states' @ [1802:32] ==> public final val states: List<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1802:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1807:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1809:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1809:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<LinearState>): Vault<LinearState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<LinearState>

'services' @ [1810:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1810:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [1811:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1811:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'database' @ [1813:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1813:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>?)

'builder' @ [1815:39] ==> public inline fun <A> builder(block: Builder.() -> CriteriaExpression.ColumnPredicateExpression<VaultSchemaV1.VaultLinearStates, String?>): CriteriaExpression.ColumnPredicateExpression<VaultSchemaV1.VaultLinearStates, String?> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> ColumnPredicateExpression<VaultLinearStates, String?>

'VaultSchemaV1' @ [1815:49] ==> @CordaSerializable public object VaultSchemaV1 : MappedSchema defined in net.corda.node.services.vault[FakeCallableDescriptorForObject]

'VaultLinearStates' @ [1815:63] ==> public constructor VaultLinearStates(uid: UniqueIdentifier, _participants: List<AbstractParty>) defined in net.corda.node.services.vault.VaultSchemaV1.VaultLinearStates[DeserializedClassConstructorDescriptor]

'externalId' @ [1815:82] ==> @field:Column public final var externalId: String? defined in net.corda.node.services.vault.VaultSchemaV1.VaultLinearStates[DeserializedPropertyDescriptor]

'equal' @ [1815:93] ==> public final fun <O, R> KProperty1<VaultSchemaV1.VaultLinearStates, String?>.equal(value: String): CriteriaExpression.ColumnPredicateExpression<VaultSchemaV1.VaultLinearStates, String?> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> VaultLinearStates
    <R> -> String

'VaultCustomQueryCriteria' @ [1816:44] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<VaultSchemaV1.VaultLinearStates, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> VaultLinearStates

'externalIdCondition' @ [1816:69] ==> val externalIdCondition: CriteriaExpression.ColumnPredicateExpression<VaultSchemaV1.VaultLinearStates, String?> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for a given external id`.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [1818:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1818:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<LinearState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> LinearState

'externalIdCustomCriteria' @ [1818:62] ==> val externalIdCustomCriteria: QueryCriteria.VaultCustomQueryCriteria<VaultSchemaV1.VaultLinearStates> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for a given external id`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1820:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<LinearState>..StateAndRef<LinearState>?)>..List<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<LinearState>

'results' @ [1820:24] ==> val results: Vault.Page<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for a given external id`.<anonymous>[LocalVariableDescriptor]

'states' @ [1820:32] ==> public final val states: List<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1820:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1825:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'now' @ [1827:29] ==> public open fun now(): (Instant..Instant?) defined in java.time.Instant[JavaMethodDescriptor]

'start' @ [1828:19] ==> val start: (Instant..Instant?) defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId between two timestamps for a given external id`[LocalVariableDescriptor]

'plus' @ [1828:25] ==> public open fun plus(p0: Long, p1: (TemporalUnit..TemporalUnit?)): (Instant..Instant?) defined in java.time.Instant[JavaMethodDescriptor]

'SECONDS' @ [1828:44] ==> enum entry SECONDS defined in java.time.temporal.ChronoUnit[FakeCallableDescriptorForObject]

'database' @ [1830:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1830:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<LinearState>): Vault<LinearState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<LinearState>

'services' @ [1831:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1831:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [1832:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1832:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'sleep' @ [1833:13] ==> public open fun sleep(p0: Long): Unit defined in java.lang.Thread[JavaMethodDescriptor]

'services' @ [1834:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1834:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'database' @ [1836:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1836:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>?)

'builder' @ [1839:27] ==> public inline fun <A> builder(block: Builder.() -> Vault.Page<LinearState>): Vault.Page<LinearState> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> Page<LinearState>

'VaultSchemaV1' @ [1840:41] ==> @CordaSerializable public object VaultSchemaV1 : MappedSchema defined in net.corda.node.services.vault[FakeCallableDescriptorForObject]

'VaultLinearStates' @ [1840:55] ==> public constructor VaultLinearStates(uid: UniqueIdentifier, _participants: List<AbstractParty>) defined in net.corda.node.services.vault.VaultSchemaV1.VaultLinearStates[DeserializedClassConstructorDescriptor]

'externalId' @ [1840:74] ==> @field:Column public final var externalId: String? defined in net.corda.node.services.vault.VaultSchemaV1.VaultLinearStates[DeserializedPropertyDescriptor]

'equal' @ [1840:85] ==> public final fun <O, R> KProperty1<VaultSchemaV1.VaultLinearStates, String?>.equal(value: String): CriteriaExpression.ColumnPredicateExpression<VaultSchemaV1.VaultLinearStates, String?> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> VaultLinearStates
    <R> -> String

'VaultCustomQueryCriteria' @ [1841:38] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<VaultSchemaV1.VaultLinearStates, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> VaultLinearStates

'linearIdCondition' @ [1841:63] ==> val linearIdCondition: CriteriaExpression.ColumnPredicateExpression<VaultSchemaV1.VaultLinearStates, String?> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId between two timestamps for a given external id`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'TimeCondition' @ [1843:49] ==> public constructor TimeCondition(type: QueryCriteria.TimeInstantType, predicate: ColumnPredicate<Instant>) defined in net.corda.core.node.services.vault.QueryCriteria.TimeCondition[DeserializedClassConstructorDescriptor]

'RECORDED' @ [1843:79] ==> enum entry RECORDED defined in net.corda.core.node.services.vault.QueryCriteria.TimeInstantType[FakeCallableDescriptorForObject]

'between' @ [1843:89] ==> public final fun <R : Comparable<(Instant..Instant?)>> between(from: (Instant..Instant?), to: (Instant..Instant?)): ColumnPredicate.Between<(Instant..Instant?)> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <R : Comparable<R>> -> (java.time.Instant..java.time.Instant?)

'start' @ [1843:97] ==> val start: (Instant..Instant?) defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId between two timestamps for a given external id`[LocalVariableDescriptor]

'end' @ [1843:104] ==> val end: (Instant..Instant?) defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId between two timestamps for a given external id`[LocalVariableDescriptor]

'VaultQueryCriteria' @ [1844:37] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'recordedBetweenExpression' @ [1844:72] ==> val recordedBetweenExpression: QueryCriteria.TimeCondition defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId between two timestamps for a given external id`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'basicCriteria' @ [1846:32] ==> val basicCriteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId between two timestamps for a given external id`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'and' @ [1846:46] ==> public final fun and(criteria: QueryCriteria): QueryCriteria defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedSimpleFunctionDescriptor]

'customCriteria' @ [1846:50] ==> val customCriteria: QueryCriteria.VaultCustomQueryCriteria<VaultSchemaV1.VaultLinearStates> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId between two timestamps for a given external id`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [1847:17] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1847:31] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<LinearState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> LinearState

'criteria' @ [1847:52] ==> val criteria: QueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId between two timestamps for a given external id`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1850:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<LinearState>..StateAndRef<LinearState>?)>..List<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<LinearState>

'results' @ [1850:24] ==> val results: Vault.Page<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for linearId between two timestamps for a given external id`.<anonymous>[LocalVariableDescriptor]

'states' @ [1850:32] ==> public final val states: List<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1850:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1855:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1858:13] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1858:22] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> UUID): UUID defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> UUID

'services' @ [1859:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1859:26] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [1860:30] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1860:39] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'states' @ [1860:80] ==> public final val states: Iterable<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'services' @ [1861:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeLinearStates' @ [1861:26] ==> public fun ServiceHub.consumeLinearStates(linearStates: List<StateAndRef<LinearState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'aState' @ [1861:46] ==> val aState: Iterable<StateAndRef<LinearState>> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for a given external id or uuid`.<anonymous>[LocalVariableDescriptor]

'toList' @ [1861:53] ==> public fun <T> Iterable<StateAndRef<LinearState>>.toList(): List<StateAndRef<LinearState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>

'DUMMY_NOTARY' @ [1861:63] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [1862:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1862:26] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'states' @ [1862:67] ==> public final val states: Iterable<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'first' @ [1862:74] ==> public fun <T> Iterable<StateAndRef<LinearState>>.first(): StateAndRef<LinearState> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>

'state' @ [1862:82] ==> public final val state: TransactionState<LinearState> defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'data' @ [1862:88] ==> public final val data: LinearState defined in net.corda.core.contracts.TransactionState[DeserializedPropertyDescriptor]

'linearId' @ [1862:93] ==> public abstract val linearId: UniqueIdentifier defined in net.corda.core.contracts.LinearState[DeserializedPropertyDescriptor]

'id' @ [1862:102] ==> public final val id: UUID defined in net.corda.core.contracts.UniqueIdentifier[DeserializedPropertyDescriptor]

'database' @ [1866:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1866:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>?)

'builder' @ [1867:27] ==> public inline fun <A> builder(block: Builder.() -> Vault.Page<LinearState>): Vault.Page<LinearState> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> Page<LinearState>

'VaultSchemaV1' @ [1868:43] ==> @CordaSerializable public object VaultSchemaV1 : MappedSchema defined in net.corda.node.services.vault[FakeCallableDescriptorForObject]

'VaultLinearStates' @ [1868:57] ==> public constructor VaultLinearStates(uid: UniqueIdentifier, _participants: List<AbstractParty>) defined in net.corda.node.services.vault.VaultSchemaV1.VaultLinearStates[DeserializedClassConstructorDescriptor]

'externalId' @ [1868:76] ==> @field:Column public final var externalId: String? defined in net.corda.node.services.vault.VaultSchemaV1.VaultLinearStates[DeserializedPropertyDescriptor]

'equal' @ [1868:87] ==> public final fun <O, R> KProperty1<VaultSchemaV1.VaultLinearStates, String?>.equal(value: String): CriteriaExpression.ColumnPredicateExpression<VaultSchemaV1.VaultLinearStates, String?> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> VaultLinearStates
    <R> -> String

'VaultCustomQueryCriteria' @ [1869:48] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<VaultSchemaV1.VaultLinearStates, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> VaultLinearStates

'externalIdCondition' @ [1869:73] ==> val externalIdCondition: CriteriaExpression.ColumnPredicateExpression<VaultSchemaV1.VaultLinearStates, String?> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for a given external id or uuid`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'VaultSchemaV1' @ [1871:37] ==> @CordaSerializable public object VaultSchemaV1 : MappedSchema defined in net.corda.node.services.vault[FakeCallableDescriptorForObject]

'VaultLinearStates' @ [1871:51] ==> public constructor VaultLinearStates(uid: UniqueIdentifier, _participants: List<AbstractParty>) defined in net.corda.node.services.vault.VaultSchemaV1.VaultLinearStates[DeserializedClassConstructorDescriptor]

'uuid' @ [1871:70] ==> @field:Column public final var uuid: UUID defined in net.corda.node.services.vault.VaultSchemaV1.VaultLinearStates[DeserializedPropertyDescriptor]

'equal' @ [1871:75] ==> public final fun <O, R> KProperty1<VaultSchemaV1.VaultLinearStates, UUID?>.equal(value: UUID): CriteriaExpression.ColumnPredicateExpression<VaultSchemaV1.VaultLinearStates, UUID?> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> VaultLinearStates
    <R> -> UUID

'uuid' @ [1871:81] ==> val uuid: UUID defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for a given external id or uuid`[LocalVariableDescriptor]

'VaultCustomQueryCriteria' @ [1872:42] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<VaultSchemaV1.VaultLinearStates, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> VaultLinearStates

'uuidCondition' @ [1872:67] ==> val uuidCondition: CriteriaExpression.ColumnPredicateExpression<VaultSchemaV1.VaultLinearStates, UUID?> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for a given external id or uuid`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'externalIdCustomCriteria' @ [1874:32] ==> val externalIdCustomCriteria: QueryCriteria.VaultCustomQueryCriteria<VaultSchemaV1.VaultLinearStates> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for a given external id or uuid`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'uuidCustomCriteria' @ [1874:60] ==> val uuidCustomCriteria: QueryCriteria.VaultCustomQueryCriteria<VaultSchemaV1.VaultLinearStates> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for a given external id or uuid`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [1875:17] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1875:31] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<LinearState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> LinearState

'criteria' @ [1875:52] ==> val criteria: QueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for a given external id or uuid`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1877:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (Vault.StateMetadata..Vault.StateMetadata?)>..List<(Vault.StateMetadata..Vault.StateMetadata?)>?)): (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateMetadata

'results' @ [1877:24] ==> val results: Vault.Page<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for a given external id or uuid`.<anonymous>[LocalVariableDescriptor]

'statesMetadata' @ [1877:32] ==> public final val statesMetadata: List<Vault.StateMetadata> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1877:48] ==> public open fun hasSize(p0: Int): (ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>..ListAssert<(Vault.StateMetadata..Vault.StateMetadata?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [1878:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<LinearState>..StateAndRef<LinearState>?)>..List<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<LinearState>

'results' @ [1878:24] ==> val results: Vault.Page<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for a given external id or uuid`.<anonymous>[LocalVariableDescriptor]

'states' @ [1878:32] ==> public final val states: List<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1878:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1882:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1884:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1884:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<LinearState>): Vault<LinearState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<LinearState>

'identitySvc' @ [1885:13] ==> public final val identitySvc: IdentityService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'verifyAndRegisterIdentity' @ [1885:25] ==> public abstract fun verifyAndRegisterIdentity(identity: PartyAndCertificate): PartyAndCertificate? defined in net.corda.core.node.services.IdentityService[DeserializedSimpleFunctionDescriptor]

'ALICE_IDENTITY' @ [1885:51] ==> public val ALICE_IDENTITY: PartyAndCertificate defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [1886:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1886:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [1886:63] ==> public fun <T> listOf(element: Party): List<Party> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Party

'ALICE' @ [1886:70] ==> public val ALICE: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [1887:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1887:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [1888:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1888:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'database' @ [1890:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1890:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>?), (String..String?)>?), (String..String?)>): AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>?), (String..String?)>?), (String..String?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>

'LinearStateQueryCriteria' @ [1891:39] ==> @JvmOverloads public constructor LinearStateQueryCriteria(participants: List<AbstractParty>? = ..., uuid: List<UUID>? = ..., externalId: List<String>? = ..., status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria[DeserializedClassConstructorDescriptor]

'listOf' @ [1891:79] ==> public fun <T> listOf(element: Party): List<Party> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Party

'ALICE' @ [1891:86] ==> public val ALICE: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'vaultQuerySvc' @ [1892:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1892:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<LinearState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> LinearState

'linearStateCriteria' @ [1892:62] ==> val linearStateCriteria: QueryCriteria.LinearStateQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for single participant`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1894:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<LinearState>..StateAndRef<LinearState>?)>..List<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<LinearState>

'results' @ [1894:24] ==> val results: Vault.Page<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for single participant`.<anonymous>[LocalVariableDescriptor]

'states' @ [1894:32] ==> public final val states: List<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1894:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [1895:13] ==> @CheckReturnValue public open fun assertThat(p0: (String..String?)): (AbstractCharSequenceAssert<*, (String..String?)>..AbstractCharSequenceAssert<*, (String..String?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'results' @ [1895:24] ==> val results: Vault.Page<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for single participant`.<anonymous>[LocalVariableDescriptor]

'states' @ [1895:32] ==> public final val states: List<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'state' @ [1895:42] ==> public final val state: TransactionState<LinearState> defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'data' @ [1895:48] ==> public final val data: LinearState defined in net.corda.core.contracts.TransactionState[DeserializedPropertyDescriptor]

'linearId' @ [1895:53] ==> public abstract val linearId: UniqueIdentifier defined in net.corda.core.contracts.LinearState[DeserializedPropertyDescriptor]

'externalId' @ [1895:62] ==> public final val externalId: String? defined in net.corda.core.contracts.UniqueIdentifier[DeserializedPropertyDescriptor]

'isEqualTo' @ [1895:74] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>?), (String..String?)>?) defined in org.assertj.core.api.AbstractCharSequenceAssert[JavaMethodDescriptor]

'Test' @ [1899:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1901:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1901:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<LinearState>): Vault<LinearState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<LinearState>

'identitySvc' @ [1902:13] ==> public final val identitySvc: IdentityService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'verifyAndRegisterIdentity' @ [1902:25] ==> public abstract fun verifyAndRegisterIdentity(identity: PartyAndCertificate): PartyAndCertificate? defined in net.corda.core.node.services.IdentityService[DeserializedSimpleFunctionDescriptor]

'ALICE_IDENTITY' @ [1902:51] ==> public val ALICE_IDENTITY: PartyAndCertificate defined in net.corda.testing[DeserializedPropertyDescriptor]

'identitySvc' @ [1903:13] ==> public final val identitySvc: IdentityService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'verifyAndRegisterIdentity' @ [1903:25] ==> public abstract fun verifyAndRegisterIdentity(identity: PartyAndCertificate): PartyAndCertificate? defined in net.corda.core.node.services.IdentityService[DeserializedSimpleFunctionDescriptor]

'BOB_IDENTITY' @ [1903:51] ==> public val BOB_IDENTITY: PartyAndCertificate defined in net.corda.testing[DeserializedPropertyDescriptor]

'identitySvc' @ [1904:13] ==> public final val identitySvc: IdentityService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'verifyAndRegisterIdentity' @ [1904:25] ==> public abstract fun verifyAndRegisterIdentity(identity: PartyAndCertificate): PartyAndCertificate? defined in net.corda.core.node.services.IdentityService[DeserializedSimpleFunctionDescriptor]

'CHARLIE_IDENTITY' @ [1904:51] ==> public val CHARLIE_IDENTITY: PartyAndCertificate defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [1906:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1906:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [1906:63] ==> public fun <T> listOf(vararg elements: Party): List<Party> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Party

'ALICE' @ [1906:70] ==> public val ALICE: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'BOB' @ [1906:76] ==> public val BOB: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'CHARLIE' @ [1906:80] ==> public val CHARLIE: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [1907:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1907:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [1908:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1908:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'database' @ [1910:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1910:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>?), (String..String?)>?), (String..String?)>): AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>?), (String..String?)>?), (String..String?)> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>..org.assertj.core.api.AbstractCharSequenceAssert<out (org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>..org.assertj.core.api.AbstractCharSequenceAssert<out kotlin.Any?, out kotlin.Any?>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>?), (kotlin.String..kotlin.String?)>

'LinearStateQueryCriteria' @ [1911:39] ==> @JvmOverloads public constructor LinearStateQueryCriteria(participants: List<AbstractParty>? = ..., uuid: List<UUID>? = ..., externalId: List<String>? = ..., status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria[DeserializedClassConstructorDescriptor]

'listOf' @ [1911:79] ==> public fun <T> listOf(vararg elements: Party): List<Party> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Party

'ALICE' @ [1911:86] ==> public val ALICE: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'BOB' @ [1911:92] ==> public val BOB: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'CHARLIE' @ [1911:96] ==> public val CHARLIE: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'vaultQuerySvc' @ [1912:27] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1912:41] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<LinearState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> LinearState

'linearStateCriteria' @ [1912:62] ==> val linearStateCriteria: QueryCriteria.LinearStateQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for multiple participants`.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1914:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<LinearState>..StateAndRef<LinearState>?)>..List<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<LinearState>

'results' @ [1914:24] ==> val results: Vault.Page<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for multiple participants`.<anonymous>[LocalVariableDescriptor]

'states' @ [1914:32] ==> public final val states: List<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1914:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'assertThat' @ [1915:13] ==> @CheckReturnValue public open fun assertThat(p0: (String..String?)): (AbstractCharSequenceAssert<*, (String..String?)>..AbstractCharSequenceAssert<*, (String..String?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'results' @ [1915:24] ==> val results: Vault.Page<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads for multiple participants`.<anonymous>[LocalVariableDescriptor]

'states' @ [1915:32] ==> public final val states: List<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'state' @ [1915:42] ==> public final val state: TransactionState<LinearState> defined in net.corda.core.contracts.StateAndRef[DeserializedPropertyDescriptor]

'data' @ [1915:48] ==> public final val data: LinearState defined in net.corda.core.contracts.TransactionState[DeserializedPropertyDescriptor]

'linearId' @ [1915:53] ==> public abstract val linearId: UniqueIdentifier defined in net.corda.core.contracts.LinearState[DeserializedPropertyDescriptor]

'externalId' @ [1915:62] ==> public final val externalId: String? defined in net.corda.core.contracts.UniqueIdentifier[DeserializedPropertyDescriptor]

'isEqualTo' @ [1915:74] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>..AbstractCharSequenceAssert<out (AbstractCharSequenceAssert<out Any?, out Any?>..AbstractCharSequenceAssert<out Any?, out Any?>?), (String..String?)>?), (String..String?)>?), (String..String?)>?), (String..String?)>?) defined in org.assertj.core.api.AbstractCharSequenceAssert[JavaMethodDescriptor]

'Test' @ [1919:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1921:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1921:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<LinearState>): Vault<LinearState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<LinearState>

'services' @ [1922:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1922:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [1923:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1923:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [1924:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1924:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'database' @ [1928:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1928:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>?)

'builder' @ [1929:27] ==> public inline fun <A> builder(block: Builder.() -> Vault.Page<LinearState>): Vault.Page<LinearState> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> Page<LinearState>

'VaultSchemaV1' @ [1930:43] ==> @CordaSerializable public object VaultSchemaV1 : MappedSchema defined in net.corda.node.services.vault[FakeCallableDescriptorForObject]

'VaultLinearStates' @ [1930:57] ==> public constructor VaultLinearStates(uid: UniqueIdentifier, _participants: List<AbstractParty>) defined in net.corda.node.services.vault.VaultSchemaV1.VaultLinearStates[DeserializedClassConstructorDescriptor]

'externalId' @ [1930:76] ==> @field:Column public final var externalId: String? defined in net.corda.node.services.vault.VaultSchemaV1.VaultLinearStates[DeserializedPropertyDescriptor]

'isNull' @ [1930:87] ==> public final fun <O, R> KProperty1<VaultSchemaV1.VaultLinearStates, String?>.isNull(): CriteriaExpression.ColumnPredicateExpression<VaultSchemaV1.VaultLinearStates, String> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> VaultLinearStates
    <R> -> String

'VaultCustomQueryCriteria' @ [1931:48] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<VaultSchemaV1.VaultLinearStates, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> VaultLinearStates

'externalIdCondition' @ [1931:73] ==> val externalIdCondition: CriteriaExpression.ColumnPredicateExpression<VaultSchemaV1.VaultLinearStates, String> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads where external id is null`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [1933:17] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1933:31] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<LinearState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> LinearState

'externalIdCustomCriteria' @ [1933:52] ==> val externalIdCustomCriteria: QueryCriteria.VaultCustomQueryCriteria<VaultSchemaV1.VaultLinearStates> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads where external id is null`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1935:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<LinearState>..StateAndRef<LinearState>?)>..List<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<LinearState>

'results' @ [1935:24] ==> val results: Vault.Page<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads where external id is null`.<anonymous>[LocalVariableDescriptor]

'states' @ [1935:32] ==> public final val states: List<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1935:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1939:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1941:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1941:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<LinearState>): Vault<LinearState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<LinearState>

'services' @ [1942:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1942:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [1943:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1943:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [1944:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1944:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'database' @ [1948:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1948:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.LinearState>?)>?)

'builder' @ [1949:27] ==> public inline fun <A> builder(block: Builder.() -> Vault.Page<LinearState>): Vault.Page<LinearState> defined in net.corda.core.node.services.vault[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <A> -> Page<LinearState>

'VaultSchemaV1' @ [1950:43] ==> @CordaSerializable public object VaultSchemaV1 : MappedSchema defined in net.corda.node.services.vault[FakeCallableDescriptorForObject]

'VaultLinearStates' @ [1950:57] ==> public constructor VaultLinearStates(uid: UniqueIdentifier, _participants: List<AbstractParty>) defined in net.corda.node.services.vault.VaultSchemaV1.VaultLinearStates[DeserializedClassConstructorDescriptor]

'externalId' @ [1950:76] ==> @field:Column public final var externalId: String? defined in net.corda.node.services.vault.VaultSchemaV1.VaultLinearStates[DeserializedPropertyDescriptor]

'notNull' @ [1950:87] ==> public final fun <O, R> KProperty1<VaultSchemaV1.VaultLinearStates, String?>.notNull(): CriteriaExpression.ColumnPredicateExpression<VaultSchemaV1.VaultLinearStates, String> defined in net.corda.core.node.services.vault.Builder[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <O> -> VaultLinearStates
    <R> -> String

'VaultCustomQueryCriteria' @ [1951:48] ==> @JvmOverloads public constructor VaultCustomQueryCriteria<L : PersistentState>(expression: CriteriaExpression<VaultSchemaV1.VaultLinearStates, Boolean>, status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria[DeserializedClassConstructorDescriptor]
Inferred types:
    <L : PersistentState> -> VaultLinearStates

'externalIdCondition' @ [1951:73] ==> val externalIdCondition: CriteriaExpression.ColumnPredicateExpression<VaultSchemaV1.VaultLinearStates, String> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads where external id is not null`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'vaultQuerySvc' @ [1953:17] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'queryBy' @ [1953:31] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria): Vault.Page<LinearState> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> LinearState

'externalIdCustomCriteria' @ [1953:52] ==> val externalIdCustomCriteria: QueryCriteria.VaultCustomQueryCriteria<VaultSchemaV1.VaultLinearStates> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads where external id is not null`.<anonymous>.<anonymous>[LocalVariableDescriptor]

'assertThat' @ [1955:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<LinearState>..StateAndRef<LinearState>?)>..List<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<LinearState>

'results' @ [1955:24] ==> val results: Vault.Page<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.`unconsumed linear heads where external id is not null`.<anonymous>[LocalVariableDescriptor]

'states' @ [1955:32] ==> public final val states: List<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [1955:40] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1959:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1961:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1961:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault<DealState>): Vault<DealState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Vault<DealState>

'services' @ [1962:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [1962:22] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [1962:47] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [1962:56] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [1962:72] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [1962:92] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [1963:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCommodity' @ [1963:22] ==> public fun ServiceHub.fillWithSomeTestCommodity(amount: Amount<Commodity>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<CommodityContract.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'Amount' @ [1963:48] ==> public constructor Amount<T : Any>(tokenQuantity: Long, token: Commodity) defined in net.corda.core.contracts.Amount[DeserializedClassConstructorDescriptor]
Inferred types:
    <T : Any> -> Commodity

'Commodity' @ [1963:60] ==> public companion object defined in net.corda.finance.contracts.Commodity[FakeCallableDescriptorForObject]

'getInstance' @ [1963:70] ==> public final fun getInstance(commodityCode: String): Commodity? defined in net.corda.finance.contracts.Commodity.Companion[DeserializedSimpleFunctionDescriptor]

'notaryServices' @ [1963:94] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'services' @ [1964:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [1964:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'services' @ [1965:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [1965:22] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [1965:44] ==> public fun <T> listOf(element: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'database' @ [1968:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1968:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?)): (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?) defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>?)>..org.assertj.core.api.ListAssert<(net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>..net.corda.core.contracts.StateAndRef<net.corda.core.contracts.FungibleAsset<*>>?)>?)

'VaultQueryCriteria' @ [1970:32] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'listOf' @ [1970:60] ==> public fun <T> listOf(element: Party): List<Party> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Party

'DUMMY_NOTARY' @ [1970:67] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Vault' @ [1971:60] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'CONSUMED' @ [1971:78] ==> enum entry CONSUMED defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'VaultQueryCriteria' @ [1974:36] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'setOf' @ [1974:76] ==> public fun <T> setOf(element: Class<DealState>): Set<Class<DealState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Class<DealState>

'java' @ [1974:99] ==> public val <T> KClass<DealState>.java: Class<DealState> defined in kotlin.jvm[DeserializedPropertyDescriptor]
Inferred types:
    <T> -> DealState

'SoftLockingCondition' @ [1975:92] ==> public constructor SoftLockingCondition(type: QueryCriteria.SoftLockingType, lockIds: List<UUID> = ...) defined in net.corda.core.node.services.vault.QueryCriteria.SoftLockingCondition[DeserializedClassConstructorDescriptor]

'UNLOCKED_AND_SPECIFIED' @ [1975:143] ==> enum entry UNLOCKED_AND_SPECIFIED defined in net.corda.core.node.services.vault.QueryCriteria.SoftLockingType[FakeCallableDescriptorForObject]

'listOf' @ [1975:167] ==> public fun <T> listOf(element: (UUID..UUID?)): List<(UUID..UUID?)> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> (java.util.UUID..java.util.UUID?)

'randomUUID' @ [1975:179] ==> public open fun randomUUID(): (UUID..UUID?) defined in java.util.UUID[JavaMethodDescriptor]

'Vault' @ [1976:64] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'UNCONSUMED' @ [1976:82] ==> enum entry UNCONSUMED defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'Standard' @ [1978:47] ==> public constructor Standard(attribute: Sort.Attribute) defined in net.corda.core.node.services.vault.SortAttribute.Standard[DeserializedClassConstructorDescriptor]

'STATE_REF' @ [1978:82] ==> enum entry STATE_REF defined in net.corda.core.node.services.vault.Sort.CommonStateAttribute[FakeCallableDescriptorForObject]

'Sort' @ [1979:26] ==> public constructor Sort(columns: Collection<Sort.SortColumn>) defined in net.corda.core.node.services.vault.Sort[DeserializedClassConstructorDescriptor]

'setOf' @ [1979:31] ==> public fun <T> setOf(element: Sort.SortColumn): Set<Sort.SortColumn> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> SortColumn

'SortColumn' @ [1979:42] ==> public constructor SortColumn(sortAttribute: SortAttribute, direction: Sort.Direction = ...) defined in net.corda.core.node.services.vault.Sort.SortColumn[DeserializedClassConstructorDescriptor]

'sortAttribute' @ [1979:53] ==> val sortAttribute: SortAttribute.Standard defined in net.corda.node.services.vault.VaultQueryTests.`enriched and overridden composite query handles defaults correctly`.<anonymous>[LocalVariableDescriptor]

'ASC' @ [1979:83] ==> enum entry ASC defined in net.corda.core.node.services.vault.Sort.Direction[FakeCallableDescriptorForObject]

'services' @ [1982:27] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'vaultQueryService' @ [1982:36] ==> public open val vaultQueryService: VaultQueryService defined in net.corda.testing.node.MockServices[DeserializedPropertyDescriptor]

'queryBy' @ [1982:54] ==> public inline fun <reified T : ContractState> VaultQueryService.queryBy(criteria: QueryCriteria, sorting: Sort): Vault.Page<FungibleAsset<*>> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> FungibleAsset<*>

'baseCriteria' @ [1982:80] ==> val baseCriteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`enriched and overridden composite query handles defaults correctly`.<anonymous>[LocalVariableDescriptor]

'enrichedCriteria' @ [1982:97] ==> val enrichedCriteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.`enriched and overridden composite query handles defaults correctly`.<anonymous>[LocalVariableDescriptor]

'sorter' @ [1982:115] ==> val sorter: Sort defined in net.corda.node.services.vault.VaultQueryTests.`enriched and overridden composite query handles defaults correctly`.<anonymous>[LocalVariableDescriptor]

'states' @ [1982:123] ==> public final val states: List<StateAndRef<FungibleAsset<*>>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'assertThat' @ [1983:13] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..List<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?)): (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<FungibleAsset<*>>

'results' @ [1983:24] ==> val results: List<StateAndRef<FungibleAsset<*>>> defined in net.corda.node.services.vault.VaultQueryTests.`enriched and overridden composite query handles defaults correctly`.<anonymous>[LocalVariableDescriptor]

'hasSize' @ [1983:33] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>..ListAssert<(StateAndRef<FungibleAsset<*>>..StateAndRef<FungibleAsset<*>>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'Test' @ [1991:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [1994:13] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [1994:22] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Observable<Vault.Update<Cash.State>>): Observable<Vault.Update<Cash.State>> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Observable<Update<State>>

'vaultQuerySvc' @ [1996:17] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'trackBy' @ [1996:31] ==> public inline fun <reified T : ContractState> VaultQueryService.trackBy(): DataFeed<Vault.Page<Cash.State>, Vault.Update<Cash.State>> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'updates' @ [1996:53] ==> public final val updates: Observable<Vault.Update<Cash.State>> defined in net.corda.core.messaging.DataFeed[DeserializedPropertyDescriptor]

'component1' @ [1999:14] ==> public final operator fun component1(): Iterable<StateAndRef<LinearState>> defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor]

'component2' @ [1999:27] ==> public final operator fun component2(): Iterable<StateAndRef<DealState>> defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor]

'database' @ [2000:13] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [2000:22] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Pair<Iterable<StateAndRef<LinearState>>, Iterable<StateAndRef<DealState>>>): Pair<Iterable<StateAndRef<LinearState>>, Iterable<StateAndRef<DealState>>> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Pair<Iterable<StateAndRef<LinearState>>, Iterable<StateAndRef<DealState>>>

'services' @ [2001:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [2001:26] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [2001:51] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [2001:60] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [2001:76] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [2001:96] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [2002:36] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [2002:45] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'states' @ [2002:78] ==> public final val states: Iterable<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'services' @ [2003:34] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [2003:43] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [2003:65] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'states' @ [2003:94] ==> public final val states: Iterable<StateAndRef<DealState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'services' @ [2005:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [2005:26] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [2005:51] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [2005:59] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [2005:75] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [2005:95] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [2007:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [2007:26] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [2007:48] ==> public fun <T> listOf(element: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'Pair' @ [2008:17] ==> public constructor Pair<out A, out B>(first: Iterable<StateAndRef<LinearState>>, second: Iterable<StateAndRef<DealState>>) defined in kotlin.Pair[DeserializedClassConstructorDescriptor]
Inferred types:
    <out A> -> Iterable<StateAndRef<LinearState>>
    <out B> -> Iterable<StateAndRef<DealState>>

'linearStates' @ [2008:22] ==> val linearStates: Iterable<StateAndRef<LinearState>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_unconsumed.<anonymous>[LocalVariableDescriptor]

'dealStates' @ [2008:35] ==> val dealStates: Iterable<StateAndRef<DealState>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_unconsumed.<anonymous>[LocalVariableDescriptor]

'database' @ [2010:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [2010:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Unit): Unit defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Unit

'services' @ [2012:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeCash' @ [2012:22] ==> @JvmOverloads public fun ServiceHub.consumeCash(amount: Amount<Currency>, to: Party = ..., notary: Party): Vault.Update<ContractState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [2012:38] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [2012:56] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [2013:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeDeals' @ [2013:22] ==> public fun ServiceHub.consumeDeals(dealStates: List<StateAndRef<DealState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'dealStates' @ [2013:35] ==> val dealStates: Iterable<StateAndRef<DealState>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_unconsumed[LocalVariableDescriptor]

'toList' @ [2013:46] ==> public fun <T> Iterable<StateAndRef<DealState>>.toList(): List<StateAndRef<DealState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<DealState>

'DUMMY_NOTARY' @ [2013:56] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [2014:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeLinearStates' @ [2014:22] ==> public fun ServiceHub.consumeLinearStates(linearStates: List<StateAndRef<LinearState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'linearStates' @ [2014:42] ==> val linearStates: Iterable<StateAndRef<LinearState>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_unconsumed[LocalVariableDescriptor]

'toList' @ [2014:55] ==> public fun <T> Iterable<StateAndRef<LinearState>>.toList(): List<StateAndRef<LinearState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>

'DUMMY_NOTARY' @ [2014:65] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'updates' @ [2017:9] ==> val updates: Observable<Vault.Update<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_unconsumed[LocalVariableDescriptor]

'expectEvents' @ [2017:17] ==> public fun <E : Any> Observable<Vault.Update<Cash.State>>.expectEvents(isStrict: Boolean = ..., expectCompose: () -> ExpectCompose<Vault.Update<Cash.State>>): Unit defined in net.corda.testing[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <E : Any> -> Update<State>

'sequence' @ [2018:13] ==> public fun <E> sequence(vararg expectations: ExpectCompose<Vault.Update<Cash.State>>): ExpectCompose<Vault.Update<Cash.State>> defined in net.corda.testing[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <E> -> Update<State>

'expect' @ [2019:21] ==> public inline fun <reified E : Any> expect(noinline match: (Vault.Update<Cash.State>) -> Boolean = ..., noinline expectClosure: (Vault.Update<Cash.State>) -> Unit): ExpectCompose<Vault.Update<Cash.State>> defined in net.corda.testing[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified E : Any> -> Update<State>

'component1' @ [2019:31] ==> public final operator fun component1(): Set<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component2' @ [2019:41] ==> public final operator fun component2(): Set<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component3' @ [2019:51] ==> public final operator fun component3(): UUID? defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'require' @ [2020:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'flowId' @ [2020:33] ==> val flowId: UUID? defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_unconsumed.<anonymous>.<anonymous>[LocalVariableDescriptor]

'require' @ [2021:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'consumed' @ [2021:33] ==> val consumed: Set<StateAndRef<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_unconsumed.<anonymous>.<anonymous>[LocalVariableDescriptor]

'isEmpty' @ [2021:42] ==> public abstract fun isEmpty(): Boolean defined in kotlin.collections.Set[DeserializedSimpleFunctionDescriptor]

'require' @ [2022:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'produced' @ [2022:33] ==> val produced: Set<StateAndRef<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_unconsumed.<anonymous>.<anonymous>[LocalVariableDescriptor]

'size' @ [2022:42] ==> public abstract val size: Int defined in kotlin.collections.Set[DeserializedPropertyDescriptor]

'expect' @ [2024:21] ==> public inline fun <reified E : Any> expect(noinline match: (Vault.Update<Cash.State>) -> Boolean = ..., noinline expectClosure: (Vault.Update<Cash.State>) -> Unit): ExpectCompose<Vault.Update<Cash.State>> defined in net.corda.testing[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified E : Any> -> Update<State>

'component1' @ [2024:31] ==> public final operator fun component1(): Set<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component2' @ [2024:41] ==> public final operator fun component2(): Set<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component3' @ [2024:51] ==> public final operator fun component3(): UUID? defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'require' @ [2025:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'flowId' @ [2025:33] ==> val flowId: UUID? defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_unconsumed.<anonymous>.<anonymous>[LocalVariableDescriptor]

'require' @ [2026:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'consumed' @ [2026:33] ==> val consumed: Set<StateAndRef<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_unconsumed.<anonymous>.<anonymous>[LocalVariableDescriptor]

'isEmpty' @ [2026:42] ==> public abstract fun isEmpty(): Boolean defined in kotlin.collections.Set[DeserializedSimpleFunctionDescriptor]

'require' @ [2027:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'produced' @ [2027:33] ==> val produced: Set<StateAndRef<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_unconsumed.<anonymous>.<anonymous>[LocalVariableDescriptor]

'size' @ [2027:42] ==> public abstract val size: Int defined in kotlin.collections.Set[DeserializedPropertyDescriptor]

'Test' @ [2033:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [2036:13] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [2036:22] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Observable<Vault.Update<Cash.State>>): Observable<Vault.Update<Cash.State>> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Observable<Update<State>>

'VaultQueryCriteria' @ [2037:32] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Vault' @ [2037:60] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'CONSUMED' @ [2037:78] ==> enum entry CONSUMED defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [2038:17] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'trackBy' @ [2038:31] ==> public inline fun <reified T : ContractState> VaultQueryService.trackBy(criteria: QueryCriteria): DataFeed<Vault.Page<Cash.State>, Vault.Update<Cash.State>> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'criteria' @ [2038:51] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_consumed.<anonymous>[LocalVariableDescriptor]

'updates' @ [2038:61] ==> public final val updates: Observable<Vault.Update<Cash.State>> defined in net.corda.core.messaging.DataFeed[DeserializedPropertyDescriptor]

'component1' @ [2040:14] ==> public final operator fun component1(): Iterable<StateAndRef<LinearState>> defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor]

'component2' @ [2040:27] ==> public final operator fun component2(): Iterable<StateAndRef<DealState>> defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor]

'database' @ [2041:13] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [2041:22] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Pair<Iterable<StateAndRef<LinearState>>, Iterable<StateAndRef<DealState>>>): Pair<Iterable<StateAndRef<LinearState>>, Iterable<StateAndRef<DealState>>> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Pair<Iterable<StateAndRef<LinearState>>, Iterable<StateAndRef<DealState>>>

'services' @ [2042:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [2042:26] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [2042:51] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [2042:60] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [2042:76] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [2042:96] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [2043:36] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [2043:45] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'states' @ [2043:78] ==> public final val states: Iterable<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'services' @ [2044:34] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [2044:43] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [2044:65] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'states' @ [2044:94] ==> public final val states: Iterable<StateAndRef<DealState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'services' @ [2047:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [2047:26] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [2047:51] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [2047:59] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [2047:75] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [2047:95] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [2049:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [2049:26] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [2049:48] ==> public fun <T> listOf(element: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'Pair' @ [2050:17] ==> public constructor Pair<out A, out B>(first: Iterable<StateAndRef<LinearState>>, second: Iterable<StateAndRef<DealState>>) defined in kotlin.Pair[DeserializedClassConstructorDescriptor]
Inferred types:
    <out A> -> Iterable<StateAndRef<LinearState>>
    <out B> -> Iterable<StateAndRef<DealState>>

'linearStates' @ [2050:22] ==> val linearStates: Iterable<StateAndRef<LinearState>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_consumed.<anonymous>[LocalVariableDescriptor]

'dealStates' @ [2050:35] ==> val dealStates: Iterable<StateAndRef<DealState>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_consumed.<anonymous>[LocalVariableDescriptor]

'database' @ [2052:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [2052:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault.Update<ContractState>): Vault.Update<ContractState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Update<ContractState>

'services' @ [2054:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeCash' @ [2054:22] ==> @JvmOverloads public fun ServiceHub.consumeCash(amount: Amount<Currency>, to: Party = ..., notary: Party): Vault.Update<ContractState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [2054:38] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [2054:55] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'database' @ [2056:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [2056:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Unit): Unit defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Unit

'services' @ [2058:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeCash' @ [2058:22] ==> @JvmOverloads public fun ServiceHub.consumeCash(amount: Amount<Currency>, to: Party = ..., notary: Party): Vault.Update<ContractState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [2058:38] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [2058:56] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [2059:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeDeals' @ [2059:22] ==> public fun ServiceHub.consumeDeals(dealStates: List<StateAndRef<DealState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'dealStates' @ [2059:35] ==> val dealStates: Iterable<StateAndRef<DealState>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_consumed[LocalVariableDescriptor]

'toList' @ [2059:46] ==> public fun <T> Iterable<StateAndRef<DealState>>.toList(): List<StateAndRef<DealState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<DealState>

'DUMMY_NOTARY' @ [2059:56] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [2060:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeLinearStates' @ [2060:22] ==> public fun ServiceHub.consumeLinearStates(linearStates: List<StateAndRef<LinearState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'linearStates' @ [2060:42] ==> val linearStates: Iterable<StateAndRef<LinearState>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_consumed[LocalVariableDescriptor]

'toList' @ [2060:55] ==> public fun <T> Iterable<StateAndRef<LinearState>>.toList(): List<StateAndRef<LinearState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>

'DUMMY_NOTARY' @ [2060:65] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'updates' @ [2063:9] ==> val updates: Observable<Vault.Update<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_consumed[LocalVariableDescriptor]

'expectEvents' @ [2063:17] ==> public fun <E : Any> Observable<Vault.Update<Cash.State>>.expectEvents(isStrict: Boolean = ..., expectCompose: () -> ExpectCompose<Vault.Update<Cash.State>>): Unit defined in net.corda.testing[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <E : Any> -> Update<State>

'sequence' @ [2064:13] ==> public fun <E> sequence(vararg expectations: ExpectCompose<Vault.Update<Cash.State>>): ExpectCompose<Vault.Update<Cash.State>> defined in net.corda.testing[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <E> -> Update<State>

'expect' @ [2065:21] ==> public inline fun <reified E : Any> expect(noinline match: (Vault.Update<Cash.State>) -> Boolean = ..., noinline expectClosure: (Vault.Update<Cash.State>) -> Unit): ExpectCompose<Vault.Update<Cash.State>> defined in net.corda.testing[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified E : Any> -> Update<State>

'component1' @ [2065:31] ==> public final operator fun component1(): Set<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component2' @ [2065:41] ==> public final operator fun component2(): Set<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component3' @ [2065:51] ==> public final operator fun component3(): UUID? defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'require' @ [2066:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'flowId' @ [2066:33] ==> val flowId: UUID? defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_consumed.<anonymous>.<anonymous>[LocalVariableDescriptor]

'require' @ [2067:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'consumed' @ [2067:33] ==> val consumed: Set<StateAndRef<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_consumed.<anonymous>.<anonymous>[LocalVariableDescriptor]

'size' @ [2067:42] ==> public abstract val size: Int defined in kotlin.collections.Set[DeserializedPropertyDescriptor]

'require' @ [2068:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'produced' @ [2068:33] ==> val produced: Set<StateAndRef<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_consumed.<anonymous>.<anonymous>[LocalVariableDescriptor]

'isEmpty' @ [2068:42] ==> public abstract fun isEmpty(): Boolean defined in kotlin.collections.Set[DeserializedSimpleFunctionDescriptor]

'expect' @ [2070:21] ==> public inline fun <reified E : Any> expect(noinline match: (Vault.Update<Cash.State>) -> Boolean = ..., noinline expectClosure: (Vault.Update<Cash.State>) -> Unit): ExpectCompose<Vault.Update<Cash.State>> defined in net.corda.testing[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified E : Any> -> Update<State>

'component1' @ [2070:31] ==> public final operator fun component1(): Set<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component2' @ [2070:41] ==> public final operator fun component2(): Set<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component3' @ [2070:51] ==> public final operator fun component3(): UUID? defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'require' @ [2071:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'flowId' @ [2071:33] ==> val flowId: UUID? defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_consumed.<anonymous>.<anonymous>[LocalVariableDescriptor]

'require' @ [2072:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'consumed' @ [2072:33] ==> val consumed: Set<StateAndRef<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_consumed.<anonymous>.<anonymous>[LocalVariableDescriptor]

'size' @ [2072:42] ==> public abstract val size: Int defined in kotlin.collections.Set[DeserializedPropertyDescriptor]

'require' @ [2073:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'produced' @ [2073:33] ==> val produced: Set<StateAndRef<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_consumed.<anonymous>.<anonymous>[LocalVariableDescriptor]

'isEmpty' @ [2073:42] ==> public abstract fun isEmpty(): Boolean defined in kotlin.collections.Set[DeserializedSimpleFunctionDescriptor]

'Test' @ [2079:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [2082:13] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [2082:22] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Observable<Vault.Update<Cash.State>>): Observable<Vault.Update<Cash.State>> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Observable<Update<State>>

'VaultQueryCriteria' @ [2083:32] ==> @JvmOverloads public constructor VaultQueryCriteria(status: Vault.StateStatus = ..., contractStateTypes: Set<Class<out ContractState>>? = ..., stateRefs: List<StateRef>? = ..., notary: List<AbstractParty>? = ..., softLockingCondition: QueryCriteria.SoftLockingCondition? = ..., timeCondition: QueryCriteria.TimeCondition? = ...) defined in net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria[DeserializedClassConstructorDescriptor]

'Vault' @ [2083:60] ==> public companion object defined in net.corda.core.node.services.Vault[FakeCallableDescriptorForObject]

'ALL' @ [2083:78] ==> enum entry ALL defined in net.corda.core.node.services.Vault.StateStatus[FakeCallableDescriptorForObject]

'vaultQuerySvc' @ [2084:17] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'trackBy' @ [2084:31] ==> public inline fun <reified T : ContractState> VaultQueryService.trackBy(criteria: QueryCriteria): DataFeed<Vault.Page<Cash.State>, Vault.Update<Cash.State>> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> State

'criteria' @ [2084:51] ==> val criteria: QueryCriteria.VaultQueryCriteria defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_all.<anonymous>[LocalVariableDescriptor]

'updates' @ [2084:61] ==> public final val updates: Observable<Vault.Update<Cash.State>> defined in net.corda.core.messaging.DataFeed[DeserializedPropertyDescriptor]

'component1' @ [2086:14] ==> public final operator fun component1(): Iterable<StateAndRef<LinearState>> defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor]

'component2' @ [2086:27] ==> public final operator fun component2(): Iterable<StateAndRef<DealState>> defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor]

'database' @ [2087:13] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [2087:22] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Pair<Iterable<StateAndRef<LinearState>>, Iterable<StateAndRef<DealState>>>): Pair<Iterable<StateAndRef<LinearState>>, Iterable<StateAndRef<DealState>>> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Pair<Iterable<StateAndRef<LinearState>>, Iterable<StateAndRef<DealState>>>

'services' @ [2088:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [2088:26] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [2088:51] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [2088:60] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [2088:76] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [2088:96] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [2089:36] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [2089:45] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'states' @ [2089:78] ==> public final val states: Iterable<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'services' @ [2090:34] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [2090:43] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [2090:65] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'states' @ [2090:94] ==> public final val states: Iterable<StateAndRef<DealState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'services' @ [2092:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [2092:26] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [2092:51] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [2092:59] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [2092:75] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [2092:95] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [2094:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [2094:26] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [2094:48] ==> public fun <T> listOf(element: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'Pair' @ [2095:17] ==> public constructor Pair<out A, out B>(first: Iterable<StateAndRef<LinearState>>, second: Iterable<StateAndRef<DealState>>) defined in kotlin.Pair[DeserializedClassConstructorDescriptor]
Inferred types:
    <out A> -> Iterable<StateAndRef<LinearState>>
    <out B> -> Iterable<StateAndRef<DealState>>

'linearStates' @ [2095:22] ==> val linearStates: Iterable<StateAndRef<LinearState>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_all.<anonymous>[LocalVariableDescriptor]

'dealStates' @ [2095:35] ==> val dealStates: Iterable<StateAndRef<DealState>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_all.<anonymous>[LocalVariableDescriptor]

'database' @ [2097:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [2097:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Vault.Update<ContractState>): Vault.Update<ContractState> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Update<ContractState>

'services' @ [2099:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeCash' @ [2099:22] ==> @JvmOverloads public fun ServiceHub.consumeCash(amount: Amount<Currency>, to: Party = ..., notary: Party): Vault.Update<ContractState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [2099:37] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [2099:54] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'database' @ [2101:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [2101:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Unit): Unit defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Unit

'services' @ [2103:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeCash' @ [2103:22] ==> @JvmOverloads public fun ServiceHub.consumeCash(amount: Amount<Currency>, to: Party = ..., notary: Party): Vault.Update<ContractState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [2103:38] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [2103:56] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [2104:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeDeals' @ [2104:22] ==> public fun ServiceHub.consumeDeals(dealStates: List<StateAndRef<DealState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'dealStates' @ [2104:35] ==> val dealStates: Iterable<StateAndRef<DealState>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_all[LocalVariableDescriptor]

'toList' @ [2104:46] ==> public fun <T> Iterable<StateAndRef<DealState>>.toList(): List<StateAndRef<DealState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<DealState>

'DUMMY_NOTARY' @ [2104:56] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [2105:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeLinearStates' @ [2105:22] ==> public fun ServiceHub.consumeLinearStates(linearStates: List<StateAndRef<LinearState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'linearStates' @ [2105:42] ==> val linearStates: Iterable<StateAndRef<LinearState>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_all[LocalVariableDescriptor]

'toList' @ [2105:55] ==> public fun <T> Iterable<StateAndRef<LinearState>>.toList(): List<StateAndRef<LinearState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>

'DUMMY_NOTARY' @ [2105:65] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'updates' @ [2108:9] ==> val updates: Observable<Vault.Update<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_all[LocalVariableDescriptor]

'expectEvents' @ [2108:17] ==> public fun <E : Any> Observable<Vault.Update<Cash.State>>.expectEvents(isStrict: Boolean = ..., expectCompose: () -> ExpectCompose<Vault.Update<Cash.State>>): Unit defined in net.corda.testing[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <E : Any> -> Update<State>

'sequence' @ [2109:13] ==> public fun <E> sequence(vararg expectations: ExpectCompose<Vault.Update<Cash.State>>): ExpectCompose<Vault.Update<Cash.State>> defined in net.corda.testing[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <E> -> Update<State>

'expect' @ [2110:21] ==> public inline fun <reified E : Any> expect(noinline match: (Vault.Update<Cash.State>) -> Boolean = ..., noinline expectClosure: (Vault.Update<Cash.State>) -> Unit): ExpectCompose<Vault.Update<Cash.State>> defined in net.corda.testing[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified E : Any> -> Update<State>

'component1' @ [2110:31] ==> public final operator fun component1(): Set<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component2' @ [2110:41] ==> public final operator fun component2(): Set<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component3' @ [2110:51] ==> public final operator fun component3(): UUID? defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'require' @ [2111:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'flowId' @ [2111:33] ==> val flowId: UUID? defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_all.<anonymous>.<anonymous>[LocalVariableDescriptor]

'require' @ [2112:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'consumed' @ [2112:33] ==> val consumed: Set<StateAndRef<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_all.<anonymous>.<anonymous>[LocalVariableDescriptor]

'isEmpty' @ [2112:42] ==> public abstract fun isEmpty(): Boolean defined in kotlin.collections.Set[DeserializedSimpleFunctionDescriptor]

'require' @ [2113:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'produced' @ [2113:33] ==> val produced: Set<StateAndRef<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_all.<anonymous>.<anonymous>[LocalVariableDescriptor]

'size' @ [2113:42] ==> public abstract val size: Int defined in kotlin.collections.Set[DeserializedPropertyDescriptor]

'expect' @ [2115:21] ==> public inline fun <reified E : Any> expect(noinline match: (Vault.Update<Cash.State>) -> Boolean = ..., noinline expectClosure: (Vault.Update<Cash.State>) -> Unit): ExpectCompose<Vault.Update<Cash.State>> defined in net.corda.testing[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified E : Any> -> Update<State>

'component1' @ [2115:31] ==> public final operator fun component1(): Set<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component2' @ [2115:41] ==> public final operator fun component2(): Set<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component3' @ [2115:51] ==> public final operator fun component3(): UUID? defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'require' @ [2116:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'flowId' @ [2116:33] ==> val flowId: UUID? defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_all.<anonymous>.<anonymous>[LocalVariableDescriptor]

'require' @ [2117:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'consumed' @ [2117:33] ==> val consumed: Set<StateAndRef<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_all.<anonymous>.<anonymous>[LocalVariableDescriptor]

'isEmpty' @ [2117:42] ==> public abstract fun isEmpty(): Boolean defined in kotlin.collections.Set[DeserializedSimpleFunctionDescriptor]

'require' @ [2118:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'produced' @ [2118:33] ==> val produced: Set<StateAndRef<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_all.<anonymous>.<anonymous>[LocalVariableDescriptor]

'size' @ [2118:42] ==> public abstract val size: Int defined in kotlin.collections.Set[DeserializedPropertyDescriptor]

'expect' @ [2120:21] ==> public inline fun <reified E : Any> expect(noinline match: (Vault.Update<Cash.State>) -> Boolean = ..., noinline expectClosure: (Vault.Update<Cash.State>) -> Unit): ExpectCompose<Vault.Update<Cash.State>> defined in net.corda.testing[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified E : Any> -> Update<State>

'component1' @ [2120:31] ==> public final operator fun component1(): Set<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component2' @ [2120:41] ==> public final operator fun component2(): Set<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component3' @ [2120:51] ==> public final operator fun component3(): UUID? defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'require' @ [2121:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'flowId' @ [2121:33] ==> val flowId: UUID? defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_all.<anonymous>.<anonymous>[LocalVariableDescriptor]

'require' @ [2122:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'consumed' @ [2122:33] ==> val consumed: Set<StateAndRef<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_all.<anonymous>.<anonymous>[LocalVariableDescriptor]

'size' @ [2122:42] ==> public abstract val size: Int defined in kotlin.collections.Set[DeserializedPropertyDescriptor]

'require' @ [2123:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'produced' @ [2123:33] ==> val produced: Set<StateAndRef<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_all.<anonymous>.<anonymous>[LocalVariableDescriptor]

'size' @ [2123:42] ==> public abstract val size: Int defined in kotlin.collections.Set[DeserializedPropertyDescriptor]

'expect' @ [2125:21] ==> public inline fun <reified E : Any> expect(noinline match: (Vault.Update<Cash.State>) -> Boolean = ..., noinline expectClosure: (Vault.Update<Cash.State>) -> Unit): ExpectCompose<Vault.Update<Cash.State>> defined in net.corda.testing[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified E : Any> -> Update<State>

'component1' @ [2125:31] ==> public final operator fun component1(): Set<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component2' @ [2125:41] ==> public final operator fun component2(): Set<StateAndRef<Cash.State>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component3' @ [2125:51] ==> public final operator fun component3(): UUID? defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'require' @ [2126:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'flowId' @ [2126:33] ==> val flowId: UUID? defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_all.<anonymous>.<anonymous>[LocalVariableDescriptor]

'require' @ [2127:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'consumed' @ [2127:33] ==> val consumed: Set<StateAndRef<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_all.<anonymous>.<anonymous>[LocalVariableDescriptor]

'size' @ [2127:42] ==> public abstract val size: Int defined in kotlin.collections.Set[DeserializedPropertyDescriptor]

'require' @ [2128:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'produced' @ [2128:33] ==> val produced: Set<StateAndRef<Cash.State>> defined in net.corda.node.services.vault.VaultQueryTests.trackCashStates_all.<anonymous>.<anonymous>[LocalVariableDescriptor]

'isEmpty' @ [2128:42] ==> public abstract fun isEmpty(): Boolean defined in kotlin.collections.Set[DeserializedSimpleFunctionDescriptor]

'Test' @ [2134:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [2137:13] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [2137:22] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Observable<Vault.Update<LinearState>>): Observable<Vault.Update<LinearState>> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Observable<Update<LinearState>>

'component1' @ [2139:22] ==> public final operator fun component1(): Vault.Page<LinearState> defined in net.corda.core.messaging.DataFeed[DeserializedSimpleFunctionDescriptor]

'component2' @ [2139:32] ==> public final operator fun component2(): Observable<Vault.Update<LinearState>> defined in net.corda.core.messaging.DataFeed[DeserializedSimpleFunctionDescriptor]

'vaultQuerySvc' @ [2139:44] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'trackBy' @ [2139:58] ==> public inline fun <reified T : ContractState> VaultQueryService.trackBy(): DataFeed<Vault.Page<LinearState>, Vault.Update<LinearState>> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> LinearState

'assertThat' @ [2141:17] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<LinearState>..StateAndRef<LinearState>?)>..List<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?)): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<LinearState>

'snapshot' @ [2141:28] ==> val snapshot: Vault.Page<LinearState> defined in net.corda.node.services.vault.VaultQueryTests.trackLinearStates.<anonymous>[LocalVariableDescriptor]

'states' @ [2141:37] ==> public final val states: List<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [2141:45] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>..ListAssert<(StateAndRef<LinearState>..StateAndRef<LinearState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'updates' @ [2142:17] ==> val updates: Observable<Vault.Update<LinearState>> defined in net.corda.node.services.vault.VaultQueryTests.trackLinearStates.<anonymous>[LocalVariableDescriptor]

'component1' @ [2144:14] ==> public final operator fun component1(): Iterable<StateAndRef<LinearState>> defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor]

'component2' @ [2144:27] ==> public final operator fun component2(): Iterable<StateAndRef<DealState>> defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor]

'database' @ [2145:13] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [2145:22] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Pair<Iterable<StateAndRef<LinearState>>, Iterable<StateAndRef<DealState>>>): Pair<Iterable<StateAndRef<LinearState>>, Iterable<StateAndRef<DealState>>> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Pair<Iterable<StateAndRef<LinearState>>, Iterable<StateAndRef<DealState>>>

'services' @ [2146:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [2146:26] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [2146:51] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [2146:60] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [2146:76] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [2146:96] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [2147:36] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [2147:45] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'states' @ [2147:78] ==> public final val states: Iterable<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'services' @ [2148:34] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [2148:43] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [2148:65] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'states' @ [2148:94] ==> public final val states: Iterable<StateAndRef<DealState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'services' @ [2150:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [2150:26] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [2150:51] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [2150:59] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [2150:75] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [2150:95] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [2152:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [2152:26] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [2152:48] ==> public fun <T> listOf(element: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'Pair' @ [2153:17] ==> public constructor Pair<out A, out B>(first: Iterable<StateAndRef<LinearState>>, second: Iterable<StateAndRef<DealState>>) defined in kotlin.Pair[DeserializedClassConstructorDescriptor]
Inferred types:
    <out A> -> Iterable<StateAndRef<LinearState>>
    <out B> -> Iterable<StateAndRef<DealState>>

'linearStates' @ [2153:22] ==> val linearStates: Iterable<StateAndRef<LinearState>> defined in net.corda.node.services.vault.VaultQueryTests.trackLinearStates.<anonymous>[LocalVariableDescriptor]

'dealStates' @ [2153:35] ==> val dealStates: Iterable<StateAndRef<DealState>> defined in net.corda.node.services.vault.VaultQueryTests.trackLinearStates.<anonymous>[LocalVariableDescriptor]

'database' @ [2155:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [2155:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Unit): Unit defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Unit

'services' @ [2157:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeCash' @ [2157:22] ==> @JvmOverloads public fun ServiceHub.consumeCash(amount: Amount<Currency>, to: Party = ..., notary: Party): Vault.Update<ContractState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [2157:38] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [2157:56] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [2158:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeDeals' @ [2158:22] ==> public fun ServiceHub.consumeDeals(dealStates: List<StateAndRef<DealState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'dealStates' @ [2158:35] ==> val dealStates: Iterable<StateAndRef<DealState>> defined in net.corda.node.services.vault.VaultQueryTests.trackLinearStates[LocalVariableDescriptor]

'toList' @ [2158:46] ==> public fun <T> Iterable<StateAndRef<DealState>>.toList(): List<StateAndRef<DealState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<DealState>

'DUMMY_NOTARY' @ [2158:56] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [2159:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeLinearStates' @ [2159:22] ==> public fun ServiceHub.consumeLinearStates(linearStates: List<StateAndRef<LinearState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'linearStates' @ [2159:42] ==> val linearStates: Iterable<StateAndRef<LinearState>> defined in net.corda.node.services.vault.VaultQueryTests.trackLinearStates[LocalVariableDescriptor]

'toList' @ [2159:55] ==> public fun <T> Iterable<StateAndRef<LinearState>>.toList(): List<StateAndRef<LinearState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>

'DUMMY_NOTARY' @ [2159:65] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'updates' @ [2162:9] ==> val updates: Observable<Vault.Update<LinearState>> defined in net.corda.node.services.vault.VaultQueryTests.trackLinearStates[LocalVariableDescriptor]

'expectEvents' @ [2162:17] ==> public fun <E : Any> Observable<Vault.Update<LinearState>>.expectEvents(isStrict: Boolean = ..., expectCompose: () -> ExpectCompose<Vault.Update<LinearState>>): Unit defined in net.corda.testing[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <E : Any> -> Update<LinearState>

'sequence' @ [2163:13] ==> public fun <E> sequence(vararg expectations: ExpectCompose<Vault.Update<LinearState>>): ExpectCompose<Vault.Update<LinearState>> defined in net.corda.testing[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <E> -> Update<LinearState>

'expect' @ [2164:21] ==> public inline fun <reified E : Any> expect(noinline match: (Vault.Update<LinearState>) -> Boolean = ..., noinline expectClosure: (Vault.Update<LinearState>) -> Unit): ExpectCompose<Vault.Update<LinearState>> defined in net.corda.testing[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified E : Any> -> Update<LinearState>

'component1' @ [2164:31] ==> public final operator fun component1(): Set<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component2' @ [2164:41] ==> public final operator fun component2(): Set<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component3' @ [2164:51] ==> public final operator fun component3(): UUID? defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'require' @ [2165:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'flowId' @ [2165:33] ==> val flowId: UUID? defined in net.corda.node.services.vault.VaultQueryTests.trackLinearStates.<anonymous>.<anonymous>[LocalVariableDescriptor]

'require' @ [2166:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'consumed' @ [2166:33] ==> val consumed: Set<StateAndRef<LinearState>> defined in net.corda.node.services.vault.VaultQueryTests.trackLinearStates.<anonymous>.<anonymous>[LocalVariableDescriptor]

'isEmpty' @ [2166:42] ==> public abstract fun isEmpty(): Boolean defined in kotlin.collections.Set[DeserializedSimpleFunctionDescriptor]

'require' @ [2167:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'produced' @ [2167:33] ==> val produced: Set<StateAndRef<LinearState>> defined in net.corda.node.services.vault.VaultQueryTests.trackLinearStates.<anonymous>.<anonymous>[LocalVariableDescriptor]

'size' @ [2167:42] ==> public abstract val size: Int defined in kotlin.collections.Set[DeserializedPropertyDescriptor]

'expect' @ [2169:21] ==> public inline fun <reified E : Any> expect(noinline match: (Vault.Update<LinearState>) -> Boolean = ..., noinline expectClosure: (Vault.Update<LinearState>) -> Unit): ExpectCompose<Vault.Update<LinearState>> defined in net.corda.testing[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified E : Any> -> Update<LinearState>

'component1' @ [2169:31] ==> public final operator fun component1(): Set<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component2' @ [2169:41] ==> public final operator fun component2(): Set<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component3' @ [2169:51] ==> public final operator fun component3(): UUID? defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'require' @ [2170:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'flowId' @ [2170:33] ==> val flowId: UUID? defined in net.corda.node.services.vault.VaultQueryTests.trackLinearStates.<anonymous>.<anonymous>[LocalVariableDescriptor]

'require' @ [2171:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'consumed' @ [2171:33] ==> val consumed: Set<StateAndRef<LinearState>> defined in net.corda.node.services.vault.VaultQueryTests.trackLinearStates.<anonymous>.<anonymous>[LocalVariableDescriptor]

'isEmpty' @ [2171:42] ==> public abstract fun isEmpty(): Boolean defined in kotlin.collections.Set[DeserializedSimpleFunctionDescriptor]

'require' @ [2172:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'produced' @ [2172:33] ==> val produced: Set<StateAndRef<LinearState>> defined in net.corda.node.services.vault.VaultQueryTests.trackLinearStates.<anonymous>.<anonymous>[LocalVariableDescriptor]

'size' @ [2172:42] ==> public abstract val size: Int defined in kotlin.collections.Set[DeserializedPropertyDescriptor]

'expect' @ [2174:21] ==> public inline fun <reified E : Any> expect(noinline match: (Vault.Update<LinearState>) -> Boolean = ..., noinline expectClosure: (Vault.Update<LinearState>) -> Unit): ExpectCompose<Vault.Update<LinearState>> defined in net.corda.testing[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified E : Any> -> Update<LinearState>

'component1' @ [2174:31] ==> public final operator fun component1(): Set<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component2' @ [2174:41] ==> public final operator fun component2(): Set<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component3' @ [2174:51] ==> public final operator fun component3(): UUID? defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'require' @ [2175:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'flowId' @ [2175:33] ==> val flowId: UUID? defined in net.corda.node.services.vault.VaultQueryTests.trackLinearStates.<anonymous>.<anonymous>[LocalVariableDescriptor]

'require' @ [2176:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'consumed' @ [2176:33] ==> val consumed: Set<StateAndRef<LinearState>> defined in net.corda.node.services.vault.VaultQueryTests.trackLinearStates.<anonymous>.<anonymous>[LocalVariableDescriptor]

'isEmpty' @ [2176:42] ==> public abstract fun isEmpty(): Boolean defined in kotlin.collections.Set[DeserializedSimpleFunctionDescriptor]

'require' @ [2177:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'produced' @ [2177:33] ==> val produced: Set<StateAndRef<LinearState>> defined in net.corda.node.services.vault.VaultQueryTests.trackLinearStates.<anonymous>.<anonymous>[LocalVariableDescriptor]

'size' @ [2177:42] ==> public abstract val size: Int defined in kotlin.collections.Set[DeserializedPropertyDescriptor]

'Test' @ [2183:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'database' @ [2186:13] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [2186:22] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Observable<Vault.Update<DealState>>): Observable<Vault.Update<DealState>> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Observable<Update<DealState>>

'component1' @ [2188:22] ==> public final operator fun component1(): Vault.Page<DealState> defined in net.corda.core.messaging.DataFeed[DeserializedSimpleFunctionDescriptor]

'component2' @ [2188:32] ==> public final operator fun component2(): Observable<Vault.Update<DealState>> defined in net.corda.core.messaging.DataFeed[DeserializedSimpleFunctionDescriptor]

'vaultQuerySvc' @ [2188:44] ==> public final val vaultQuerySvc: VaultQueryService defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'trackBy' @ [2188:58] ==> public inline fun <reified T : ContractState> VaultQueryService.trackBy(): DataFeed<Vault.Page<DealState>, Vault.Update<DealState>> defined in net.corda.core.node.services[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified T : ContractState> -> DealState

'assertThat' @ [2190:17] ==> @CheckReturnValue public open fun <ELEMENT : (Any..Any?)> assertThat(p0: (MutableList<out (StateAndRef<DealState>..StateAndRef<DealState>?)>..List<(StateAndRef<DealState>..StateAndRef<DealState>?)>?)): (ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>..ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <ELEMENT : (Any..Any?)> -> StateAndRef<DealState>

'snapshot' @ [2190:28] ==> val snapshot: Vault.Page<DealState> defined in net.corda.node.services.vault.VaultQueryTests.trackDealStates.<anonymous>[LocalVariableDescriptor]

'states' @ [2190:37] ==> public final val states: List<StateAndRef<DealState>> defined in net.corda.core.node.services.Vault.Page[DeserializedPropertyDescriptor]

'hasSize' @ [2190:45] ==> public open fun hasSize(p0: Int): (ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>..ListAssert<(StateAndRef<DealState>..StateAndRef<DealState>?)>?) defined in org.assertj.core.api.ListAssert[JavaMethodDescriptor]

'updates' @ [2191:17] ==> val updates: Observable<Vault.Update<DealState>> defined in net.corda.node.services.vault.VaultQueryTests.trackDealStates.<anonymous>[LocalVariableDescriptor]

'component1' @ [2193:14] ==> public final operator fun component1(): Iterable<StateAndRef<LinearState>> defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor]

'component2' @ [2193:27] ==> public final operator fun component2(): Iterable<StateAndRef<DealState>> defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor]

'database' @ [2194:13] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [2194:22] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Pair<Iterable<StateAndRef<LinearState>>, Iterable<StateAndRef<DealState>>>): Pair<Iterable<StateAndRef<LinearState>>, Iterable<StateAndRef<DealState>>> defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Pair<Iterable<StateAndRef<LinearState>>, Iterable<StateAndRef<DealState>>>

'services' @ [2195:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [2195:26] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [2195:51] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [2195:60] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [2195:76] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [2195:96] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [2196:36] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestLinearStates' @ [2196:45] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestLinearStates(numberToCreate: Int, externalId: String? = ..., participants: List<AbstractParty> = ..., linearString: String = ..., linearNumber: Long = ..., linearBoolean: Boolean = ..., linearTimestamp: Instant = ...): Vault<LinearState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'states' @ [2196:78] ==> public final val states: Iterable<StateAndRef<LinearState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'services' @ [2197:34] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [2197:43] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [2197:65] ==> public fun <T> listOf(vararg elements: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'states' @ [2197:94] ==> public final val states: Iterable<StateAndRef<DealState>> defined in net.corda.core.node.services.Vault[DeserializedPropertyDescriptor]

'services' @ [2199:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestCash' @ [2199:26] ==> public fun ServiceHub.fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub = ..., outputNotary: Party = ..., atLeastThisManyStates: Int = ..., atMostThisManyStates: Int = ..., rng: Random = ..., ref: OpaqueBytes = ..., ownedBy: AbstractParty? = ..., issuedBy: PartyAndReference = ...): Vault<Cash.State> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'POUNDS' @ [2199:51] ==> public val Int.POUNDS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'notaryServices' @ [2199:59] ==> public final lateinit var notaryServices: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'DUMMY_NOTARY' @ [2199:75] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'Random' @ [2199:95] ==> public constructor Random(p0: Long) defined in java.util.Random[JavaClassConstructorDescriptor]

'services' @ [2201:17] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'fillWithSomeTestDeals' @ [2201:26] ==> @JvmOverloads public fun ServiceHub.fillWithSomeTestDeals(dealIds: List<String>, participants: List<AbstractParty> = ..., notary: Party = ...): Vault<DealState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'listOf' @ [2201:48] ==> public fun <T> listOf(element: String): List<String> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> String

'Pair' @ [2202:17] ==> public constructor Pair<out A, out B>(first: Iterable<StateAndRef<LinearState>>, second: Iterable<StateAndRef<DealState>>) defined in kotlin.Pair[DeserializedClassConstructorDescriptor]
Inferred types:
    <out A> -> Iterable<StateAndRef<LinearState>>
    <out B> -> Iterable<StateAndRef<DealState>>

'linearStates' @ [2202:22] ==> val linearStates: Iterable<StateAndRef<LinearState>> defined in net.corda.node.services.vault.VaultQueryTests.trackDealStates.<anonymous>[LocalVariableDescriptor]

'dealStates' @ [2202:35] ==> val dealStates: Iterable<StateAndRef<DealState>> defined in net.corda.node.services.vault.VaultQueryTests.trackDealStates.<anonymous>[LocalVariableDescriptor]

'database' @ [2204:9] ==> public final lateinit var database: CordaPersistence defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'transaction' @ [2204:18] ==> public final fun <T> transaction(statement: DatabaseTransaction.() -> Unit): Unit defined in net.corda.node.utilities.CordaPersistence[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> Unit

'services' @ [2206:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeCash' @ [2206:22] ==> @JvmOverloads public fun ServiceHub.consumeCash(amount: Amount<Currency>, to: Party = ..., notary: Party): Vault.Update<ContractState> defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'DOLLARS' @ [2206:38] ==> public val Int.DOLLARS: Amount<Currency> defined in net.corda.finance[DeserializedPropertyDescriptor]

'DUMMY_NOTARY' @ [2206:56] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [2207:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeDeals' @ [2207:22] ==> public fun ServiceHub.consumeDeals(dealStates: List<StateAndRef<DealState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'dealStates' @ [2207:35] ==> val dealStates: Iterable<StateAndRef<DealState>> defined in net.corda.node.services.vault.VaultQueryTests.trackDealStates[LocalVariableDescriptor]

'toList' @ [2207:46] ==> public fun <T> Iterable<StateAndRef<DealState>>.toList(): List<StateAndRef<DealState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<DealState>

'DUMMY_NOTARY' @ [2207:56] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'services' @ [2208:13] ==> public final lateinit var services: MockServices defined in net.corda.node.services.vault.VaultQueryTests[PropertyDescriptorImpl]

'consumeLinearStates' @ [2208:22] ==> public fun ServiceHub.consumeLinearStates(linearStates: List<StateAndRef<LinearState>>, notary: Party): Unit defined in net.corda.testing.contracts[DeserializedSimpleFunctionDescriptor]

'linearStates' @ [2208:42] ==> val linearStates: Iterable<StateAndRef<LinearState>> defined in net.corda.node.services.vault.VaultQueryTests.trackDealStates[LocalVariableDescriptor]

'toList' @ [2208:55] ==> public fun <T> Iterable<StateAndRef<LinearState>>.toList(): List<StateAndRef<LinearState>> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <T> -> StateAndRef<LinearState>

'DUMMY_NOTARY' @ [2208:65] ==> public val DUMMY_NOTARY: Party defined in net.corda.testing[DeserializedPropertyDescriptor]

'updates' @ [2211:9] ==> val updates: Observable<Vault.Update<DealState>> defined in net.corda.node.services.vault.VaultQueryTests.trackDealStates[LocalVariableDescriptor]

'expectEvents' @ [2211:17] ==> public fun <E : Any> Observable<Vault.Update<DealState>>.expectEvents(isStrict: Boolean = ..., expectCompose: () -> ExpectCompose<Vault.Update<DealState>>): Unit defined in net.corda.testing[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <E : Any> -> Update<DealState>

'sequence' @ [2212:13] ==> public fun <E> sequence(vararg expectations: ExpectCompose<Vault.Update<DealState>>): ExpectCompose<Vault.Update<DealState>> defined in net.corda.testing[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <E> -> Update<DealState>

'expect' @ [2213:21] ==> public inline fun <reified E : Any> expect(noinline match: (Vault.Update<DealState>) -> Boolean = ..., noinline expectClosure: (Vault.Update<DealState>) -> Unit): ExpectCompose<Vault.Update<DealState>> defined in net.corda.testing[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified E : Any> -> Update<DealState>

'component1' @ [2213:31] ==> public final operator fun component1(): Set<StateAndRef<DealState>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component2' @ [2213:41] ==> public final operator fun component2(): Set<StateAndRef<DealState>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component3' @ [2213:51] ==> public final operator fun component3(): UUID? defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'require' @ [2214:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'flowId' @ [2214:33] ==> val flowId: UUID? defined in net.corda.node.services.vault.VaultQueryTests.trackDealStates.<anonymous>.<anonymous>[LocalVariableDescriptor]

'require' @ [2215:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'consumed' @ [2215:33] ==> val consumed: Set<StateAndRef<DealState>> defined in net.corda.node.services.vault.VaultQueryTests.trackDealStates.<anonymous>.<anonymous>[LocalVariableDescriptor]

'isEmpty' @ [2215:42] ==> public abstract fun isEmpty(): Boolean defined in kotlin.collections.Set[DeserializedSimpleFunctionDescriptor]

'require' @ [2216:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'produced' @ [2216:33] ==> val produced: Set<StateAndRef<DealState>> defined in net.corda.node.services.vault.VaultQueryTests.trackDealStates.<anonymous>.<anonymous>[LocalVariableDescriptor]

'size' @ [2216:42] ==> public abstract val size: Int defined in kotlin.collections.Set[DeserializedPropertyDescriptor]

'expect' @ [2218:21] ==> public inline fun <reified E : Any> expect(noinline match: (Vault.Update<DealState>) -> Boolean = ..., noinline expectClosure: (Vault.Update<DealState>) -> Unit): ExpectCompose<Vault.Update<DealState>> defined in net.corda.testing[DeserializedSimpleFunctionDescriptor]
Inferred types:
    <reified E : Any> -> Update<DealState>

'component1' @ [2218:31] ==> public final operator fun component1(): Set<StateAndRef<DealState>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component2' @ [2218:41] ==> public final operator fun component2(): Set<StateAndRef<DealState>> defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'component3' @ [2218:51] ==> public final operator fun component3(): UUID? defined in net.corda.core.node.services.Vault.Update[DeserializedSimpleFunctionDescriptor]

'require' @ [2219:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'flowId' @ [2219:33] ==> val flowId: UUID? defined in net.corda.node.services.vault.VaultQueryTests.trackDealStates.<anonymous>.<anonymous>[LocalVariableDescriptor]

'require' @ [2220:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'consumed' @ [2220:33] ==> val consumed: Set<StateAndRef<DealState>> defined in net.corda.node.services.vault.VaultQueryTests.trackDealStates.<anonymous>.<anonymous>[LocalVariableDescriptor]

'isEmpty' @ [2220:42] ==> public abstract fun isEmpty(): Boolean defined in kotlin.collections.Set[DeserializedSimpleFunctionDescriptor]

'require' @ [2221:25] ==> @InlineOnly public inline fun require(value: Boolean, lazyMessage: () -> Any): Unit defined in kotlin[DeserializedSimpleFunctionDescriptor]

'produced' @ [2221:33] ==> val produced: Set<StateAndRef<DealState>> defined in net.corda.node.services.vault.VaultQueryTests.trackDealStates.<anonymous>.<anonymous>[LocalVariableDescriptor]

'size' @ [2221:42] ==> public abstract val size: Int defined in kotlin.collections.Set[DeserializedPropertyDescriptor]

