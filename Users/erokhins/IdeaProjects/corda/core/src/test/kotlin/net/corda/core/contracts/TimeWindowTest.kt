'now' @ [12:31] ==> public open fun now(): (Instant..Instant?) defined in java.time.Instant[JavaMethodDescriptor]

'Test' @ [14:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'TimeWindow' @ [16:26] ==> public companion object defined in net.corda.core.contracts.TimeWindow[FakeCallableDescriptorForObject]

'fromOnly' @ [16:37] ==> @JvmStatic public final fun fromOnly(fromTime: Instant): TimeWindow defined in net.corda.core.contracts.TimeWindow.Companion[DeserializedSimpleFunctionDescriptor]

'now' @ [16:46] ==> private final val now: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest[PropertyDescriptorImpl]

'assertThat' @ [17:9] ==> @CheckReturnValue public open fun <T : (Comparable<(Instant..Instant?)>..Comparable<(Instant..Instant?)>?)> assertThat(p0: (Instant..Instant?)): (AbstractComparableAssert<*, (Instant..Instant?)>..AbstractComparableAssert<*, (Instant..Instant?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Comparable<(T..T?)>..Comparable<(T..T?)>?)> -> Instant

'timeWindow' @ [17:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.fromOnly[LocalVariableDescriptor]

'fromTime' @ [17:31] ==> public abstract val fromTime: Instant? defined in net.corda.core.contracts.TimeWindow[DeserializedPropertyDescriptor]

'isEqualTo' @ [17:41] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?) defined in org.assertj.core.api.AbstractComparableAssert[JavaMethodDescriptor]

'now' @ [17:51] ==> private final val now: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest[PropertyDescriptorImpl]

'assertThat' @ [18:9] ==> @CheckReturnValue public open fun <T : (Comparable<(Instant..Instant?)>..Comparable<(Instant..Instant?)>?)> assertThat(p0: (Instant..Instant?)): (AbstractComparableAssert<*, (Instant..Instant?)>..AbstractComparableAssert<*, (Instant..Instant?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Comparable<(T..T?)>..Comparable<(T..T?)>?)> -> Instant

'timeWindow' @ [18:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.fromOnly[LocalVariableDescriptor]

'untilTime' @ [18:31] ==> public abstract val untilTime: Instant? defined in net.corda.core.contracts.TimeWindow[DeserializedPropertyDescriptor]

'isNull' @ [18:42] ==> public open fun isNull(): Unit defined in org.assertj.core.api.AbstractComparableAssert[JavaMethodDescriptor]

'assertThat' @ [19:9] ==> @CheckReturnValue public open fun <T : (Comparable<(Instant..Instant?)>..Comparable<(Instant..Instant?)>?)> assertThat(p0: (Instant..Instant?)): (AbstractComparableAssert<*, (Instant..Instant?)>..AbstractComparableAssert<*, (Instant..Instant?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Comparable<(T..T?)>..Comparable<(T..T?)>?)> -> Instant

'timeWindow' @ [19:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.fromOnly[LocalVariableDescriptor]

'midpoint' @ [19:31] ==> public abstract val midpoint: Instant? defined in net.corda.core.contracts.TimeWindow[DeserializedPropertyDescriptor]

'isNull' @ [19:41] ==> public open fun isNull(): Unit defined in org.assertj.core.api.AbstractComparableAssert[JavaMethodDescriptor]

'assertThat' @ [20:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'timeWindow' @ [20:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.fromOnly[LocalVariableDescriptor]

'contains' @ [20:31] ==> public abstract operator fun contains(instant: Instant): Boolean defined in net.corda.core.contracts.TimeWindow[DeserializedSimpleFunctionDescriptor]

'now' @ [20:40] ==> private final val now: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest[PropertyDescriptorImpl]

'millis' @ [20:48] ==> public val Int.millis: Duration defined in net.corda.core.utilities[DeserializedPropertyDescriptor]

'isFalse' @ [20:57] ==> public open fun isFalse(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [21:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'timeWindow' @ [21:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.fromOnly[LocalVariableDescriptor]

'contains' @ [21:31] ==> public abstract operator fun contains(instant: Instant): Boolean defined in net.corda.core.contracts.TimeWindow[DeserializedSimpleFunctionDescriptor]

'now' @ [21:40] ==> private final val now: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest[PropertyDescriptorImpl]

'isTrue' @ [21:46] ==> public open fun isTrue(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [22:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'timeWindow' @ [22:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.fromOnly[LocalVariableDescriptor]

'contains' @ [22:31] ==> public abstract operator fun contains(instant: Instant): Boolean defined in net.corda.core.contracts.TimeWindow[DeserializedSimpleFunctionDescriptor]

'now' @ [22:40] ==> private final val now: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest[PropertyDescriptorImpl]

'millis' @ [22:48] ==> public val Int.millis: Duration defined in net.corda.core.utilities[DeserializedPropertyDescriptor]

'isTrue' @ [22:57] ==> public open fun isTrue(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'Test' @ [25:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'TimeWindow' @ [27:26] ==> public companion object defined in net.corda.core.contracts.TimeWindow[FakeCallableDescriptorForObject]

'untilOnly' @ [27:37] ==> @JvmStatic public final fun untilOnly(untilTime: Instant): TimeWindow defined in net.corda.core.contracts.TimeWindow.Companion[DeserializedSimpleFunctionDescriptor]

'now' @ [27:47] ==> private final val now: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest[PropertyDescriptorImpl]

'assertThat' @ [28:9] ==> @CheckReturnValue public open fun <T : (Comparable<(Instant..Instant?)>..Comparable<(Instant..Instant?)>?)> assertThat(p0: (Instant..Instant?)): (AbstractComparableAssert<*, (Instant..Instant?)>..AbstractComparableAssert<*, (Instant..Instant?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Comparable<(T..T?)>..Comparable<(T..T?)>?)> -> Instant

'timeWindow' @ [28:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.untilOnly[LocalVariableDescriptor]

'fromTime' @ [28:31] ==> public abstract val fromTime: Instant? defined in net.corda.core.contracts.TimeWindow[DeserializedPropertyDescriptor]

'isNull' @ [28:41] ==> public open fun isNull(): Unit defined in org.assertj.core.api.AbstractComparableAssert[JavaMethodDescriptor]

'assertThat' @ [29:9] ==> @CheckReturnValue public open fun <T : (Comparable<(Instant..Instant?)>..Comparable<(Instant..Instant?)>?)> assertThat(p0: (Instant..Instant?)): (AbstractComparableAssert<*, (Instant..Instant?)>..AbstractComparableAssert<*, (Instant..Instant?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Comparable<(T..T?)>..Comparable<(T..T?)>?)> -> Instant

'timeWindow' @ [29:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.untilOnly[LocalVariableDescriptor]

'untilTime' @ [29:31] ==> public abstract val untilTime: Instant? defined in net.corda.core.contracts.TimeWindow[DeserializedPropertyDescriptor]

'isEqualTo' @ [29:42] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?) defined in org.assertj.core.api.AbstractComparableAssert[JavaMethodDescriptor]

'now' @ [29:52] ==> private final val now: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest[PropertyDescriptorImpl]

'assertThat' @ [30:9] ==> @CheckReturnValue public open fun <T : (Comparable<(Instant..Instant?)>..Comparable<(Instant..Instant?)>?)> assertThat(p0: (Instant..Instant?)): (AbstractComparableAssert<*, (Instant..Instant?)>..AbstractComparableAssert<*, (Instant..Instant?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Comparable<(T..T?)>..Comparable<(T..T?)>?)> -> Instant

'timeWindow' @ [30:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.untilOnly[LocalVariableDescriptor]

'midpoint' @ [30:31] ==> public abstract val midpoint: Instant? defined in net.corda.core.contracts.TimeWindow[DeserializedPropertyDescriptor]

'isNull' @ [30:41] ==> public open fun isNull(): Unit defined in org.assertj.core.api.AbstractComparableAssert[JavaMethodDescriptor]

'assertThat' @ [31:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'timeWindow' @ [31:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.untilOnly[LocalVariableDescriptor]

'contains' @ [31:31] ==> public abstract operator fun contains(instant: Instant): Boolean defined in net.corda.core.contracts.TimeWindow[DeserializedSimpleFunctionDescriptor]

'now' @ [31:40] ==> private final val now: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest[PropertyDescriptorImpl]

'millis' @ [31:48] ==> public val Int.millis: Duration defined in net.corda.core.utilities[DeserializedPropertyDescriptor]

'isTrue' @ [31:57] ==> public open fun isTrue(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [32:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'timeWindow' @ [32:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.untilOnly[LocalVariableDescriptor]

'contains' @ [32:31] ==> public abstract operator fun contains(instant: Instant): Boolean defined in net.corda.core.contracts.TimeWindow[DeserializedSimpleFunctionDescriptor]

'now' @ [32:40] ==> private final val now: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest[PropertyDescriptorImpl]

'isFalse' @ [32:46] ==> public open fun isFalse(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [33:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'timeWindow' @ [33:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.untilOnly[LocalVariableDescriptor]

'contains' @ [33:31] ==> public abstract operator fun contains(instant: Instant): Boolean defined in net.corda.core.contracts.TimeWindow[DeserializedSimpleFunctionDescriptor]

'now' @ [33:40] ==> private final val now: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest[PropertyDescriptorImpl]

'millis' @ [33:48] ==> public val Int.millis: Duration defined in net.corda.core.utilities[DeserializedPropertyDescriptor]

'isFalse' @ [33:57] ==> public open fun isFalse(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'Test' @ [36:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'now' @ [38:31] ==> public open fun now(): (LocalDate..LocalDate?) defined in java.time.LocalDate[JavaMethodDescriptor]

'today' @ [39:24] ==> val today: (LocalDate..LocalDate?) defined in net.corda.core.contracts.TimeWindowTest.between[LocalVariableDescriptor]

'atTime' @ [39:30] ==> public open fun atTime(p0: Int, p1: Int): (LocalDateTime..LocalDateTime?) defined in java.time.LocalDate[JavaMethodDescriptor]

'toInstant' @ [39:44] ==> public open fun toInstant(p0: (ZoneOffset..ZoneOffset?)): (Instant..Instant?) defined in java.time.LocalDateTime[JavaMethodDescriptor]

'UTC' @ [39:54] ==> public final val UTC: (ZoneOffset..ZoneOffset?) defined in java.time.ZoneOffset[JavaPropertyDescriptor]

'today' @ [40:25] ==> val today: (LocalDate..LocalDate?) defined in net.corda.core.contracts.TimeWindowTest.between[LocalVariableDescriptor]

'atTime' @ [40:31] ==> public open fun atTime(p0: Int, p1: Int): (LocalDateTime..LocalDateTime?) defined in java.time.LocalDate[JavaMethodDescriptor]

'toInstant' @ [40:46] ==> public open fun toInstant(p0: (ZoneOffset..ZoneOffset?)): (Instant..Instant?) defined in java.time.LocalDateTime[JavaMethodDescriptor]

'UTC' @ [40:56] ==> public final val UTC: (ZoneOffset..ZoneOffset?) defined in java.time.ZoneOffset[JavaPropertyDescriptor]

'TimeWindow' @ [41:26] ==> public companion object defined in net.corda.core.contracts.TimeWindow[FakeCallableDescriptorForObject]

'between' @ [41:37] ==> @JvmStatic public final fun between(fromTime: Instant, untilTime: Instant): TimeWindow defined in net.corda.core.contracts.TimeWindow.Companion[DeserializedSimpleFunctionDescriptor]

'fromTime' @ [41:45] ==> val fromTime: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest.between[LocalVariableDescriptor]

'untilTime' @ [41:55] ==> val untilTime: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest.between[LocalVariableDescriptor]

'assertThat' @ [42:9] ==> @CheckReturnValue public open fun <T : (Comparable<(Instant..Instant?)>..Comparable<(Instant..Instant?)>?)> assertThat(p0: (Instant..Instant?)): (AbstractComparableAssert<*, (Instant..Instant?)>..AbstractComparableAssert<*, (Instant..Instant?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Comparable<(T..T?)>..Comparable<(T..T?)>?)> -> Instant

'timeWindow' @ [42:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.between[LocalVariableDescriptor]

'fromTime' @ [42:31] ==> public abstract val fromTime: Instant? defined in net.corda.core.contracts.TimeWindow[DeserializedPropertyDescriptor]

'isEqualTo' @ [42:41] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?) defined in org.assertj.core.api.AbstractComparableAssert[JavaMethodDescriptor]

'fromTime' @ [42:51] ==> val fromTime: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest.between[LocalVariableDescriptor]

'assertThat' @ [43:9] ==> @CheckReturnValue public open fun <T : (Comparable<(Instant..Instant?)>..Comparable<(Instant..Instant?)>?)> assertThat(p0: (Instant..Instant?)): (AbstractComparableAssert<*, (Instant..Instant?)>..AbstractComparableAssert<*, (Instant..Instant?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Comparable<(T..T?)>..Comparable<(T..T?)>?)> -> Instant

'timeWindow' @ [43:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.between[LocalVariableDescriptor]

'untilTime' @ [43:31] ==> public abstract val untilTime: Instant? defined in net.corda.core.contracts.TimeWindow[DeserializedPropertyDescriptor]

'isEqualTo' @ [43:42] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?) defined in org.assertj.core.api.AbstractComparableAssert[JavaMethodDescriptor]

'untilTime' @ [43:52] ==> val untilTime: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest.between[LocalVariableDescriptor]

'assertThat' @ [44:9] ==> @CheckReturnValue public open fun <T : (Comparable<(Instant..Instant?)>..Comparable<(Instant..Instant?)>?)> assertThat(p0: (Instant..Instant?)): (AbstractComparableAssert<*, (Instant..Instant?)>..AbstractComparableAssert<*, (Instant..Instant?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Comparable<(T..T?)>..Comparable<(T..T?)>?)> -> Instant

'timeWindow' @ [44:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.between[LocalVariableDescriptor]

'midpoint' @ [44:31] ==> public abstract val midpoint: Instant? defined in net.corda.core.contracts.TimeWindow[DeserializedPropertyDescriptor]

'isEqualTo' @ [44:41] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?) defined in org.assertj.core.api.AbstractComparableAssert[JavaMethodDescriptor]

'today' @ [44:51] ==> val today: (LocalDate..LocalDate?) defined in net.corda.core.contracts.TimeWindowTest.between[LocalVariableDescriptor]

'atTime' @ [44:57] ==> public open fun atTime(p0: Int, p1: Int): (LocalDateTime..LocalDateTime?) defined in java.time.LocalDate[JavaMethodDescriptor]

'toInstant' @ [44:72] ==> public open fun toInstant(p0: (ZoneOffset..ZoneOffset?)): (Instant..Instant?) defined in java.time.LocalDateTime[JavaMethodDescriptor]

'UTC' @ [44:82] ==> public final val UTC: (ZoneOffset..ZoneOffset?) defined in java.time.ZoneOffset[JavaPropertyDescriptor]

'assertThat' @ [45:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'timeWindow' @ [45:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.between[LocalVariableDescriptor]

'contains' @ [45:31] ==> public abstract operator fun contains(instant: Instant): Boolean defined in net.corda.core.contracts.TimeWindow[DeserializedSimpleFunctionDescriptor]

'fromTime' @ [45:40] ==> val fromTime: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest.between[LocalVariableDescriptor]

'millis' @ [45:53] ==> public val Int.millis: Duration defined in net.corda.core.utilities[DeserializedPropertyDescriptor]

'isFalse' @ [45:62] ==> public open fun isFalse(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [46:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'timeWindow' @ [46:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.between[LocalVariableDescriptor]

'contains' @ [46:31] ==> public abstract operator fun contains(instant: Instant): Boolean defined in net.corda.core.contracts.TimeWindow[DeserializedSimpleFunctionDescriptor]

'fromTime' @ [46:40] ==> val fromTime: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest.between[LocalVariableDescriptor]

'isTrue' @ [46:51] ==> public open fun isTrue(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [47:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'timeWindow' @ [47:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.between[LocalVariableDescriptor]

'contains' @ [47:31] ==> public abstract operator fun contains(instant: Instant): Boolean defined in net.corda.core.contracts.TimeWindow[DeserializedSimpleFunctionDescriptor]

'fromTime' @ [47:40] ==> val fromTime: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest.between[LocalVariableDescriptor]

'millis' @ [47:53] ==> public val Int.millis: Duration defined in net.corda.core.utilities[DeserializedPropertyDescriptor]

'isTrue' @ [47:62] ==> public open fun isTrue(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [48:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'timeWindow' @ [48:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.between[LocalVariableDescriptor]

'contains' @ [48:31] ==> public abstract operator fun contains(instant: Instant): Boolean defined in net.corda.core.contracts.TimeWindow[DeserializedSimpleFunctionDescriptor]

'untilTime' @ [48:40] ==> val untilTime: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest.between[LocalVariableDescriptor]

'isFalse' @ [48:52] ==> public open fun isFalse(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'assertThat' @ [49:9] ==> @CheckReturnValue public open fun assertThat(p0: Boolean): (AbstractBooleanAssert<*>..AbstractBooleanAssert<*>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]

'timeWindow' @ [49:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.between[LocalVariableDescriptor]

'contains' @ [49:31] ==> public abstract operator fun contains(instant: Instant): Boolean defined in net.corda.core.contracts.TimeWindow[DeserializedSimpleFunctionDescriptor]

'untilTime' @ [49:40] ==> val untilTime: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest.between[LocalVariableDescriptor]

'millis' @ [49:54] ==> public val Int.millis: Duration defined in net.corda.core.utilities[DeserializedPropertyDescriptor]

'isFalse' @ [49:63] ==> public open fun isFalse(): (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>..AbstractBooleanAssert<out (AbstractBooleanAssert<out Any?>..AbstractBooleanAssert<out Any?>?)>?)>?)>?)>?) defined in org.assertj.core.api.AbstractBooleanAssert[JavaMethodDescriptor]

'Test' @ [52:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'TimeWindow' @ [54:26] ==> public companion object defined in net.corda.core.contracts.TimeWindow[FakeCallableDescriptorForObject]

'fromStartAndDuration' @ [54:37] ==> @JvmStatic public final fun fromStartAndDuration(fromTime: Instant, duration: Duration): TimeWindow defined in net.corda.core.contracts.TimeWindow.Companion[DeserializedSimpleFunctionDescriptor]

'now' @ [54:58] ==> private final val now: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest[PropertyDescriptorImpl]

'minutes' @ [54:66] ==> public val Int.minutes: Duration defined in net.corda.core.utilities[DeserializedPropertyDescriptor]

'assertThat' @ [55:9] ==> @CheckReturnValue public open fun <T : (Comparable<(Instant..Instant?)>..Comparable<(Instant..Instant?)>?)> assertThat(p0: (Instant..Instant?)): (AbstractComparableAssert<*, (Instant..Instant?)>..AbstractComparableAssert<*, (Instant..Instant?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Comparable<(T..T?)>..Comparable<(T..T?)>?)> -> Instant

'timeWindow' @ [55:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.fromStartAndDuration[LocalVariableDescriptor]

'fromTime' @ [55:31] ==> public abstract val fromTime: Instant? defined in net.corda.core.contracts.TimeWindow[DeserializedPropertyDescriptor]

'isEqualTo' @ [55:41] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?) defined in org.assertj.core.api.AbstractComparableAssert[JavaMethodDescriptor]

'now' @ [55:51] ==> private final val now: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest[PropertyDescriptorImpl]

'assertThat' @ [56:9] ==> @CheckReturnValue public open fun <T : (Comparable<(Instant..Instant?)>..Comparable<(Instant..Instant?)>?)> assertThat(p0: (Instant..Instant?)): (AbstractComparableAssert<*, (Instant..Instant?)>..AbstractComparableAssert<*, (Instant..Instant?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Comparable<(T..T?)>..Comparable<(T..T?)>?)> -> Instant

'timeWindow' @ [56:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.fromStartAndDuration[LocalVariableDescriptor]

'untilTime' @ [56:31] ==> public abstract val untilTime: Instant? defined in net.corda.core.contracts.TimeWindow[DeserializedPropertyDescriptor]

'isEqualTo' @ [56:42] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?) defined in org.assertj.core.api.AbstractComparableAssert[JavaMethodDescriptor]

'now' @ [56:52] ==> private final val now: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest[PropertyDescriptorImpl]

'minutes' @ [56:61] ==> public val Int.minutes: Duration defined in net.corda.core.utilities[DeserializedPropertyDescriptor]

'assertThat' @ [57:9] ==> @CheckReturnValue public open fun <T : (Comparable<(Instant..Instant?)>..Comparable<(Instant..Instant?)>?)> assertThat(p0: (Instant..Instant?)): (AbstractComparableAssert<*, (Instant..Instant?)>..AbstractComparableAssert<*, (Instant..Instant?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Comparable<(T..T?)>..Comparable<(T..T?)>?)> -> Instant

'timeWindow' @ [57:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.fromStartAndDuration[LocalVariableDescriptor]

'midpoint' @ [57:31] ==> public abstract val midpoint: Instant? defined in net.corda.core.contracts.TimeWindow[DeserializedPropertyDescriptor]

'isEqualTo' @ [57:41] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?) defined in org.assertj.core.api.AbstractComparableAssert[JavaMethodDescriptor]

'now' @ [57:51] ==> private final val now: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest[PropertyDescriptorImpl]

'minutes' @ [57:59] ==> public val Int.minutes: Duration defined in net.corda.core.utilities[DeserializedPropertyDescriptor]

'Test' @ [60:5] ==> public constructor Test(expected: KClass<out (Throwable..Throwable?)> = ..., timeout: Long = ...) defined in org.junit.Test[JavaClassConstructorDescriptor]

'TimeWindow' @ [62:26] ==> public companion object defined in net.corda.core.contracts.TimeWindow[FakeCallableDescriptorForObject]

'withTolerance' @ [62:37] ==> @JvmStatic public final fun withTolerance(instant: Instant, tolerance: Duration): TimeWindow defined in net.corda.core.contracts.TimeWindow.Companion[DeserializedSimpleFunctionDescriptor]

'now' @ [62:51] ==> private final val now: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest[PropertyDescriptorImpl]

'minutes' @ [62:59] ==> public val Int.minutes: Duration defined in net.corda.core.utilities[DeserializedPropertyDescriptor]

'assertThat' @ [63:9] ==> @CheckReturnValue public open fun <T : (Comparable<(Instant..Instant?)>..Comparable<(Instant..Instant?)>?)> assertThat(p0: (Instant..Instant?)): (AbstractComparableAssert<*, (Instant..Instant?)>..AbstractComparableAssert<*, (Instant..Instant?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Comparable<(T..T?)>..Comparable<(T..T?)>?)> -> Instant

'timeWindow' @ [63:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.withTolerance[LocalVariableDescriptor]

'fromTime' @ [63:31] ==> public abstract val fromTime: Instant? defined in net.corda.core.contracts.TimeWindow[DeserializedPropertyDescriptor]

'isEqualTo' @ [63:41] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?) defined in org.assertj.core.api.AbstractComparableAssert[JavaMethodDescriptor]

'now' @ [63:51] ==> private final val now: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest[PropertyDescriptorImpl]

'minutes' @ [63:60] ==> public val Int.minutes: Duration defined in net.corda.core.utilities[DeserializedPropertyDescriptor]

'assertThat' @ [64:9] ==> @CheckReturnValue public open fun <T : (Comparable<(Instant..Instant?)>..Comparable<(Instant..Instant?)>?)> assertThat(p0: (Instant..Instant?)): (AbstractComparableAssert<*, (Instant..Instant?)>..AbstractComparableAssert<*, (Instant..Instant?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Comparable<(T..T?)>..Comparable<(T..T?)>?)> -> Instant

'timeWindow' @ [64:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.withTolerance[LocalVariableDescriptor]

'untilTime' @ [64:31] ==> public abstract val untilTime: Instant? defined in net.corda.core.contracts.TimeWindow[DeserializedPropertyDescriptor]

'isEqualTo' @ [64:42] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?) defined in org.assertj.core.api.AbstractComparableAssert[JavaMethodDescriptor]

'now' @ [64:52] ==> private final val now: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest[PropertyDescriptorImpl]

'minutes' @ [64:61] ==> public val Int.minutes: Duration defined in net.corda.core.utilities[DeserializedPropertyDescriptor]

'assertThat' @ [65:9] ==> @CheckReturnValue public open fun <T : (Comparable<(Instant..Instant?)>..Comparable<(Instant..Instant?)>?)> assertThat(p0: (Instant..Instant?)): (AbstractComparableAssert<*, (Instant..Instant?)>..AbstractComparableAssert<*, (Instant..Instant?)>?) defined in org.assertj.core.api.Assertions[JavaMethodDescriptor]
Inferred types:
    <T : (Comparable<(T..T?)>..Comparable<(T..T?)>?)> -> Instant

'timeWindow' @ [65:20] ==> val timeWindow: TimeWindow defined in net.corda.core.contracts.TimeWindowTest.withTolerance[LocalVariableDescriptor]

'midpoint' @ [65:31] ==> public abstract val midpoint: Instant? defined in net.corda.core.contracts.TimeWindow[DeserializedPropertyDescriptor]

'isEqualTo' @ [65:41] ==> public open fun isEqualTo(p0: (Any..Any?)): (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>..AbstractComparableAssert<out (AbstractComparableAssert<out Any?, out Any?>..AbstractComparableAssert<out Any?, out Any?>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?), (Instant..Instant?)>?) defined in org.assertj.core.api.AbstractComparableAssert[JavaMethodDescriptor]

'now' @ [65:51] ==> private final val now: (Instant..Instant?) defined in net.corda.core.contracts.TimeWindowTest[PropertyDescriptorImpl]

